{
	"sidebar": [
		{
			"isHeading": true,
			"name": "Measurement",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "along",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "area",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "bbox",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "bboxClip",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "bboxPolygon",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "bearing",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "center",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "centerOfMass",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "centroid",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "destination",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "distance",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "envelope",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "length",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "midpoint",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "pointOnFeature",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "polygonTangents",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "pointToLineDistance",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "rhumbBearing",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "rhumbDestination",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "rhumbDistance",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "square",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "greatCircle",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Coordinate Mutation",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "cleanCoords",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "flip",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "rewind",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "round",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "truncate",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Transformation",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "bboxClip",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "bezierSpline",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "buffer",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "circle",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "clone",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "concave",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "convex",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "difference",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "dissolve",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "intersect",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineOffset",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "simplify",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "tesselate",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "transformRotate",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "transformTranslate",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "transformScale",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "union",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "voronoi",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Feature Conversion",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "combine",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "explode",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "flatten",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineToPolygon",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "polygonize",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "polygonToLine",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Misc",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "kinks",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineArc",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineChunk",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineIntersect",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineOverlap",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineSegment",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineSlice",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineSliceAlong",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineSplit",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "mask",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "nearestPointOnLine",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "sector",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "shortestPath",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "unkinkPolygon",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Helper",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "featureCollection",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "feature",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "geometryCollection",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lineString",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "multiLineString",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "multiPoint",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "multiPolygon",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "point",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "polygon",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Random",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "randomPosition",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "randomPoint",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "randomLineString",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "randomPolygon",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Data",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "sample",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Interpolation",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "interpolate",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "isobands",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "isolines",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "planepoint",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "tin",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Joins",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "pointsWithinPolygon",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "tag",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Grids",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "hexGrid",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "pointGrid",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "squareGrid",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "triangleGrid",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Classification",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "nearestPoint",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Aggregation",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "collect",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "clustersDbscan",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "clustersKmeans",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Meta",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "coordAll",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "coordEach",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "coordReduce",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "featureEach",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "featureReduce",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "flattenEach",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "flattenReduce",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "getCoord",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "getCoords",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "getGeom",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "getType",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "geomEach",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "geomReduce",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "propEach",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "propReduce",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "segmentEach",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "segmentReduce",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "getCluster",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "clusterEach",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "clusterReduce",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Assertions",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "collectionOf",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "containsNumber",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "geojsonType",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "featureOf",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Booleans",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanClockwise",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanContains",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanCrosses",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanDisjoint",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanEqual",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanOverlap",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanParallel",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanPointInPolygon",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanPointOnLine",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "booleanWithin",
			"hidden": false
		},
		{
			"isHeading": true,
			"name": "Unit Conversion",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "bearingToAzimuth",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "convertArea",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "convertLength",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "degreesToRadians",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lengthToRadians",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "lengthToDegrees",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "radiansToLength",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "radiansToDegrees",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "toMercator",
			"hidden": false
		},
		{
			"isHeading": false,
			"name": "toWgs84",
			"hidden": false
		}
	],
	"modules": [
		{
			"parent": null,
			"category": null,
			"name": "along",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">line</a>  and returns a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">point</a>  at a specified distance along the line.",
			"snippet": "var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\nvar options = {units: 'miles'};\n\nvar along = turf.along(line, 200, options);\n",
			"example": "var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\nvar options = {units: 'miles'};\n\nvar along = turf.along(line, 200, options);\n\n//addToMap\nvar addToMap = [along, line]",
			"hasMap": true,
			"npmName": "@turf/along",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "Point  distance   units  along the line"
				}
			],
			"params": [
				{
					"Argument": "line",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>>",
					"Description": "input line"
				},
				{
					"Argument": "distance",
					"Type": "number",
					"Description": "distance along the line"
				},
				{
					"Argument": "options",
					"Type": "Optional: Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "\"kilometers\"",
					"Description": "can be degrees, radians, miles, or kilometers"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "area",
			"description": "Takes one or more features and returns their area in square meters.",
			"snippet": "var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n\nvar area = turf.area(polygon);\n",
			"example": "var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n\nvar area = turf.area(polygon);\n\n//addToMap\nvar addToMap = [polygon]\npolygon.properties.area = area",
			"hasMap": true,
			"npmName": "@turf/area",
			"returns": [
				{
					"type": "number",
					"desc": "area in square meters"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "input GeoJSON feature(s)"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "bboxClip",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>  and a bbox and clips the feature to the bbox using  <a target=\"_blank\" href=\"https://github.com/mapbox/lineclip\">lineclip</a>.\nMay result in degenerate edges when clipping Polygons.",
			"snippet": "var bbox = [0, 0, 10, 10];\nvar poly = turf.polygon([[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]);\n\nvar clipped = turf.bboxClip(poly, bbox);\n",
			"example": "var bbox = [0, 0, 10, 10];\nvar poly = turf.polygon([[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]);\n\nvar clipped = turf.bboxClip(poly, bbox);\n\n//addToMap\nvar addToMap = [bbox, poly, clipped]",
			"hasMap": true,
			"npmName": "@turf/bbox-clip",
			"returns": [
				{
					"type": "Feature <(LineString | MultiLineString | Polygon | MultiPolygon)>",
					"desc": "clipped Feature"
				}
			],
			"params": [
				{
					"Argument": "feature",
					"Type": "Feature <(LineString | MultiLineString | Polygon | MultiPolygon)>",
					"Description": "feature to clip to the bbox"
				},
				{
					"Argument": "bbox",
					"Type": "Array <number>",
					"Description": "extent in  minX, minY, maxX, maxY  order"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "bboxPolygon",
			"description": "Takes a bbox and returns an equivalent  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">polygon</a>.",
			"snippet": "var bbox = [0, 0, 10, 10];\n\nvar poly = turf.bboxPolygon(bbox);\n",
			"example": "var bbox = [0, 0, 10, 10];\n\nvar poly = turf.bboxPolygon(bbox);\n\n//addToMap\nvar addToMap = [poly]",
			"hasMap": true,
			"npmName": "@turf/bbox-polygon",
			"returns": [
				{
					"type": "Feature <Polygon>",
					"desc": "a Polygon representation of the bounding box"
				}
			],
			"params": [
				{
					"Argument": "bbox",
					"Type": "Array <number>",
					"Description": "extent in  minX, minY, maxX, maxY  order"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "bbox",
			"description": "Takes a set of features, calculates the bbox of all input features, and returns a bounding box.",
			"snippet": "var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\nvar bbox = turf.bbox(line);\nvar bboxPolygon = turf.bboxPolygon(bbox);\n",
			"example": "var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\nvar bbox = turf.bbox(line);\nvar bboxPolygon = turf.bboxPolygon(bbox);\n\n//addToMap\nvar addToMap = [line, bboxPolygon]",
			"hasMap": true,
			"npmName": "@turf/bbox",
			"returns": [
				{
					"type": "Array <number>",
					"desc": "bbox extent in  minX, minY, maxX, maxY  order"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature <any>)",
					"Description": "input features"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "bearing",
			"description": "Takes two  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  and finds the geographic bearing between them,\ni.e. the angle measured in degrees from the north line (0 degrees)",
			"snippet": "var point1 = turf.point([-75.343, 39.984]);\nvar point2 = turf.point([-75.534, 39.123]);\n\nvar bearing = turf.bearing(point1, point2);\n",
			"example": "var point1 = turf.point([-75.343, 39.984]);\nvar point2 = turf.point([-75.534, 39.123]);\n\nvar bearing = turf.bearing(point1, point2);\n\n//addToMap\nvar addToMap = [point1, point2]\npoint1.properties['marker-color'] = '#f00'\npoint2.properties['marker-color'] = '#0f0'\npoint1.properties.bearing = bearing",
			"hasMap": true,
			"npmName": "@turf/bearing",
			"returns": [
				{
					"type": "number",
					"desc": "bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)"
				}
			],
			"params": [
				{
					"Argument": "start",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "starting Point"
				},
				{
					"Argument": "end",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "ending Point"
				},
				{
					"Argument": "options",
					"Type": "Optional: Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "final",
					"Type": "boolean",
					"Default": "false",
					"Description": "calculates the final bearing if true"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "bezierSpline",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">line</a>  and returns a curved version\nby applying a  <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/B%C3%A9zier_spline\">Bezier spline</a> \nalgorithm.",
			"snippet": "var line = turf.lineString([\n  [-76.091308, 18.427501],\n  [-76.695556, 18.729501],\n  [-76.552734, 19.40443],\n  [-74.61914, 19.134789],\n  [-73.652343, 20.07657],\n  [-73.157958, 20.210656]\n]);\n\nvar curved = turf.bezierSpline(line);\n",
			"example": "var line = turf.lineString([\n  [-76.091308, 18.427501],\n  [-76.695556, 18.729501],\n  [-76.552734, 19.40443],\n  [-74.61914, 19.134789],\n  [-73.652343, 20.07657],\n  [-73.157958, 20.210656]\n]);\n\nvar curved = turf.bezierSpline(line);\n\n//addToMap\nvar addToMap = [line, curved]\ncurved.properties = { stroke: '#0F0' };",
			"hasMap": true,
			"npmName": "@turf/bezier-spline",
			"returns": [
				{
					"type": "Feature <LineString>",
					"desc": "curved line"
				}
			],
			"params": [
				{
					"Argument": "line",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>>)",
					"Description": "input LineString"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "resolution",
					"Type": "number",
					"Default": "10000",
					"Description": "time in milliseconds between points"
				},
				{
					"Prop": "sharpness",
					"Type": "number",
					"Default": "0.85",
					"Description": "a measure of how curvy the path should be between splines"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanClockwise",
			"description": "Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.",
			"snippet": "var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\nvar counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n\nturf.booleanClockwise(clockwiseRing)\n//=true\nturf.booleanClockwise(counterClockwiseRing)\n//=false",
			"example": "var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\nvar counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n\nturf.booleanClockwise(clockwiseRing)\n//=true\nturf.booleanClockwise(counterClockwiseRing)\n//=false",
			"hasMap": false,
			"npmName": "@turf/boolean-clockwise",
			"returns": [
				{
					"type": "boolean",
					"desc": "true/false"
				}
			],
			"params": [
				{
					"Argument": "line",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>> | Array <Array <number>>)",
					"Description": "to be evaluated"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanContains",
			"description": "Boolean-contains returns True if the second geometry is completely contained by the first geometry.\nThe interiors of both geometries must intersect and, the interior and boundary of the secondary (geometry b)\nmust not intersect the exterior of the primary (geometry a).\nBoolean-contains returns the exact opposite result of the  @turf/boolean-within.",
			"snippet": "var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\nvar point = turf.point([1, 2]);\n\nturf.booleanContains(line, point);\n//=true",
			"example": "var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\nvar point = turf.point([1, 2]);\n\nturf.booleanContains(line, point);\n//=true",
			"hasMap": false,
			"npmName": "@turf/boolean-contains",
			"returns": [
				{
					"type": "boolean",
					"desc": "true/false"
				}
			],
			"params": [
				{
					"Argument": "feature1",
					"Type": "(Geometry | Feature <any>)",
					"Description": "GeoJSON Feature or Geometry"
				},
				{
					"Argument": "feature2",
					"Type": "(Geometry | Feature <any>)",
					"Description": "GeoJSON Feature or Geometry"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanCrosses",
			"description": "Boolean-Crosses returns True if the intersection results in a geometry whose dimension is one less than\nthe maximum dimension of the two source geometries and the intersection set is interior to\nboth source geometries.",
			"snippet": "var line1 = turf.lineString([[-2, 2], [4, 2]]);\nvar line2 = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n\nvar cross = turf.booleanCrosses(line1, line2);\n//=true",
			"example": "var line1 = turf.lineString([[-2, 2], [4, 2]]);\nvar line2 = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n\nvar cross = turf.booleanCrosses(line1, line2);\n//=true",
			"hasMap": false,
			"npmName": "@turf/boolean-crosses",
			"returns": [
				{
					"type": "boolean",
					"desc": "true/false"
				}
			],
			"params": [
				{
					"Argument": "feature1",
					"Type": "(Geometry | Feature <any>)",
					"Description": "GeoJSON Feature or Geometry"
				},
				{
					"Argument": "feature2",
					"Type": "(Geometry | Feature <any>)",
					"Description": "GeoJSON Feature or Geometry"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanDisjoint",
			"description": "Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.",
			"snippet": "var point = turf.point([2, 2]);\nvar line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n\nturf.booleanDisjoint(line, point);\n//=true",
			"example": "var point = turf.point([2, 2]);\nvar line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n\nturf.booleanDisjoint(line, point);\n//=true",
			"hasMap": false,
			"npmName": "@turf/boolean-disjoint",
			"returns": [
				{
					"type": "boolean",
					"desc": "true/false"
				}
			],
			"params": [
				{
					"Argument": "feature1",
					"Type": "(Geometry | Feature <any>)",
					"Description": "GeoJSON Feature or Geometry"
				},
				{
					"Argument": "feature2",
					"Type": "(Geometry | Feature <any>)",
					"Description": "GeoJSON Feature or Geometry"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanEqual",
			"description": "Determine whether two geometries of the same type have identical X,Y coordinate values.\nSee  <a target=\"_blank\" href=\"http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm\">http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm</a>",
			"snippet": "var pt1 = turf.point([0, 0]);\nvar pt2 = turf.point([0, 0]);\nvar pt3 = turf.point([1, 1]);\n\nturf.booleanEqual(pt1, pt2);\n//= true\nturf.booleanEqual(pt2, pt3);\n//= false",
			"example": "var pt1 = turf.point([0, 0]);\nvar pt2 = turf.point([0, 0]);\nvar pt3 = turf.point([1, 1]);\n\nturf.booleanEqual(pt1, pt2);\n//= true\nturf.booleanEqual(pt2, pt3);\n//= false",
			"hasMap": false,
			"npmName": "@turf/boolean-equal",
			"returns": [
				{
					"type": "boolean",
					"desc": "true if the objects are equal, false otherwise"
				}
			],
			"params": [
				{
					"Argument": "feature1",
					"Type": "(Geometry | Feature)",
					"Description": "GeoJSON input"
				},
				{
					"Argument": "feature2",
					"Type": "(Geometry | Feature)",
					"Description": "GeoJSON input"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanOverlap",
			"description": "Compares two geometries of the same dimension and returns true if their intersection set results in a geometry\ndifferent from both but of the same dimension. It applies to Polygon/Polygon, LineString/LineString,\nMultipoint/Multipoint, MultiLineString/MultiLineString and MultiPolygon/MultiPolygon.",
			"snippet": "var poly1 = turf.polygon([[[0,0],[0,5],[5,5],[5,0],[0,0]]]);\nvar poly2 = turf.polygon([[[1,1],[1,6],[6,6],[6,1],[1,1]]]);\nvar poly3 = turf.polygon([[[10,10],[10,15],[15,15],[15,10],[10,10]]]);\n\nturf.booleanOverlap(poly1, poly2)\n//=true\nturf.booleanOverlap(poly2, poly3)\n//=false",
			"example": "var poly1 = turf.polygon([[[0,0],[0,5],[5,5],[5,0],[0,0]]]);\nvar poly2 = turf.polygon([[[1,1],[1,6],[6,6],[6,1],[1,1]]]);\nvar poly3 = turf.polygon([[[10,10],[10,15],[15,15],[15,10],[10,10]]]);\n\nturf.booleanOverlap(poly1, poly2)\n//=true\nturf.booleanOverlap(poly2, poly3)\n//=false",
			"hasMap": false,
			"npmName": "@turf/boolean-overlap",
			"returns": [
				{
					"type": "boolean",
					"desc": "true/false"
				}
			],
			"params": [
				{
					"Argument": "feature1",
					"Type": "(Geometry | Feature <(LineString | MultiLineString | Polygon | MultiPolygon)>)",
					"Description": "input"
				},
				{
					"Argument": "feature2",
					"Type": "(Geometry | Feature <(LineString | MultiLineString | Polygon | MultiPolygon)>)",
					"Description": "input"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanParallel",
			"description": "Boolean-Parallel returns True if each segment of  line1  is parallel to the correspondent segment of  line2",
			"snippet": "var line1 = turf.lineString([[0, 0], [0, 1]]);\nvar line2 = turf.lineString([[1, 0], [1, 1]]);\n\nturf.booleanParallel(line1, line2);\n//=true",
			"example": "var line1 = turf.lineString([[0, 0], [0, 1]]);\nvar line2 = turf.lineString([[1, 0], [1, 1]]);\n\nturf.booleanParallel(line1, line2);\n//=true",
			"hasMap": false,
			"npmName": "@turf/boolean-parallel",
			"returns": [
				{
					"type": "boolean",
					"desc": "true/false if the lines are parallel"
				}
			],
			"params": [
				{
					"Argument": "line1",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>>)",
					"Description": "GeoJSON Feature or Geometry"
				},
				{
					"Argument": "line2",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>>)",
					"Description": "GeoJSON Feature or Geometry"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanPointInPolygon",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  and a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>  or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#multipolygon\">MultiPolygon</a>  and determines if the point resides inside the polygon. The polygon can\nbe convex or concave. The function accounts for holes.",
			"snippet": "var pt = turf.point([-77, 44]);\nvar poly = turf.polygon([[\n  [-81, 41],\n  [-81, 47],\n  [-72, 47],\n  [-72, 41],\n  [-81, 41]\n]]);\n\nturf.booleanPointInPolygon(pt, poly);\n//= true",
			"example": "var pt = turf.point([-77, 44]);\nvar poly = turf.polygon([[\n  [-81, 41],\n  [-81, 47],\n  [-72, 47],\n  [-72, 41],\n  [-81, 41]\n]]);\n\nturf.booleanPointInPolygon(pt, poly);\n//= true",
			"hasMap": false,
			"npmName": "@turf/boolean-point-in-polygon",
			"returns": [
				{
					"type": "boolean",
					"desc": "true  if the Point is inside the Polygon;  false  if the Point is not inside the Polygon"
				}
			],
			"params": [
				{
					"Argument": "point",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "input point"
				},
				{
					"Argument": "polygon",
					"Type": "Feature <(Polygon | MultiPolygon)>",
					"Description": "input polygon or multipolygon"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "ignoreBoundary",
					"Type": "boolean",
					"Default": "false",
					"Description": "True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false."
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanPointOnLine",
			"description": "Returns true if a point is on a line. Accepts a optional parameter to ignore the start and end vertices of the linestring.",
			"snippet": "var pt = turf.point([0, 0]);\nvar line = turf.lineString([[-1, -1],[1, 1],[1.5, 2.2]]);\nvar isPointOnLine = turf.booleanPointOnLine(pt, line);\n//=true",
			"example": "var pt = turf.point([0, 0]);\nvar line = turf.lineString([[-1, -1],[1, 1],[1.5, 2.2]]);\nvar isPointOnLine = turf.booleanPointOnLine(pt, line);\n//=true",
			"hasMap": false,
			"npmName": "@turf/boolean-point-on-line",
			"returns": [
				{
					"type": "boolean",
					"desc": "true/false"
				}
			],
			"params": [
				{
					"Argument": "pt",
					"Type": "Coord",
					"Description": "GeoJSON Point"
				},
				{
					"Argument": "line",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>>",
					"Description": "GeoJSON LineString"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "ignoreEndVertices",
					"Type": "boolean",
					"Default": "false",
					"Description": "whether to ignore the start and end vertices."
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "booleanWithin",
			"description": "Boolean-within returns true if the first geometry is completely within the second geometry.\nThe interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)\nmust not intersect the exterior of the secondary (geometry b).\nBoolean-within returns the exact opposite result of the  @turf/boolean-contains.",
			"snippet": "var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\nvar point = turf.point([1, 2]);\n\nturf.booleanWithin(point, line);\n//=true",
			"example": "var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\nvar point = turf.point([1, 2]);\n\nturf.booleanWithin(point, line);\n//=true",
			"hasMap": false,
			"npmName": "@turf/boolean-within",
			"returns": [
				{
					"type": "boolean",
					"desc": "true/false"
				}
			],
			"params": [
				{
					"Argument": "feature1",
					"Type": "(Geometry | Feature <any>)",
					"Description": "GeoJSON Feature or Geometry"
				},
				{
					"Argument": "feature2",
					"Type": "(Geometry | Feature <any>)",
					"Description": "GeoJSON Feature or Geometry"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "buffer",
			"description": "Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.",
			"snippet": "var point = turf.point([-90.548630, 14.616599]);\nvar buffered = turf.buffer(point, 500, {units: 'miles'});\n",
			"example": "var point = turf.point([-90.548630, 14.616599]);\nvar buffered = turf.buffer(point, 500, {units: 'miles'});\n\n//addToMap\nvar addToMap = [point, buffered]",
			"hasMap": true,
			"npmName": "@turf/buffer",
			"returns": [
				{
					"type": "(FeatureCollection | Feature <(Polygon | MultiPolygon)> | )",
					"desc": "buffered features"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Geometry | Feature <any>)",
					"Description": "input to be buffered"
				},
				{
					"Argument": "radius",
					"Type": "number",
					"Description": "distance to draw the buffer (negative values are allowed)"
				},
				{
					"Argument": "options",
					"Type": "Optional: Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "\"kilometers\"",
					"Description": "any of the options supported by turf units"
				},
				{
					"Prop": "steps",
					"Type": "number",
					"Default": "64",
					"Description": "number of steps"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "centerOfMass",
			"description": "Takes any  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>  or a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  and returns its  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Center_of_mass\">center of mass</a>  using this formula:  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon\">Centroid of Polygon</a>.",
			"snippet": "var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar center = turf.centerOfMass(polygon);\n",
			"example": "var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar center = turf.centerOfMass(polygon);\n\n//addToMap\nvar addToMap = [polygon, center]",
			"hasMap": true,
			"npmName": "@turf/center-of-mass",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "the center of mass"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "GeoJSON to be centered"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object that is used as the  Feature 's properties"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "center",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>  or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  and returns the absolute center point of all features.",
			"snippet": "var features = turf.featureCollection([\n  turf.point( [-97.522259, 35.4691]),\n  turf.point( [-97.502754, 35.463455]),\n  turf.point( [-97.508269, 35.463245])\n]);\n\nvar center = turf.center(features);\n",
			"example": "var features = turf.featureCollection([\n  turf.point( [-97.522259, 35.4691]),\n  turf.point( [-97.502754, 35.463455]),\n  turf.point( [-97.508269, 35.463245])\n]);\n\nvar center = turf.center(features);\n\n//addToMap\nvar addToMap = [features, center]\ncenter.properties['marker-size'] = 'large';\ncenter.properties['marker-color'] = '#000';",
			"hasMap": true,
			"npmName": "@turf/center",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "a Point feature at the absolute center point of all input features"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "GeoJSON to be centered"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object that is used as the  Feature 's properties"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "centroid",
			"description": "Takes one or more features and calculates the centroid using the mean of all vertices.\nThis lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.",
			"snippet": "var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar centroid = turf.centroid(polygon);\n",
			"example": "var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar centroid = turf.centroid(polygon);\n\n//addToMap\nvar addToMap = [polygon, centroid]",
			"hasMap": true,
			"npmName": "@turf/centroid",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "the centroid of the input features"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "GeoJSON to be centered"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object that is used as the  Feature 's properties"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "circle",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.",
			"snippet": "var center = [-75.343, 39.984];\nvar radius = 5;\nvar options = {steps: 10, units: 'kilometers', properties: {foo: 'bar'}};\nvar circle = turf.circle(center, radius, options);\n",
			"example": "var center = [-75.343, 39.984];\nvar radius = 5;\nvar options = {steps: 10, units: 'kilometers', properties: {foo: 'bar'}};\nvar circle = turf.circle(center, radius, options);\n\n//addToMap\nvar addToMap = [turf.point(center), circle]",
			"hasMap": true,
			"npmName": "@turf/circle",
			"returns": [
				{
					"type": "Feature <Polygon>",
					"desc": "circle polygon"
				}
			],
			"params": [
				{
					"Argument": "center",
					"Type": "(Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "center point"
				},
				{
					"Argument": "radius",
					"Type": "number",
					"Description": "radius of the circle"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "steps",
					"Type": "number",
					"Default": "64",
					"Description": "number of steps"
				},
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "miles, kilometers, degrees, or radians"
				},
				{
					"Prop": "properties",
					"Type": "Object",
					"Default": "{}",
					"Description": "properties"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "cleanCoords",
			"description": "Removes redundant coordinates from any GeoJSON Geometry.",
			"snippet": "var line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);\nvar multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);\n\nturf.cleanCoords(line).geometry.coordinates;\n//= [[0, 0], [0, 10]]\n\nturf.cleanCoords(multiPoint).geometry.coordinates;\n//= [[0, 0], [2, 2]]",
			"example": "var line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);\nvar multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);\n\nturf.cleanCoords(line).geometry.coordinates;\n//= [[0, 0], [0, 10]]\n\nturf.cleanCoords(multiPoint).geometry.coordinates;\n//= [[0, 0], [2, 2]]",
			"hasMap": false,
			"npmName": "@turf/clean-coords",
			"returns": [
				{
					"type": "(Geometry | Feature)",
					"desc": "the cleaned input Feature/Geometry"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(Geometry | Feature)",
					"Description": "Feature or Geometry"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "clone",
			"description": "Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n~3-5x faster than the common JSON.parse + JSON.stringify combo method.",
			"snippet": "var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n\nvar lineCloned = turf.clone(line);",
			"example": "var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n\nvar lineCloned = turf.clone(line);",
			"hasMap": false,
			"npmName": "@turf/clone",
			"returns": [
				{
					"type": "GeoJSON",
					"desc": "cloned GeoJSON Object"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "GeoJSON Object"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "clustersDbscan",
			"description": "Takes a set of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  and partition them into clusters according to  <a target=\"_blank\" href=\"DBSCAN's\">https://en.wikipedia.org/wiki/DBSCAN</a>  data clustering algorithm.",
			"snippet": "// create random points with random z-values in their properties\nvar points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\nvar maxDistance = 100;\nvar clustered = turf.clustersDbscan(points, maxDistance);\n",
			"example": "// create random points with random z-values in their properties\nvar points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\nvar maxDistance = 100;\nvar clustered = turf.clustersDbscan(points, maxDistance);\n\n//addToMap\nvar addToMap = [clustered];",
			"hasMap": true,
			"npmName": "@turf/clusters-dbscan",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "Clustered Points with an additional two properties associated to each Feature:"
				}
			],
			"params": [
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "to be clustered"
				},
				{
					"Argument": "maxDistance",
					"Type": "number",
					"Description": "Maximum Distance between any point of the cluster to generate the clusters (kilometers only)"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "kilometers",
					"Description": "in which  maxDistance  is expressed, can be degrees, radians, miles, or kilometers"
				},
				{
					"Prop": "minPoints",
					"Type": "number",
					"Default": "3",
					"Description": "Minimum number of points to generate a single cluster,\npoints which do not meet this requirement will be classified as an 'edge' or 'noise'."
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "clustersKmeans",
			"description": "Takes a set of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  and partition them into clusters using the k-mean.\nIt uses the  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/K-means_clustering\">k-means algorithm</a>",
			"snippet": "// create random points with random z-values in their properties\nvar points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\nvar options = {numberOfClusters: 7};\nvar clustered = turf.clustersKmeans(points, options);\n",
			"example": "// create random points with random z-values in their properties\nvar points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\nvar options = {numberOfClusters: 7};\nvar clustered = turf.clustersKmeans(points, options);\n\n//addToMap\nvar addToMap = [clustered];",
			"hasMap": true,
			"npmName": "@turf/clusters-kmeans",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "Clustered Points with an additional two properties associated to each Feature:"
				}
			],
			"params": [
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "to be clustered"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "numberOfClusters",
					"Type": "number",
					"Default": "Math.sqrt(numberOfPoints/2)",
					"Description": "numberOfClusters that will be generated"
				},
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": "@turf/clusters",
			"category": null,
			"name": "getCluster",
			"description": "Get Cluster",
			"snippet": "var geojson = turf.featureCollection([\n    turf.point([0, 0], {'marker-symbol': 'circle'}),\n    turf.point([2, 4], {'marker-symbol': 'star'}),\n    turf.point([3, 6], {'marker-symbol': 'star'}),\n    turf.point([5, 1], {'marker-symbol': 'square'}),\n    turf.point([4, 2], {'marker-symbol': 'circle'})\n]);\n\n// Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\nvar clustered = turf.clustersKmeans(geojson);\n\n// Retrieve first cluster (0)\nvar cluster = turf.getCluster(clustered, {cluster: 0});\n//= cluster\n\n// Retrieve cluster based on custom properties\nturf.getCluster(clustered, {'marker-symbol': 'circle'}).length;\n//= 2\nturf.getCluster(clustered, {'marker-symbol': 'square'}).length;\n//= 1",
			"example": "var geojson = turf.featureCollection([\n    turf.point([0, 0], {'marker-symbol': 'circle'}),\n    turf.point([2, 4], {'marker-symbol': 'star'}),\n    turf.point([3, 6], {'marker-symbol': 'star'}),\n    turf.point([5, 1], {'marker-symbol': 'square'}),\n    turf.point([4, 2], {'marker-symbol': 'circle'})\n]);\n\n// Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\nvar clustered = turf.clustersKmeans(geojson);\n\n// Retrieve first cluster (0)\nvar cluster = turf.getCluster(clustered, {cluster: 0});\n//= cluster\n\n// Retrieve cluster based on custom properties\nturf.getCluster(clustered, {'marker-symbol': 'circle'}).length;\n//= 2\nturf.getCluster(clustered, {'marker-symbol': 'square'}).length;\n//= 1",
			"hasMap": false,
			"npmName": "@turf/clusters",
			"returns": [
				{
					"type": "FeatureCollection",
					"desc": "Single Cluster filtered by GeoJSON Properties"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "FeatureCollection",
					"Description": "GeoJSON Features"
				},
				{
					"Argument": "filter",
					"Description": "Filter used on GeoJSON properties to get Cluster"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/clusters",
			"category": null,
			"name": "clusterEach",
			"description": "clusterEach",
			"snippet": "var geojson = turf.featureCollection([\n    turf.point([0, 0]),\n    turf.point([2, 4]),\n    turf.point([3, 6]),\n    turf.point([5, 1]),\n    turf.point([4, 2])\n]);\n\n// Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\nvar clustered = turf.clustersKmeans(geojson);\n\n// Iterate over each cluster\nturf.clusterEach(clustered, 'cluster', function (cluster, clusterValue, currentIndex) {\n    //= cluster\n    //= clusterValue\n    //= currentIndex\n})\n\n// Calculate the total number of clusters\nvar total = 0\nturf.clusterEach(clustered, 'cluster', function () {\n    total++;\n});\n\n// Create an Array of all the values retrieved from the 'cluster' property\nvar values = []\nturf.clusterEach(clustered, 'cluster', function (cluster, clusterValue) {\n    values.push(clusterValue);\n});",
			"example": "var geojson = turf.featureCollection([\n    turf.point([0, 0]),\n    turf.point([2, 4]),\n    turf.point([3, 6]),\n    turf.point([5, 1]),\n    turf.point([4, 2])\n]);\n\n// Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\nvar clustered = turf.clustersKmeans(geojson);\n\n// Iterate over each cluster\nturf.clusterEach(clustered, 'cluster', function (cluster, clusterValue, currentIndex) {\n    //= cluster\n    //= clusterValue\n    //= currentIndex\n})\n\n// Calculate the total number of clusters\nvar total = 0\nturf.clusterEach(clustered, 'cluster', function () {\n    total++;\n});\n\n// Create an Array of all the values retrieved from the 'cluster' property\nvar values = []\nturf.clusterEach(clustered, 'cluster', function (cluster, clusterValue) {\n    values.push(clusterValue);\n});",
			"hasMap": false,
			"npmName": "@turf/clusters",
			"returns": [
				false
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "FeatureCollection",
					"Description": "GeoJSON Features"
				},
				{
					"Argument": "property",
					"Type": "(string | number)",
					"Description": "GeoJSON property key/value used to create clusters"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (cluster, clusterValue, currentIndex)"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/clusters",
			"category": null,
			"name": "clusterReduce",
			"description": "Reduce clusters in GeoJSON Features, similar to Array.reduce()",
			"snippet": "var geojson = turf.featureCollection([\n    turf.point([0, 0]),\n    turf.point([2, 4]),\n    turf.point([3, 6]),\n    turf.point([5, 1]),\n    turf.point([4, 2])\n]);\n\n// Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\nvar clustered = turf.clustersKmeans(geojson);\n\n// Iterate over each cluster and perform a calculation\nvar initialValue = 0\nturf.clusterReduce(clustered, 'cluster', function (previousValue, cluster, clusterValue, currentIndex) {\n    //=previousValue\n    //=cluster\n    //=clusterValue\n    //=currentIndex\n    return previousValue++;\n}, initialValue);\n\n// Calculate the total number of clusters\nvar total = turf.clusterReduce(clustered, 'cluster', function (previousValue) {\n    return previousValue++;\n}, 0);\n\n// Create an Array of all the values retrieved from the 'cluster' property\nvar values = turf.clusterReduce(clustered, 'cluster', function (previousValue, cluster, clusterValue) {\n    return previousValue.concat(clusterValue);\n}, []);",
			"example": "var geojson = turf.featureCollection([\n    turf.point([0, 0]),\n    turf.point([2, 4]),\n    turf.point([3, 6]),\n    turf.point([5, 1]),\n    turf.point([4, 2])\n]);\n\n// Create a cluster using K-Means (adds `cluster` to GeoJSON properties)\nvar clustered = turf.clustersKmeans(geojson);\n\n// Iterate over each cluster and perform a calculation\nvar initialValue = 0\nturf.clusterReduce(clustered, 'cluster', function (previousValue, cluster, clusterValue, currentIndex) {\n    //=previousValue\n    //=cluster\n    //=clusterValue\n    //=currentIndex\n    return previousValue++;\n}, initialValue);\n\n// Calculate the total number of clusters\nvar total = turf.clusterReduce(clustered, 'cluster', function (previousValue) {\n    return previousValue++;\n}, 0);\n\n// Create an Array of all the values retrieved from the 'cluster' property\nvar values = turf.clusterReduce(clustered, 'cluster', function (previousValue, cluster, clusterValue) {\n    return previousValue.concat(clusterValue);\n}, []);",
			"hasMap": false,
			"npmName": "@turf/clusters",
			"returns": [
				{
					"desc": "The value that results from the reduction."
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "FeatureCollection",
					"Description": "GeoJSON Features"
				},
				{
					"Argument": "property",
					"Type": "(string | number)",
					"Description": "GeoJSON property key/value used to create clusters"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (previousValue, cluster, clusterValue, currentIndex)"
				},
				{
					"Argument": "initialValue",
					"Type": "Optional: undefined",
					"Description": "Value to use as the first argument to the first call of the callback."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "collect",
			"description": "Merges a specified property from a FeatureCollection of points into a\nFeatureCollection of polygons. Given an  inProperty  on points and an  outProperty \nfor polygons, this finds every point that lies within each polygon, collects the\n inProperty  values from those points, and adds them as an array to  outProperty \non the polygon.",
			"snippet": "var poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\nvar poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\nvar polyFC = turf.featureCollection([poly1, poly2]);\nvar pt1 = turf.point([5,5], {population: 200});\nvar pt2 = turf.point([1,3], {population: 600});\nvar pt3 = turf.point([14,2], {population: 100});\nvar pt4 = turf.point([13,1], {population: 200});\nvar pt5 = turf.point([19,7], {population: 300});\nvar pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);\nvar collected = turf.collect(polyFC, pointFC, 'population', 'values');\nvar values = collected.features[0].properties.values\n//=values => [200, 600]\n",
			"example": "var poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\nvar poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\nvar polyFC = turf.featureCollection([poly1, poly2]);\nvar pt1 = turf.point([5,5], {population: 200});\nvar pt2 = turf.point([1,3], {population: 600});\nvar pt3 = turf.point([14,2], {population: 100});\nvar pt4 = turf.point([13,1], {population: 200});\nvar pt5 = turf.point([19,7], {population: 300});\nvar pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);\nvar collected = turf.collect(polyFC, pointFC, 'population', 'values');\nvar values = collected.features[0].properties.values\n//=values => [200, 600]\n\n//addToMap\nvar addToMap = [pointFC, collected]",
			"hasMap": true,
			"npmName": "@turf/collect",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "polygons with properties listed based on  outField"
				}
			],
			"params": [
				{
					"Argument": "polygons",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>>",
					"Description": "polygons with values on which to aggregate"
				},
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "points to be aggregated"
				},
				{
					"Argument": "inProperty",
					"Type": "string",
					"Description": "property to be nested from"
				},
				{
					"Argument": "outProperty",
					"Type": "string",
					"Description": "property to be nested into"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "combine",
			"description": "Combines a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a> ,  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a> , or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>  features\ninto  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#multipoint\">MultiPoint</a> ,  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#multilinestring\">MultiLineString</a> , or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#multipolygon\">MultiPolygon</a>  features.",
			"snippet": "var fc = turf.featureCollection([\n  turf.point([19.026432, 47.49134]),\n  turf.point([19.074497, 47.509548])\n]);\n\nvar combined = turf.combine(fc);\n",
			"example": "var fc = turf.featureCollection([\n  turf.point([19.026432, 47.49134]),\n  turf.point([19.074497, 47.509548])\n]);\n\nvar combined = turf.combine(fc);\n\n//addToMap\nvar addToMap = [combined]",
			"hasMap": true,
			"npmName": "@turf/combine",
			"returns": [
				{
					"type": "FeatureCollection <(MultiPoint | MultiLineString | MultiPolygon)>",
					"desc": "a FeatureCollection of corresponding type to input"
				}
			],
			"params": [
				{
					"Argument": "fc",
					"Type": "FeatureCollection <(Point | LineString | Polygon)>",
					"Description": "a FeatureCollection of any type"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "concave",
			"description": "Takes a set of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  and returns a concave hull Polygon or MultiPolygon.\nInternally, this uses  <a target=\"_blank\" href=\"https://github.com/Turfjs/turf-tin\">turf-tin</a>  to generate geometries.",
			"snippet": "var points = turf.featureCollection([\n  turf.point([-63.601226, 44.642643]),\n  turf.point([-63.591442, 44.651436]),\n  turf.point([-63.580799, 44.648749]),\n  turf.point([-63.573589, 44.641788]),\n  turf.point([-63.587665, 44.64533]),\n  turf.point([-63.595218, 44.64765])\n]);\nvar options = {units: 'miles', maxEdge: 1};\n\nvar hull = turf.concave(points, options);\n",
			"example": "var points = turf.featureCollection([\n  turf.point([-63.601226, 44.642643]),\n  turf.point([-63.591442, 44.651436]),\n  turf.point([-63.580799, 44.648749]),\n  turf.point([-63.573589, 44.641788]),\n  turf.point([-63.587665, 44.64533]),\n  turf.point([-63.595218, 44.64765])\n]);\nvar options = {units: 'miles', maxEdge: 1};\n\nvar hull = turf.concave(points, options);\n\n//addToMap\nvar addToMap = [points, hull]",
			"hasMap": true,
			"npmName": "@turf/concave",
			"returns": [
				{
					"type": "(Feature <(Polygon | MultiPolygon)> | )",
					"desc": "a concave hull (null value is returned if unable to compute hull)"
				}
			],
			"params": [
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "input points"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "maxEdge",
					"Type": "number",
					"Default": "Infinity",
					"Description": "the length (in 'units') of an edge necessary for part of the hull to become concave."
				},
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "can be degrees, radians, miles, or kilometers"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "convex",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>  or a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  and returns a convex hull  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>.",
			"snippet": "var points = turf.featureCollection([\n  turf.point([10.195312, 43.755225]),\n  turf.point([10.404052, 43.8424511]),\n  turf.point([10.579833, 43.659924]),\n  turf.point([10.360107, 43.516688]),\n  turf.point([10.14038, 43.588348]),\n  turf.point([10.195312, 43.755225])\n]);\n\nvar hull = turf.convex(points);\n",
			"example": "var points = turf.featureCollection([\n  turf.point([10.195312, 43.755225]),\n  turf.point([10.404052, 43.8424511]),\n  turf.point([10.579833, 43.659924]),\n  turf.point([10.360107, 43.516688]),\n  turf.point([10.14038, 43.588348]),\n  turf.point([10.195312, 43.755225])\n]);\n\nvar hull = turf.convex(points);\n\n//addToMap\nvar addToMap = [points, hull]",
			"hasMap": true,
			"npmName": "@turf/convex",
			"returns": [
				{
					"type": "Feature <Polygon>",
					"desc": "a convex hull"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "input Feature or FeatureCollection"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "concavity",
					"Type": "number",
					"Default": "Infinity",
					"Description": "1 - thin shape. Infinity - convex hull."
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "destination",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the  <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Haversine_formula\">Haversine formula</a>  to account for global curvature.",
			"snippet": "var point = turf.point([-75.343, 39.984]);\nvar distance = 50;\nvar bearing = 90;\nvar options = {units: 'miles'};\n\nvar destination = turf.destination(point, distance, bearing, options);\n",
			"example": "var point = turf.point([-75.343, 39.984]);\nvar distance = 50;\nvar bearing = 90;\nvar options = {units: 'miles'};\n\nvar destination = turf.destination(point, distance, bearing, options);\n\n//addToMap\nvar addToMap = [point, destination]\ndestination.properties['marker-color'] = '#f00';\npoint.properties['marker-color'] = '#0f0';",
			"hasMap": true,
			"npmName": "@turf/destination",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "destination point"
				}
			],
			"params": [
				{
					"Argument": "origin",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "starting point"
				},
				{
					"Argument": "distance",
					"Type": "number",
					"Description": "distance from the origin point"
				},
				{
					"Argument": "bearing",
					"Type": "number",
					"Description": "ranging from -180 to 180"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "miles, kilometers, degrees, or radians"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "difference",
			"description": "Finds the difference between two  <a target=\"_blank\" href=\"Polygon\">polygons</a>  by clipping the second polygon from the first.",
			"snippet": "var polygon1 = turf.polygon([[\n  [128, -26],\n  [141, -26],\n  [141, -21],\n  [128, -21],\n  [128, -26]\n]], {\n  \"fill\": \"#F00\",\n  \"fill-opacity\": 0.1\n});\nvar polygon2 = turf.polygon([[\n  [126, -28],\n  [140, -28],\n  [140, -20],\n  [126, -20],\n  [126, -28]\n]], {\n  \"fill\": \"#00F\",\n  \"fill-opacity\": 0.1\n});\n\nvar difference = turf.difference(polygon1, polygon2);\n",
			"example": "var polygon1 = turf.polygon([[\n  [128, -26],\n  [141, -26],\n  [141, -21],\n  [128, -21],\n  [128, -26]\n]], {\n  \"fill\": \"#F00\",\n  \"fill-opacity\": 0.1\n});\nvar polygon2 = turf.polygon([[\n  [126, -28],\n  [140, -28],\n  [140, -20],\n  [126, -20],\n  [126, -28]\n]], {\n  \"fill\": \"#00F\",\n  \"fill-opacity\": 0.1\n});\n\nvar difference = turf.difference(polygon1, polygon2);\n\n//addToMap\nvar addToMap = [polygon1, polygon2, difference];",
			"hasMap": true,
			"npmName": "@turf/difference",
			"returns": [
				{
					"type": "(Feature <(Polygon | MultiPolygon)> | )",
					"desc": "a Polygon or MultiPolygon feature showing the area of  polygon1  excluding the area of  polygon2  (if empty returns  null )"
				}
			],
			"params": [
				{
					"Argument": "polygon1",
					"Type": "Feature <(Polygon | MultiPolygon)>",
					"Description": "input Polygon feature"
				},
				{
					"Argument": "polygon2",
					"Type": "Feature <(Polygon | MultiPolygon)>",
					"Description": "Polygon feature to difference from polygon1"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "dissolve",
			"description": "Dissolves a FeatureCollection of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">polygon</a>  features, filtered by an optional property name:value.\nNote that  <a target=\"_blank\" href=\"mulitpolygon\">mulitpolygon</a>  features within the collection are not supported",
			"snippet": "var features = turf.featureCollection([\n  turf.polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], {combine: 'yes'}),\n  turf.polygon([[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]], {combine: 'yes'}),\n  turf.polygon([[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]], {combine: 'no'}),\n]);\n\nvar dissolved = turf.dissolve(features, {propertyName: 'combine'});\n",
			"example": "var features = turf.featureCollection([\n  turf.polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], {combine: 'yes'}),\n  turf.polygon([[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]], {combine: 'yes'}),\n  turf.polygon([[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]], {combine: 'no'}),\n]);\n\nvar dissolved = turf.dissolve(features, {propertyName: 'combine'});\n\n//addToMap\nvar addToMap = [features, dissolved]",
			"hasMap": true,
			"npmName": "@turf/dissolve",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "a FeatureCollection containing the dissolved polygons"
				}
			],
			"params": [
				{
					"Argument": "featureCollection",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>>",
					"Description": "input feature collection to be dissolved"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "propertyName",
					"Type": "Optional: string",
					"Default": null,
					"Description": "features with equals 'propertyName' in  properties  will be merged"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "distance",
			"description": "Calculates the distance between two  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  in degrees, radians,\nmiles, or kilometers. This uses the\n <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Haversine_formula\">Haversine formula</a> \nto account for global curvature.",
			"snippet": "var from = turf.point([-75.343, 39.984]);\nvar to = turf.point([-75.534, 39.123]);\nvar options = {units: 'miles'};\n\nvar distance = turf.distance(from, to, options);\n",
			"example": "var from = turf.point([-75.343, 39.984]);\nvar to = turf.point([-75.534, 39.123]);\nvar options = {units: 'miles'};\n\nvar distance = turf.distance(from, to, options);\n\n//addToMap\nvar addToMap = [from, to];\nfrom.properties.distance = distance;\nto.properties.distance = distance;",
			"hasMap": true,
			"npmName": "@turf/distance",
			"returns": [
				{
					"type": "number",
					"desc": "distance between the two points"
				}
			],
			"params": [
				{
					"Argument": "from",
					"Type": "Coord",
					"Description": "origin point"
				},
				{
					"Argument": "to",
					"Type": "Coord",
					"Description": "destination point"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "can be degrees, radians, miles, or kilometers"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "envelope",
			"description": "Takes any number of features and returns a rectangular  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>  that encompasses all vertices.",
			"snippet": "var features = turf.featureCollection([\n  turf.point([-75.343, 39.984], {\"name\": \"Location A\"}),\n  turf.point([-75.833, 39.284], {\"name\": \"Location B\"}),\n  turf.point([-75.534, 39.123], {\"name\": \"Location C\"})\n]);\n\nvar enveloped = turf.envelope(features);\n",
			"example": "var features = turf.featureCollection([\n  turf.point([-75.343, 39.984], {\"name\": \"Location A\"}),\n  turf.point([-75.833, 39.284], {\"name\": \"Location B\"}),\n  turf.point([-75.534, 39.123], {\"name\": \"Location C\"})\n]);\n\nvar enveloped = turf.envelope(features);\n\n//addToMap\nvar addToMap = [features, enveloped];",
			"hasMap": true,
			"npmName": "@turf/envelope",
			"returns": [
				{
					"type": "Feature <Polygon>",
					"desc": "a rectangular Polygon feature that encompasses all vertices"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "input features"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "explode",
			"description": "Takes a feature or set of features and returns all positions as  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>.",
			"snippet": "var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar explode = turf.explode(polygon);\n",
			"example": "var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n\nvar explode = turf.explode(polygon);\n\n//addToMap\nvar addToMap = [polygon, explode]",
			"hasMap": true,
			"npmName": "@turf/explode",
			"returns": [
				{
					"type": "FeatureCollection <point>",
					"desc": "points representing the exploded input features"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "input features"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "if it encounters an unknown geometry type"
				}
			]
		},
		{
			"parent": null,
			"category": null,
			"name": "flatten",
			"description": "Flattens any  <a target=\"_blank\" href=\"GeoJSON\">GeoJSON</a>  to a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  inspired by  <a target=\"_blank\" href=\"https://github.com/tmcw/geojson-flatten\">geojson-flatten</a>.",
			"snippet": "var multiGeometry = turf.multiPolygon([\n  [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],\n  [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\n  [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]\n]);\n\nvar flatten = turf.flatten(multiGeometry);\n",
			"example": "var multiGeometry = turf.multiPolygon([\n  [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],\n  [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\n  [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]\n]);\n\nvar flatten = turf.flatten(multiGeometry);\n\n//addToMap\nvar addToMap = [flatten]",
			"hasMap": true,
			"npmName": "@turf/flatten",
			"returns": [
				{
					"type": "FeatureCollection <any>",
					"desc": "all Multi-Geometries are flattened into single Features"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "any valid GeoJSON Object"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "flip",
			"description": "Takes input features and flips all of their coordinates from  [x, y]  to  [y, x].",
			"snippet": "var serbia = turf.point([20.566406, 43.421008]);\n\nvar saudiArabia = turf.flip(serbia);\n",
			"example": "var serbia = turf.point([20.566406, 43.421008]);\n\nvar saudiArabia = turf.flip(serbia);\n\n//addToMap\nvar addToMap = [serbia, saudiArabia];",
			"hasMap": true,
			"npmName": "@turf/flip",
			"returns": [
				{
					"type": "GeoJSON",
					"desc": "a feature or set of features of the same type as  input  with flipped coordinates"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "input features"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "greatCircle",
			"description": "Calculate great circles routes as  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>",
			"snippet": "var start = turf.point([-122, 48]);\nvar end = turf.point([-77, 39]);\n\nvar greatCircle = turf.greatCircle(start, end, {'name': 'Seattle to DC'});\n",
			"example": "var start = turf.point([-122, 48]);\nvar end = turf.point([-77, 39]);\n\nvar greatCircle = turf.greatCircle(start, end, {'name': 'Seattle to DC'});\n\n//addToMap\nvar addToMap = [start, end, greatCircle]",
			"hasMap": true,
			"npmName": "@turf/great-circle",
			"returns": [
				{
					"type": "Feature <LineString>",
					"desc": "great circle line feature"
				}
			],
			"params": [
				{
					"Argument": "start",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "source point feature"
				},
				{
					"Argument": "end",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "destination point feature"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "properties",
					"Type": "Object",
					"Default": "{}",
					"Description": "line feature properties"
				},
				{
					"Prop": "npoints",
					"Type": "number",
					"Default": "100",
					"Description": "number of points"
				},
				{
					"Prop": "offset",
					"Type": "number",
					"Default": "10",
					"Description": "offset controls the likelyhood that lines will\nbe split which cross the dateline. The higher the number the more likely."
				}
			],
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "feature",
			"description": "Wraps a GeoJSON  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#geometry\">Geometry</a>  in a GeoJSON  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>.",
			"snippet": "var geometry = {\n  \"type\": \"Point\",\n  \"coordinates\": [110, 50]\n};\n\nvar feature = turf.feature(geometry);\n\n//=feature",
			"example": "var geometry = {\n  \"type\": \"Point\",\n  \"coordinates\": [110, 50]\n};\n\nvar feature = turf.feature(geometry);\n\n//=feature",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "Feature",
					"desc": "a GeoJSON Feature"
				}
			],
			"params": [
				{
					"Argument": "geometry",
					"Type": "Geometry",
					"Description": "input geometry"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object of key-value pairs to add as properties"
				},
				{
					"Argument": "bbox",
					"Type": "Optional: undefined",
					"Description": "BBox  west, south, east, north"
				},
				{
					"Argument": "id",
					"Type": "Optional: undefined",
					"Description": "Identifier"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "point",
			"description": "Takes coordinates and properties (optional) and returns a new  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  feature.",
			"snippet": "var point = turf.point([-75.343, 39.984]);\n\n//=point",
			"example": "var point = turf.point([-75.343, 39.984]);\n\n//=point",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "a Point feature"
				}
			],
			"params": [
				{
					"Argument": "coordinates",
					"Type": "Array <number>",
					"Description": "longitude, latitude position (each in decimal degrees)"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object of key-value pairs to add as properties"
				},
				{
					"Argument": "bbox",
					"Type": "Optional: undefined",
					"Description": "BBox  west, south, east, north"
				},
				{
					"Argument": "id",
					"Type": "Optional: undefined",
					"Description": "Identifier"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "polygon",
			"description": "Takes an array of LinearRings and optionally an  <a target=\"_blank\" href=\"Object\">Object</a>  with properties and returns a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>  feature.",
			"snippet": "var polygon = turf.polygon([[\n  [-2.275543, 53.464547],\n  [-2.275543, 53.489271],\n  [-2.215118, 53.489271],\n  [-2.215118, 53.464547],\n  [-2.275543, 53.464547]\n]], { name: 'poly1', population: 400});\n\n//=polygon",
			"example": "var polygon = turf.polygon([[\n  [-2.275543, 53.464547],\n  [-2.275543, 53.489271],\n  [-2.215118, 53.489271],\n  [-2.215118, 53.464547],\n  [-2.275543, 53.464547]\n]], { name: 'poly1', population: 400});\n\n//=polygon",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "Feature <Polygon>",
					"desc": "a Polygon feature"
				}
			],
			"params": [
				{
					"Argument": "coordinates",
					"Type": "Array <Array <Array <number>>>",
					"Description": "an array of LinearRings"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object of key-value pairs to add as properties"
				},
				{
					"Argument": "bbox",
					"Type": "Optional: undefined",
					"Description": "BBox  west, south, east, north"
				},
				{
					"Argument": "id",
					"Type": "Optional: undefined",
					"Description": "Identifier"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "throw an error if a LinearRing of the polygon has too few positions\nor if a LinearRing of the Polygon does not have matching Positions at the beginning & end."
				}
			]
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "lineString",
			"description": "Creates a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>  based on a\ncoordinate array. Properties can be added optionally.",
			"snippet": "var linestring1 = turf.lineString([\n  [-21.964416, 64.148203],\n  [-21.956176, 64.141316],\n  [-21.93901, 64.135924],\n  [-21.927337, 64.136673]\n]);\nvar linestring2 = turf.lineString([\n  [-21.929054, 64.127985],\n  [-21.912918, 64.134726],\n  [-21.916007, 64.141016],\n  [-21.930084, 64.14446]\n], {name: 'line 1', distance: 145});\n\n//=linestring1\n\n//=linestring2",
			"example": "var linestring1 = turf.lineString([\n  [-21.964416, 64.148203],\n  [-21.956176, 64.141316],\n  [-21.93901, 64.135924],\n  [-21.927337, 64.136673]\n]);\nvar linestring2 = turf.lineString([\n  [-21.929054, 64.127985],\n  [-21.912918, 64.134726],\n  [-21.916007, 64.141016],\n  [-21.930084, 64.14446]\n], {name: 'line 1', distance: 145});\n\n//=linestring1\n\n//=linestring2",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "Feature <LineString>",
					"desc": "a LineString feature"
				}
			],
			"params": [
				{
					"Argument": "coordinates",
					"Type": "Array <Array <number>>",
					"Description": "an array of Positions"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object of key-value pairs to add as properties"
				},
				{
					"Argument": "bbox",
					"Type": "Optional: undefined",
					"Description": "BBox  west, south, east, north"
				},
				{
					"Argument": "id",
					"Type": "Optional: undefined",
					"Description": "Identifier"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "if no coordinates are passed"
				}
			]
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "featureCollection",
			"description": "Takes one or more  <a target=\"_blank\" href=\"Feature\">Features</a>  and creates a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>.",
			"snippet": "var features = [\n turf.point([-75.343, 39.984], {name: 'Location A'}),\n turf.point([-75.833, 39.284], {name: 'Location B'}),\n turf.point([-75.534, 39.123], {name: 'Location C'})\n];\n\nvar collection = turf.featureCollection(features);\n\n//=collection",
			"example": "var features = [\n turf.point([-75.343, 39.984], {name: 'Location A'}),\n turf.point([-75.833, 39.284], {name: 'Location B'}),\n turf.point([-75.534, 39.123], {name: 'Location C'})\n];\n\nvar collection = turf.featureCollection(features);\n\n//=collection",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "FeatureCollection",
					"desc": "a FeatureCollection of input features"
				}
			],
			"params": [
				{
					"Argument": "features",
					"Type": "Array <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>>",
					"Description": "input features"
				},
				{
					"Argument": "bbox",
					"Type": "Optional: undefined",
					"Description": "BBox  west, south, east, north"
				},
				{
					"Argument": "id",
					"Type": "Optional: undefined",
					"Description": "Identifier"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "multiLineString",
			"description": "Creates a  <a target=\"_blank\" href=\"Feature<MultiLineString>\">Feature<MultiLineString></a>  based on a\ncoordinate array. Properties can be added optionally.",
			"snippet": "var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n\n//=multiLine",
			"example": "var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n\n//=multiLine",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "Feature <MultiLineString>",
					"desc": "a MultiLineString feature"
				}
			],
			"params": [
				{
					"Argument": "coordinates",
					"Type": "Array <Array <Array <number>>>",
					"Description": "an array of LineStrings"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object of key-value pairs to add as properties"
				},
				{
					"Argument": "bbox",
					"Type": "Optional: undefined",
					"Description": "BBox  west, south, east, north"
				},
				{
					"Argument": "id",
					"Type": "Optional: undefined",
					"Description": "Identifier"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "if no coordinates are passed"
				}
			]
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "multiPoint",
			"description": "Creates a  <a target=\"_blank\" href=\"Feature<MultiPoint>\">Feature<MultiPoint></a>  based on a\ncoordinate array. Properties can be added optionally.",
			"snippet": "var multiPt = turf.multiPoint([[0,0],[10,10]]);\n\n//=multiPt",
			"example": "var multiPt = turf.multiPoint([[0,0],[10,10]]);\n\n//=multiPt",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "Feature <MultiPoint>",
					"desc": "a MultiPoint feature"
				}
			],
			"params": [
				{
					"Argument": "coordinates",
					"Type": "Array <Array <number>>",
					"Description": "an array of Positions"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object of key-value pairs to add as properties"
				},
				{
					"Argument": "bbox",
					"Type": "Optional: undefined",
					"Description": "BBox  west, south, east, north"
				},
				{
					"Argument": "id",
					"Type": "Optional: undefined",
					"Description": "Identifier"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "if no coordinates are passed"
				}
			]
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "multiPolygon",
			"description": "Creates a  <a target=\"_blank\" href=\"Feature<MultiPolygon>\">Feature<MultiPolygon></a>  based on a\ncoordinate array. Properties can be added optionally.",
			"snippet": "var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n\n//=multiPoly",
			"example": "var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n\n//=multiPoly",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "Feature <MultiPolygon>",
					"desc": "a multipolygon feature"
				}
			],
			"params": [
				{
					"Argument": "coordinates",
					"Type": "Array <Array <Array <Array <number>>>>",
					"Description": "an array of Polygons"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object of key-value pairs to add as properties"
				},
				{
					"Argument": "bbox",
					"Type": "Optional: undefined",
					"Description": "BBox  west, south, east, north"
				},
				{
					"Argument": "id",
					"Type": "Optional: undefined",
					"Description": "Identifier"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "if no coordinates are passed"
				}
			]
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "geometryCollection",
			"description": "Creates a  <a target=\"_blank\" href=\"Feature<GeometryCollection>\">Feature<GeometryCollection></a>  based on a\ncoordinate array. Properties can be added optionally.",
			"snippet": "var pt = {\n    \"type\": \"Point\",\n      \"coordinates\": [100, 0]\n    };\nvar line = {\n    \"type\": \"LineString\",\n    \"coordinates\": [ [101, 0], [102, 1] ]\n  };\nvar collection = turf.geometryCollection([pt, line]);\n\n//=collection",
			"example": "var pt = {\n    \"type\": \"Point\",\n      \"coordinates\": [100, 0]\n    };\nvar line = {\n    \"type\": \"LineString\",\n    \"coordinates\": [ [101, 0], [102, 1] ]\n  };\nvar collection = turf.geometryCollection([pt, line]);\n\n//=collection",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "Feature <GeometryCollection>",
					"desc": "a GeoJSON GeometryCollection Feature"
				}
			],
			"params": [
				{
					"Argument": "geometries",
					"Type": "Array <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#geometry\">Geometry</a>>",
					"Description": "an array of GeoJSON Geometries"
				},
				{
					"Argument": "properties",
					"Type": "Object",
					"Description": "an Object of key-value pairs to add as properties"
				},
				{
					"Argument": "bbox",
					"Type": "Optional: undefined",
					"Description": "BBox  west, south, east, north"
				},
				{
					"Argument": "id",
					"Type": "Optional: undefined",
					"Description": "Identifier"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "round",
			"description": "Round number to precision",
			"snippet": "turf.round(120.4321)\n//=120\n\nturf.round(120.4321, 2)\n//=120.43",
			"example": "turf.round(120.4321)\n//=120\n\nturf.round(120.4321, 2)\n//=120.43",
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "number",
					"desc": "rounded number"
				}
			],
			"params": [
				{
					"Argument": "num",
					"Type": "number",
					"Description": "Number"
				},
				{
					"Argument": "precision",
					"Type": "number",
					"Description": "Precision"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "radiansToLength",
			"description": "Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "number",
					"desc": "distance"
				}
			],
			"params": [
				{
					"Argument": "radians",
					"Type": "number",
					"Description": "in radians across the sphere"
				},
				{
					"Argument": "units",
					"Type": "string",
					"Description": "can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "lengthToRadians",
			"description": "Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "number",
					"desc": "radians"
				}
			],
			"params": [
				{
					"Argument": "distance",
					"Type": "number",
					"Description": "in real units"
				},
				{
					"Argument": "units",
					"Type": "string",
					"Description": "can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "lengthToDegrees",
			"description": "Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\nValid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "number",
					"desc": "degrees"
				}
			],
			"params": [
				{
					"Argument": "distance",
					"Type": "number",
					"Description": "in real units"
				},
				{
					"Argument": "units",
					"Type": "string",
					"Description": "can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "bearingToAzimuth",
			"description": "Converts any bearing angle from the north line direction (positive clockwise)\nand returns an angle between 0-360 degrees (positive clockwise), 0 being the north line",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "number",
					"desc": "angle between 0 and 360 degrees"
				}
			],
			"params": [
				{
					"Argument": "bearing",
					"Type": "number",
					"Description": "angle, between -180 and +180 degrees"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "radiansToDegrees",
			"description": "Converts an angle in radians to degrees",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "number",
					"desc": "degrees between 0 and 360 degrees"
				}
			],
			"params": [
				{
					"Argument": "radians",
					"Type": "number",
					"Description": "angle in radians"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "convertLength",
			"description": "Converts a length to the requested unit.\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "number",
					"desc": "the converted length"
				}
			],
			"params": [
				{
					"Argument": "length",
					"Type": "number",
					"Description": "to be converted"
				},
				{
					"Argument": "originalUnit",
					"Type": "string",
					"Description": "of the length"
				},
				{
					"Argument": "finalUnit",
					"Type": "string",
					"Description": "returned unit"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/helpers",
			"category": null,
			"name": "convertArea",
			"description": "Converts a area to the requested unit.\nValid units: kilometers, kilometres, meters, metres, centimetres, millimeter, acre, mile, yard, foot, inch",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/helpers",
			"returns": [
				{
					"type": "number",
					"desc": "the converted distance"
				}
			],
			"params": [
				{
					"Argument": "area",
					"Type": "number",
					"Description": "to be converted"
				},
				{
					"Argument": "originalUnit",
					"Type": "string",
					"Description": "of the distance"
				},
				{
					"Argument": "finalUnit",
					"Type": "string",
					"Description": "returned unit"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "hexGrid",
			"description": "Takes a bounding box and the diameter of the cell and returns a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  of flat-topped\nhexagons or triangles ( <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>  features) aligned in an \"odd-q\" vertical grid as\ndescribed in  <a target=\"_blank\" href=\"http://www.redblobgames.com/grids/hexagons/\">Hexagonal Grids</a>.",
			"snippet": "var bbox = [-96,31,-84,40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar hexgrid = turf.hexGrid(bbox, cellSide, options);\n",
			"example": "var bbox = [-96,31,-84,40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar hexgrid = turf.hexGrid(bbox, cellSide, options);\n\n//addToMap\nvar addToMap = [hexgrid];",
			"hasMap": true,
			"npmName": "@turf/hex-grid",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "a hexagonal grid"
				}
			],
			"params": [
				{
					"Argument": "bbox",
					"Type": "Array <number>",
					"Description": "extent in  minX, minY, maxX, maxY  order"
				},
				{
					"Argument": "cellSide",
					"Type": "number",
					"Description": "length of the side of the the hexagons or triangles, in units. It will also coincide with the\nradius of the circumcircle of the hexagons."
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "used in calculating cell size, can be degrees, radians, miles, or kilometers"
				},
				{
					"Prop": "properties",
					"Type": "Object",
					"Default": "{}",
					"Description": "passed to each hexagon or triangle of the grid"
				},
				{
					"Prop": "mask",
					"Type": "Optional: undefined",
					"Default": null,
					"Description": "if passed a Polygon or MultiPolygon, the grid Points will be created only inside it"
				},
				{
					"Prop": "triangles",
					"Type": "boolean",
					"Default": "false",
					"Description": "whether to return as triangles instead of hexagons"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "interpolate",
			"description": "Takes a set of points and estimates their 'property' values on a grid using the  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Inverse_distance_weighting\">Inverse Distance Weighting (IDW) method</a>.",
			"snippet": "var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n\n// add a random property to each point\nturf.featureEach(points, function(point) {\n    point.properties.solRad = Math.random() * 50;\n});\nvar options = {gridType: 'points', property: 'solRad', units: 'miles'};\nvar grid = turf.interpolate(points, 100, options);\n",
			"example": "var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n\n// add a random property to each point\nturf.featureEach(points, function(point) {\n    point.properties.solRad = Math.random() * 50;\n});\nvar options = {gridType: 'points', property: 'solRad', units: 'miles'};\nvar grid = turf.interpolate(points, 100, options);\n\n//addToMap\nvar addToMap = [grid];",
			"hasMap": true,
			"npmName": "@turf/interpolate",
			"returns": [
				{
					"type": "FeatureCollection <(Point | Polygon)>",
					"desc": "grid of points or polygons with interpolated 'property'"
				}
			],
			"params": [
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "with known value"
				},
				{
					"Argument": "cellSize",
					"Type": "number",
					"Description": "the distance across each grid point"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "gridType",
					"Type": "string",
					"Default": "'square'",
					"Description": "defines the output format based on a Grid Type (options: 'square' | 'point' | 'hex' | 'triangle')"
				},
				{
					"Prop": "property",
					"Type": "string",
					"Default": "'elevation'",
					"Description": "the property name in  points  from which z-values will be pulled, zValue fallbacks to 3rd coordinate if no property exists."
				},
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "used in calculating cellSize, can be degrees, radians, miles, or kilometers"
				},
				{
					"Prop": "weight",
					"Type": "number",
					"Default": "1",
					"Description": "exponent regulating the distance-decay weighting"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "intersect",
			"description": "Takes two  <a target=\"_blank\" href=\"Polygon\">polygons</a>  and finds their intersection. If they share a border, returns the border; if they don't intersect, returns undefined.",
			"snippet": "var poly1 = turf.polygon([[\n  [-122.801742, 45.48565],\n  [-122.801742, 45.60491],\n  [-122.584762, 45.60491],\n  [-122.584762, 45.48565],\n  [-122.801742, 45.48565]\n]]);\n\nvar poly2 = turf.polygon([[\n  [-122.520217, 45.535693],\n  [-122.64038, 45.553967],\n  [-122.720031, 45.526554],\n  [-122.669906, 45.507309],\n  [-122.723464, 45.446643],\n  [-122.532577, 45.408574],\n  [-122.487258, 45.477466],\n  [-122.520217, 45.535693]\n]]);\n\nvar intersection = turf.intersect(poly1, poly2);\n",
			"example": "var poly1 = turf.polygon([[\n  [-122.801742, 45.48565],\n  [-122.801742, 45.60491],\n  [-122.584762, 45.60491],\n  [-122.584762, 45.48565],\n  [-122.801742, 45.48565]\n]]);\n\nvar poly2 = turf.polygon([[\n  [-122.520217, 45.535693],\n  [-122.64038, 45.553967],\n  [-122.720031, 45.526554],\n  [-122.669906, 45.507309],\n  [-122.723464, 45.446643],\n  [-122.532577, 45.408574],\n  [-122.487258, 45.477466],\n  [-122.520217, 45.535693]\n]]);\n\nvar intersection = turf.intersect(poly1, poly2);\n\n//addToMap\nvar addToMap = [poly1, poly2, intersection];",
			"hasMap": true,
			"npmName": "@turf/intersect",
			"returns": [
				{
					"type": "(Feature | )",
					"desc": "returns a feature representing the point(s) they share (in case of a  Point   or  MultiPoint ), the borders they share (in case of a  LineString  or a  MultiLineString ), the area they share (in case of  Polygon  or  MultiPolygon ). If they do not share any point, returns  null."
				}
			],
			"params": [
				{
					"Argument": "poly1",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>>",
					"Description": "the first polygon"
				},
				{
					"Argument": "poly2",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>>",
					"Description": "the second polygon"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/invariant",
			"category": null,
			"name": "getCoord",
			"description": "Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.",
			"snippet": "var pt = turf.point([10, 10]);\n\nvar coord = turf.getCoord(pt);\n//= [10, 10]",
			"example": "var pt = turf.point([10, 10]);\n\nvar coord = turf.getCoord(pt);\n//= [10, 10]",
			"hasMap": false,
			"npmName": "@turf/invariant",
			"returns": [
				{
					"type": "Array <number>",
					"desc": "coordinates"
				}
			],
			"params": [
				{
					"Argument": "obj",
					"Type": "(Array <number> | Geometry <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>)",
					"Description": "Object"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/invariant",
			"category": null,
			"name": "getCoords",
			"description": "Unwrap coordinates from a Feature, Geometry Object or an Array of numbers",
			"snippet": "var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n\nvar coord = turf.getCoords(poly);\n//= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]",
			"example": "var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n\nvar coord = turf.getCoords(poly);\n//= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]",
			"hasMap": false,
			"npmName": "@turf/invariant",
			"returns": [
				{
					"type": "Array <number>",
					"desc": "coordinates"
				}
			],
			"params": [
				{
					"Argument": "obj",
					"Type": "(Array <number> | Geometry | Feature)",
					"Description": "Object"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/invariant",
			"category": null,
			"name": "containsNumber",
			"description": "Checks if coordinates contains a number",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/invariant",
			"returns": [
				{
					"type": "boolean",
					"desc": "true if Array contains a number"
				}
			],
			"params": [
				{
					"Argument": "coordinates",
					"Type": "Array <any>",
					"Description": "GeoJSON Coordinates"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/invariant",
			"category": null,
			"name": "geojsonType",
			"description": "Enforce expectations about types of GeoJSON objects for Turf.",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/invariant",
			"returns": [],
			"params": [
				{
					"Argument": "value",
					"Type": "GeoJSON",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "type",
					"Type": "string",
					"Description": "expected GeoJSON type"
				},
				{
					"Argument": "name",
					"Type": "string",
					"Description": "name of calling function"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "if value is not the expected type."
				}
			]
		},
		{
			"parent": "@turf/invariant",
			"category": null,
			"name": "featureOf",
			"description": "Enforce expectations about types of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>  inputs for Turf.\nInternally this uses  <a target=\"_blank\" href=\"geojsonType\">geojsonType</a>  to judge geometry types.",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/invariant",
			"returns": [],
			"params": [
				{
					"Argument": "feature",
					"Type": "Feature",
					"Description": "a feature with an expected geometry type"
				},
				{
					"Argument": "type",
					"Type": "string",
					"Description": "expected GeoJSON type"
				},
				{
					"Argument": "name",
					"Type": "string",
					"Description": "name of calling function"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "error if value is not the expected type."
				}
			]
		},
		{
			"parent": "@turf/invariant",
			"category": null,
			"name": "collectionOf",
			"description": "Enforce expectations about types of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  inputs for Turf.\nInternally this uses  <a target=\"_blank\" href=\"geojsonType\">geojsonType</a>  to judge geometry types.",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/invariant",
			"returns": [],
			"params": [
				{
					"Argument": "featureCollection",
					"Type": "FeatureCollection",
					"Description": "a FeatureCollection for which features will be judged"
				},
				{
					"Argument": "type",
					"Type": "string",
					"Description": "expected GeoJSON type"
				},
				{
					"Argument": "name",
					"Type": "string",
					"Description": "name of calling function"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "if value is not the expected type."
				}
			]
		},
		{
			"parent": "@turf/invariant",
			"category": null,
			"name": "getGeom",
			"description": "Get Geometry from Feature or Geometry Object",
			"snippet": "var point = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [110, 40]\n  }\n}\nvar geom = turf.getGeom(point)\n//={\"type\": \"Point\", \"coordinates\": [110, 40]}",
			"example": "var point = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [110, 40]\n  }\n}\nvar geom = turf.getGeom(point)\n//={\"type\": \"Point\", \"coordinates\": [110, 40]}",
			"hasMap": false,
			"npmName": "@turf/invariant",
			"returns": [
				{
					"type": "(Geometry | )",
					"desc": "GeoJSON Geometry Object"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(Feature | Geometry)",
					"Description": "GeoJSON Feature or Geometry Object"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "if geojson is not a Feature or Geometry Object"
				}
			]
		},
		{
			"parent": "@turf/invariant",
			"category": null,
			"name": "getType",
			"description": "Get GeoJSON object's type, Geometry type is prioritize.",
			"snippet": "var point = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [110, 40]\n  }\n}\nvar geom = turf.getType(point)\n//=\"Point\"",
			"example": "var point = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [110, 40]\n  }\n}\nvar geom = turf.getType(point)\n//=\"Point\"",
			"hasMap": false,
			"npmName": "@turf/invariant",
			"returns": [
				{
					"type": "string",
					"desc": "GeoJSON type"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "GeoJSON object"
				},
				{
					"Argument": "name",
					"Type": "Optional: string",
					"Description": "name of the variable to display in error message"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "isobands",
			"description": "Takes a grid  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  features with z-values and an array of\nvalue breaks and generates filled contour isobands.",
			"snippet": false,
			"example": false,
			"hasMap": false,
			"npmName": "@turf/isobands",
			"returns": [
				{
					"type": "FeatureCollection <MultiPolygon>",
					"desc": "a FeatureCollection of  MultiPolygon  features representing isobands"
				}
			],
			"params": [
				{
					"Argument": "pointGrid",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "input points"
				},
				{
					"Argument": "breaks",
					"Type": "Array <number>",
					"Description": "where to draw contours"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "options on output"
				}
			],
			"options": [
				{
					"Prop": "zProperty",
					"Type": "string",
					"Default": "'elevation'",
					"Description": "the property name in  points  from which z-values will be pulled"
				},
				{
					"Prop": "commonProperties",
					"Type": "Object",
					"Default": "{}",
					"Description": "GeoJSON properties passed to ALL isobands"
				},
				{
					"Prop": "breaksProperties",
					"Type": "Array <Object>",
					"Default": "[]",
					"Description": "GeoJSON properties passed, in order, to the correspondent isoband (order defined by breaks)"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "isolines",
			"description": "Takes a grid  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  features with z-values and an array of\nvalue breaks and generates  <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Isoline\">isolines</a>.",
			"snippet": "// create a grid of points with random z-values in their properties\nvar extent = [0, 30, 20, 50];\nvar cellWidth = 100;\nvar pointGrid = turf.pointGrid(extent, cellWidth, {units: 'miles'});\nfor (var i = 0; i < pointGrid.features.length; i++) {\n    pointGrid.features[i].properties.temperature = Math.random() * 10;\n}\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nvar isolines = turf.isolines(pointGrid, breaks, {zProperty: 'temperature'});\n",
			"example": "// create a grid of points with random z-values in their properties\nvar extent = [0, 30, 20, 50];\nvar cellWidth = 100;\nvar pointGrid = turf.pointGrid(extent, cellWidth, {units: 'miles'});\nfor (var i = 0; i < pointGrid.features.length; i++) {\n    pointGrid.features[i].properties.temperature = Math.random() * 10;\n}\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nvar isolines = turf.isolines(pointGrid, breaks, {zProperty: 'temperature'});\n\n//addToMap\nvar addToMap = [isolines];",
			"hasMap": true,
			"npmName": "@turf/isolines",
			"returns": [
				{
					"type": "FeatureCollection <MultiLineString>",
					"desc": "a FeatureCollection of  MultiLineString  features representing isolines"
				}
			],
			"params": [
				{
					"Argument": "pointGrid",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "input points"
				},
				{
					"Argument": "breaks",
					"Type": "Array <number>",
					"Description": "values of  zProperty  where to draw isolines"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "zProperty",
					"Type": "string",
					"Default": "'elevation'",
					"Description": "the property name in  points  from which z-values will be pulled"
				},
				{
					"Prop": "commonProperties",
					"Type": "Object",
					"Default": "{}",
					"Description": "GeoJSON properties passed to ALL isolines"
				},
				{
					"Prop": "breaksProperties",
					"Type": "Array <Object>",
					"Default": "[]",
					"Description": "GeoJSON properties passed, in order, to the correspondent isoline;\nthe breaks array will define the order in which the isolines are created"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "kinks",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">linestring</a> ,  <a target=\"_blank\" href=\"MultiLineString\">multi-linestring</a> ,  <a target=\"_blank\" href=\"MultiPolygon\">multi-polygon</a> , or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">polygon</a>  and returns  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  at all self-intersections.",
			"snippet": "var poly = turf.polygon([[\n  [-12.034835, 8.901183],\n  [-12.060413, 8.899826],\n  [-12.03638, 8.873199],\n  [-12.059383, 8.871418],\n  [-12.034835, 8.901183]\n]]);\n\nvar kinks = turf.kinks(poly);\n",
			"example": "var poly = turf.polygon([[\n  [-12.034835, 8.901183],\n  [-12.060413, 8.899826],\n  [-12.03638, 8.873199],\n  [-12.059383, 8.871418],\n  [-12.034835, 8.901183]\n]]);\n\nvar kinks = turf.kinks(poly);\n\n//addToMap\nvar addToMap = [poly, kinks]",
			"hasMap": true,
			"npmName": "@turf/kinks",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "self-intersections"
				}
			],
			"params": [
				{
					"Argument": "featureIn",
					"Type": "Feature <(LineString | MultiLineString | MultiPolygon | Polygon)>",
					"Description": "input feature"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "length",
			"description": "Takes a  <a target=\"_blank\" href=\"GeoJSON\">GeoJSON</a>  and measures its length in the specified units,  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a> 's distance are ignored.",
			"snippet": "var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\nvar length = turf.length(line, {units: 'miles'});\n",
			"example": "var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\nvar length = turf.length(line, {units: 'miles'});\n\n//addToMap\nvar addToMap = [line];\nline.properties.distance = length;",
			"hasMap": true,
			"npmName": "@turf/length",
			"returns": [
				{
					"type": "number",
					"desc": "length of GeoJSON"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "GeoJSON to measure"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "kilometers",
					"Description": "can be degrees, radians, miles, or kilometers"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineArc",
			"description": "Creates a circular arc, of a circle of the given radius and center point, between bearing1 and bearing2;\n0 bearing is North of center point, positive clockwise.",
			"snippet": "var center = turf.point([-75, 40]);\nvar radius = 5;\nvar bearing1 = 25;\nvar bearing2 = 47;\n\nvar arc = turf.lineArc(center, radius, bearing1, bearing2);\n",
			"example": "var center = turf.point([-75, 40]);\nvar radius = 5;\nvar bearing1 = 25;\nvar bearing2 = 47;\n\nvar arc = turf.lineArc(center, radius, bearing1, bearing2);\n\n//addToMap\nvar addToMap = [center, arc]",
			"hasMap": true,
			"npmName": "@turf/line-arc",
			"returns": [
				{
					"type": "Feature <LineString>",
					"desc": "line arc"
				}
			],
			"params": [
				{
					"Argument": "center",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "center point"
				},
				{
					"Argument": "radius",
					"Type": "number",
					"Description": "radius of the circle"
				},
				{
					"Argument": "bearing1",
					"Type": "number",
					"Description": "angle, in decimal degrees, of the first radius of the arc"
				},
				{
					"Argument": "bearing2",
					"Type": "number",
					"Description": "angle, in decimal degrees, of the second radius of the arc"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "steps",
					"Type": "number",
					"Default": "64",
					"Description": "number of steps"
				},
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "miles, kilometers, degrees, or radians"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineChunk",
			"description": "Divides a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>  into chunks of a specified length.\nIf the line is shorter than the segment length then the original line is returned.",
			"snippet": "var line = turf.lineString([[-95, 40], [-93, 45], [-85, 50]]);\n\nvar chunk = turf.lineChunk(line, 15, {units: 'miles'});\n",
			"example": "var line = turf.lineString([[-95, 40], [-93, 45], [-85, 50]]);\n\nvar chunk = turf.lineChunk(line, 15, {units: 'miles'});\n\n//addToMap\nvar addToMap = [chunk];",
			"hasMap": true,
			"npmName": "@turf/line-chunk",
			"returns": [
				{
					"type": "FeatureCollection <LineString>",
					"desc": "collection of line segments"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Geometry | Feature <(LineString | MultiLineString)>)",
					"Description": "the lines to split"
				},
				{
					"Argument": "segmentLength",
					"Type": "number",
					"Description": "how long to make each segment"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "units can be degrees, radians, miles, or kilometers"
				},
				{
					"Prop": "reverse",
					"Type": "boolean",
					"Default": "false",
					"Description": "reverses coordinates to start the first chunked segment at the end"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineIntersect",
			"description": "Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).",
			"snippet": "var line1 = turf.lineString([[126, -11], [129, -21]]);\nvar line2 = turf.lineString([[123, -18], [131, -14]]);\nvar intersects = turf.lineIntersect(line1, line2);\n",
			"example": "var line1 = turf.lineString([[126, -11], [129, -21]]);\nvar line2 = turf.lineString([[123, -18], [131, -14]]);\nvar intersects = turf.lineIntersect(line1, line2);\n\n//addToMap\nvar addToMap = [line1, line2, intersects]",
			"hasMap": true,
			"npmName": "@turf/line-intersect",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "point(s) that intersect both"
				}
			],
			"params": [
				{
					"Argument": "line1",
					"Type": "(Geometry | FeatureCollection | Feature <(LineString | MultiLineString | Polygon | MultiPolygon)>)",
					"Description": "any LineString or Polygon"
				},
				{
					"Argument": "line2",
					"Type": "(Geometry | FeatureCollection | Feature <(LineString | MultiLineString | Polygon | MultiPolygon)>)",
					"Description": "any LineString or Polygon"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineOffset",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">line</a>  and returns a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">line</a>  at offset by the specified distance.",
			"snippet": "var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]], { \"stroke\": \"#F00\" });\n\nvar offsetLine = turf.lineOffset(line, 2, {units: 'miles'});\n",
			"example": "var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]], { \"stroke\": \"#F00\" });\n\nvar offsetLine = turf.lineOffset(line, 2, {units: 'miles'});\n\n//addToMap\nvar addToMap = [offsetLine, line]\noffsetLine.properties.stroke = \"#00F\"",
			"hasMap": true,
			"npmName": "@turf/line-offset",
			"returns": [
				{
					"type": "Feature <(LineString | MultiLineString)>",
					"desc": "Line offset from the input line"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(Geometry | Feature <(LineString | MultiLineString)>)",
					"Description": "input GeoJSON"
				},
				{
					"Argument": "distance",
					"Type": "number",
					"Description": "distance to offset the line (can be of negative value)"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "can be degrees, radians, miles, kilometers, inches, yards, meters"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineOverlap",
			"description": "Takes any LineString or Polygon and returns the overlapping lines between both features.",
			"snippet": "var line1 = turf.lineString([[115, -35], [125, -30], [135, -30], [145, -35]]);\nvar line2 = turf.lineString([[115, -25], [125, -30], [135, -30], [145, -25]]);\n\nvar overlapping = turf.lineOverlap(line1, line2);\n",
			"example": "var line1 = turf.lineString([[115, -35], [125, -30], [135, -30], [145, -35]]);\nvar line2 = turf.lineString([[115, -25], [125, -30], [135, -30], [145, -25]]);\n\nvar overlapping = turf.lineOverlap(line1, line2);\n\n//addToMap\nvar addToMap = [line1, line2, overlapping]",
			"hasMap": true,
			"npmName": "@turf/line-overlap",
			"returns": [
				{
					"type": "FeatureCollection <LineString>",
					"desc": "lines(s) that are overlapping between both features"
				}
			],
			"params": [
				{
					"Argument": "line1",
					"Type": "(Geometry | Feature <(LineString | MultiLineString | Polygon | MultiPolygon)>)",
					"Description": "any LineString or Polygon"
				},
				{
					"Argument": "line2",
					"Type": "(Geometry | Feature <(LineString | MultiLineString | Polygon | MultiPolygon)>)",
					"Description": "any LineString or Polygon"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "tolerance",
					"Type": "number",
					"Default": "0",
					"Description": "Tolerance distance to match overlapping line segments (in kilometers)"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineSegment",
			"description": "Creates a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  of 2-vertex  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>  segments from a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">(Multi)LineString</a>  or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">(Multi)Polygon</a>.",
			"snippet": "var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\nvar segments = turf.lineSegment(polygon);\n",
			"example": "var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\nvar segments = turf.lineSegment(polygon);\n\n//addToMap\nvar addToMap = [polygon, segments]",
			"hasMap": true,
			"npmName": "@turf/line-segment",
			"returns": [
				{
					"type": "FeatureCollection <LineString>",
					"desc": "2-vertex line segments"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(Geometry | FeatureCollection | Feature <(LineString | MultiLineString | MultiPolygon | Polygon)>)",
					"Description": "GeoJSON Polygon or LineString"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineSliceAlong",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">line</a> , a specified distance along the line to a start  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a> ,\nand a specified  distance along the line to a stop point\nand returns a subsection of the line in-between those points.",
			"snippet": "var line = turf.lineString([[7, 45], [9, 45], [14, 40], [14, 41]]);\nvar start = 12.5;\nvar stop = 25;\nvar sliced = turf.lineSliceAlong(line, start, stop, {units: 'miles'});\n",
			"example": "var line = turf.lineString([[7, 45], [9, 45], [14, 40], [14, 41]]);\nvar start = 12.5;\nvar stop = 25;\nvar sliced = turf.lineSliceAlong(line, start, stop, {units: 'miles'});\n\n//addToMap\nvar addToMap = [line, start, stop, sliced]",
			"hasMap": true,
			"npmName": "@turf/line-slice-along",
			"returns": [
				{
					"type": "Feature <LineString>",
					"desc": "sliced line"
				}
			],
			"params": [
				{
					"Argument": "line",
					"Type": "(Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>> | LineString)",
					"Description": "input line"
				},
				{
					"Argument": "startDist",
					"Type": "number",
					"Description": "distance along the line to starting point"
				},
				{
					"Argument": "stopDist",
					"Type": "number",
					"Description": "distance along the line to ending point"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "can be degrees, radians, miles, or kilometers"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineSlice",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">line</a> , a start  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a> , and a stop point\nand returns a subsection of the line in-between those points.\nThe start & stop points don't need to fall exactly on the line.",
			"snippet": "var line = turf.lineString([\n    [-77.031669, 38.878605],\n    [-77.029609, 38.881946],\n    [-77.020339, 38.884084],\n    [-77.025661, 38.885821],\n    [-77.021884, 38.889563],\n    [-77.019824, 38.892368]\n]);\nvar start = turf.point([-77.029609, 38.881946]);\nvar stop = turf.point([-77.021884, 38.889563]);\n\nvar sliced = turf.lineSlice(start, stop, line);\n",
			"example": "var line = turf.lineString([\n    [-77.031669, 38.878605],\n    [-77.029609, 38.881946],\n    [-77.020339, 38.884084],\n    [-77.025661, 38.885821],\n    [-77.021884, 38.889563],\n    [-77.019824, 38.892368]\n]);\nvar start = turf.point([-77.029609, 38.881946]);\nvar stop = turf.point([-77.021884, 38.889563]);\n\nvar sliced = turf.lineSlice(start, stop, line);\n\n//addToMap\nvar addToMap = [start, stop, line]",
			"hasMap": true,
			"npmName": "@turf/line-slice",
			"returns": [
				{
					"type": "Feature <LineString>",
					"desc": "sliced line"
				}
			],
			"params": [
				{
					"Argument": "startPt",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "starting point"
				},
				{
					"Argument": "stopPt",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "stopping point"
				},
				{
					"Argument": "line",
					"Type": "(Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>> | LineString)",
					"Description": "line to slice"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineSplit",
			"description": "Split a LineString by another GeoJSON Feature.",
			"snippet": "var line = turf.lineString([[120, -25], [145, -25]]);\nvar splitter = turf.lineString([[130, -15], [130, -35]]);\n\nvar split = turf.lineSplit(line, splitter);\n",
			"example": "var line = turf.lineString([[120, -25], [145, -25]]);\nvar splitter = turf.lineString([[130, -15], [130, -35]]);\n\nvar split = turf.lineSplit(line, splitter);\n\n//addToMap\nvar addToMap = [line, splitter]",
			"hasMap": true,
			"npmName": "@turf/line-split",
			"returns": [
				{
					"type": "FeatureCollection <LineString>",
					"desc": "Split LineStrings"
				}
			],
			"params": [
				{
					"Argument": "line",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>>",
					"Description": "LineString Feature to split"
				},
				{
					"Argument": "splitter",
					"Type": "Feature",
					"Description": "Feature used to split line"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "lineToPolygon",
			"description": "Converts (Multi)LineString(s) to Polygon(s).",
			"snippet": "var line = turf.lineString([[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]);\n\nvar polygon = turf.lineToPolygon(line);\n",
			"example": "var line = turf.lineString([[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]);\n\nvar polygon = turf.lineToPolygon(line);\n\n//addToMap\nvar addToMap = [polygon];",
			"hasMap": true,
			"npmName": "@turf/line-to-polygon",
			"returns": [
				{
					"type": "Feature <(Polygon | MultiPolygon)>",
					"desc": "converted to Polygons"
				}
			],
			"params": [
				{
					"Argument": "lines",
					"Type": "(FeatureCollection | Feature <(LineString | MultiLineString)>)",
					"Description": "Features to convert"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "properties",
					"Type": "Object",
					"Default": "{}",
					"Description": "translates GeoJSON properties to Feature"
				},
				{
					"Prop": "autoComplete",
					"Type": "boolean",
					"Default": "true",
					"Description": "auto complete linestrings (matches first & last coordinates)"
				},
				{
					"Prop": "orderCoords",
					"Type": "boolean",
					"Default": "true",
					"Description": "sorts linestrings to place outer ring at the first position of the coordinates"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "mask",
			"description": "Takes any type of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">polygon</a>  and an optional mask and returns a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">polygon</a>  exterior ring with holes.",
			"snippet": "var polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);\nvar mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);\n\nvar masked = turf.mask(polygon, mask);\n",
			"example": "var polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);\nvar mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);\n\nvar masked = turf.mask(polygon, mask);\n\n//addToMap\nvar addToMap = [masked]",
			"hasMap": true,
			"npmName": "@turf/mask",
			"returns": [
				{
					"type": "Feature <Polygon>",
					"desc": "Masked Polygon (exterior ring with holes)."
				}
			],
			"params": [
				{
					"Argument": "polygon",
					"Type": "(FeatureCollection | Feature <(Polygon | MultiPolygon)>)",
					"Description": "GeoJSON Polygon used as interior rings or holes."
				},
				{
					"Argument": "mask",
					"Type": "Optional: undefined",
					"Description": "GeoJSON Polygon used as the exterior ring (if undefined, the world extent is used)"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "coordEach",
			"description": "Iterate over coordinates in any GeoJSON object, similar to Array.forEach()",
			"snippet": "var features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=featureSubIndex\n});",
			"example": "var features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=featureSubIndex\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (currentCoord, coordIndex, featureIndex, featureSubIndex)"
				},
				{
					"Argument": "excludeWrapCoord",
					"Type": "boolean",
					"Description": "whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "coordReduce",
			"description": "Reduce coordinates in any GeoJSON object, similar to Array.reduce()",
			"snippet": "var features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=featureSubIndex\n  return currentCoord;\n});",
			"example": "var features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=featureSubIndex\n  return currentCoord;\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [
				{
					"desc": "The value that results from the reduction."
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Geometry | Feature)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (previousValue, currentCoord, coordIndex)"
				},
				{
					"Argument": "initialValue",
					"Type": "Optional: undefined",
					"Description": "Value to use as the first argument to the first call of the callback."
				},
				{
					"Argument": "excludeWrapCoord",
					"Type": "boolean",
					"Description": "whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "propEach",
			"description": "Iterate over properties in any GeoJSON object, similar to Array.forEach()",
			"snippet": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});",
			"example": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (currentProperties, featureIndex)"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "propReduce",
			"description": "Reduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.",
			"snippet": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});",
			"example": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [
				{
					"desc": "The value that results from the reduction."
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (previousValue, currentProperties, featureIndex)"
				},
				{
					"Argument": "initialValue",
					"Type": "Optional: undefined",
					"Description": "Value to use as the first argument to the first call of the callback."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "featureEach",
			"description": "Iterate over features in any GeoJSON object, similar to\nArray.forEach.",
			"snippet": "var features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});",
			"example": "var features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (currentFeature, featureIndex)"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "featureReduce",
			"description": "Reduce features in any GeoJSON object, similar to Array.reduce().",
			"snippet": "var features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});",
			"example": "var features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [
				{
					"desc": "The value that results from the reduction."
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (previousValue, currentFeature, featureIndex)"
				},
				{
					"Argument": "initialValue",
					"Type": "Optional: undefined",
					"Description": "Value to use as the first argument to the first call of the callback."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "coordAll",
			"description": "Get all coordinates from any GeoJSON object.",
			"snippet": "var features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]",
			"example": "var features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [
				{
					"type": "Array <Array <number>>",
					"desc": "coordinate position array"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON object"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "geomEach",
			"description": "Iterate over each geometry in any GeoJSON object, similar to Array.forEach()",
			"snippet": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, currentProperties) {\n  //=currentGeometry\n  //=featureIndex\n  //=currentProperties\n});",
			"example": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, currentProperties) {\n  //=currentGeometry\n  //=featureIndex\n  //=currentProperties\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (currentGeometry, featureIndex, currentProperties)"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "geomReduce",
			"description": "Reduce geometry in any GeoJSON object, similar to Array.reduce().",
			"snippet": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, currentProperties) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=currentProperties\n  return currentGeometry\n});",
			"example": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, currentProperties) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=currentProperties\n  return currentGeometry\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [
				{
					"desc": "The value that results from the reduction."
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (previousValue, currentGeometry, featureIndex, currentProperties)"
				},
				{
					"Argument": "initialValue",
					"Type": "Optional: undefined",
					"Description": "Value to use as the first argument to the first call of the callback."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "flattenEach",
			"description": "Iterate over flattened features in any GeoJSON object, similar to\nArray.forEach.",
			"snippet": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, featureSubIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=featureSubIndex\n});",
			"example": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, featureSubIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=featureSubIndex\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (currentFeature, featureIndex, featureSubIndex)"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "flattenReduce",
			"description": "Reduce flattened features in any GeoJSON object, similar to Array.reduce().",
			"snippet": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, featureSubIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=featureSubIndex\n  return currentFeature\n});",
			"example": "var features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, featureSubIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=featureSubIndex\n  return currentFeature\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [
				{
					"desc": "The value that results from the reduction."
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON object"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (previousValue, currentFeature, featureIndex, featureSubIndex)"
				},
				{
					"Argument": "initialValue",
					"Type": "Optional: undefined",
					"Description": "Value to use as the first argument to the first call of the callback."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "segmentEach",
			"description": "Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.",
			"snippet": "var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, featureSubIndex, segmentIndex) {\n  //= currentSegment\n  //= featureIndex\n  //= featureSubIndex\n  //= segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});",
			"example": "var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, featureSubIndex, segmentIndex) {\n  //= currentSegment\n  //= featureIndex\n  //= featureSubIndex\n  //= segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [
				false
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (currentSegment, featureIndex, featureSubIndex)"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/meta",
			"category": null,
			"name": "segmentReduce",
			"description": "Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.",
			"snippet": "var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, featureSubIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= featureSubIndex\n  //= segmentInex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);",
			"example": "var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, featureSubIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= featureSubIndex\n  //= segmentInex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);",
			"hasMap": false,
			"npmName": "@turf/meta",
			"returns": [
				false
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature | Geometry)",
					"Description": "any GeoJSON"
				},
				{
					"Argument": "callback",
					"Type": "Function",
					"Description": "a method that takes (previousValue, currentSegment, currentIndex)"
				},
				{
					"Argument": "initialValue",
					"Type": "Optional: undefined",
					"Description": "Value to use as the first argument to the first call of the callback."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "midpoint",
			"description": "Takes two  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  and returns a point midway between them.\nThe midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.",
			"snippet": "var point1 = turf.point([144.834823, -37.771257]);\nvar point2 = turf.point([145.14244, -37.830937]);\n\nvar midpoint = turf.midpoint(point1, point2);\n",
			"example": "var point1 = turf.point([144.834823, -37.771257]);\nvar point2 = turf.point([145.14244, -37.830937]);\n\nvar midpoint = turf.midpoint(point1, point2);\n\n//addToMap\nvar addToMap = [point1, point2, midpoint];\nmidpoint.properties['marker-color'] = '#f00';",
			"hasMap": true,
			"npmName": "@turf/midpoint",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "a point midway between  pt1  and  pt2"
				}
			],
			"params": [
				{
					"Argument": "point1",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "first point"
				},
				{
					"Argument": "point2",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "second point"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "nearestPointOnLine",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  and a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>  and calculates the closest Point on the (Multi)LineString.",
			"snippet": "var line = turf.lineString([\n    [-77.031669, 38.878605],\n    [-77.029609, 38.881946],\n    [-77.020339, 38.884084],\n    [-77.025661, 38.885821],\n    [-77.021884, 38.889563],\n    [-77.019824, 38.892368]\n]);\nvar pt = turf.point([-77.037076, 38.884017]);\n\nvar snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n",
			"example": "var line = turf.lineString([\n    [-77.031669, 38.878605],\n    [-77.029609, 38.881946],\n    [-77.020339, 38.884084],\n    [-77.025661, 38.885821],\n    [-77.021884, 38.889563],\n    [-77.019824, 38.892368]\n]);\nvar pt = turf.point([-77.037076, 38.884017]);\n\nvar snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n\n//addToMap\nvar addToMap = [line, pt, snapped];\nsnapped.properties['marker-color'] = '#00f';",
			"hasMap": true,
			"npmName": "@turf/nearest-point-on-line",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "closest point on the  line  to  point. The properties object will contain three values:  index : closest point was found on nth line part,  dist : distance between pt and the closest point,  location : distance along the line between start and the closest point."
				}
			],
			"params": [
				{
					"Argument": "lines",
					"Type": "(Geometry | Feature <(LineString | MultiLineString)>)",
					"Description": "lines to snap to"
				},
				{
					"Argument": "pt",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "point to snap from"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "can be degrees, radians, miles, or kilometers"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "nearestPoint",
			"description": "Takes a reference  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">point</a>  and a FeatureCollection of Features\nwith Point geometries and returns the\npoint from the FeatureCollection closest to the reference. This calculation\nis geodesic.",
			"snippet": "var targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\nvar points = turf.featureCollection([\n    turf.point([28.973865, 41.011122]),\n    turf.point([28.948459, 41.024204]),\n    turf.point([28.938674, 41.013324])\n]);\n\nvar nearest = turf.nearestPoint(targetPoint, points);\n",
			"example": "var targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\nvar points = turf.featureCollection([\n    turf.point([28.973865, 41.011122]),\n    turf.point([28.948459, 41.024204]),\n    turf.point([28.938674, 41.013324])\n]);\n\nvar nearest = turf.nearestPoint(targetPoint, points);\n\n//addToMap\nvar addToMap = [targetPoint, points, nearest];\nnearest.properties['marker-color'] = '#F00';",
			"hasMap": true,
			"npmName": "@turf/nearest-point",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "the closest point in the set to the reference point"
				}
			],
			"params": [
				{
					"Argument": "targetPoint",
					"Type": "Coord",
					"Description": "the reference point"
				},
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "against input point set"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "planepoint",
			"description": "Takes a triangular plane as a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a> \nand a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  within that triangle and returns the z-value\nat that point. The Polygon should have properties  a ,  b , and  c \nthat define the values at its three corners. Alternatively, the z-values\nof each triangle point can be provided by their respective 3rd coordinate\nif their values are not provided as properties.",
			"snippet": "var point = turf.point([-75.3221, 39.529]);\n// \"a\", \"b\", and \"c\" values represent the values of the coordinates in order.\nvar triangle = turf.polygon([[\n  [-75.1221, 39.57],\n  [-75.58, 39.18],\n  [-75.97, 39.86],\n  [-75.1221, 39.57]\n]], {\n  \"a\": 11,\n  \"b\": 122,\n  \"c\": 44\n});\n\nvar zValue = turf.planepoint(point, triangle);\npoint.properties.zValue = zValue;\n",
			"example": "var point = turf.point([-75.3221, 39.529]);\n// \"a\", \"b\", and \"c\" values represent the values of the coordinates in order.\nvar triangle = turf.polygon([[\n  [-75.1221, 39.57],\n  [-75.58, 39.18],\n  [-75.97, 39.86],\n  [-75.1221, 39.57]\n]], {\n  \"a\": 11,\n  \"b\": 122,\n  \"c\": 44\n});\n\nvar zValue = turf.planepoint(point, triangle);\npoint.properties.zValue = zValue;\n\n//addToMap\nvar addToMap = [triangle, point];",
			"hasMap": true,
			"npmName": "@turf/planepoint",
			"returns": [
				{
					"type": "number",
					"desc": "the z-value for  interpolatedPoint"
				}
			],
			"params": [
				{
					"Argument": "point",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "the Point for which a z-value will be calculated"
				},
				{
					"Argument": "triangle",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>>)",
					"Description": "a Polygon feature with three vertices"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "pointGrid",
			"description": "Creates a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  grid from a bounding box,  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>.",
			"snippet": "var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\nvar cellSide = 3;\nvar options = {units: 'miles'};\n\nvar grid = turf.pointGrid(extent, cellSide, options);\n",
			"example": "var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\nvar cellSide = 3;\nvar options = {units: 'miles'};\n\nvar grid = turf.pointGrid(extent, cellSide, options);\n\n//addToMap\nvar addToMap = [grid];",
			"hasMap": true,
			"npmName": "@turf/point-grid",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "grid of points"
				}
			],
			"params": [
				{
					"Argument": "bbox",
					"Type": "Array <number>",
					"Description": "extent in  minX, minY, maxX, maxY  order"
				},
				{
					"Argument": "cellSide",
					"Type": "number",
					"Description": "the distance between points, in units"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "used in calculating cellSide, can be degrees, radians, miles, or kilometers"
				},
				{
					"Prop": "mask",
					"Type": "Optional: undefined",
					"Default": null,
					"Description": "if passed a Polygon or MultiPolygon, the grid Points will be created only inside it"
				},
				{
					"Prop": "properties",
					"Type": "Object",
					"Default": "{}",
					"Description": "passed to each point of the grid"
				}
			],
			"throws": []
		},
		{
			"parent": "@turf/point-on-feature",
			"category": null,
			"name": "pointOnFeature",
			"description": "Takes a Feature or FeatureCollection and returns a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  guaranteed to be on the surface of the feature.",
			"snippet": "// create a random polygon\nvar polygon = turf.randomPolygon();\n\nvar pointOnPolygon = turf.pointOnFeature(polygon);\n",
			"example": "// create a random polygon\nvar polygon = turf.randomPolygon();\n\nvar pointOnPolygon = turf.pointOnFeature(polygon);\n\n//addToMap\nvar addToMap = [polygon, pointOnPolygon];",
			"hasMap": true,
			"npmName": "@turf/point-on-feature",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "a point on the surface of  input"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(Feature | FeatureCollection)",
					"Description": "any Feature or FeatureCollection"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "pointToLineDistance",
			"description": "Returns the minimum distance between a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  and a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a> , being the distance from a line the\nminimum distance between the point and any segment of the  LineString.",
			"snippet": "var pt = turf.point([0, 0]);\nvar line = turf.lineString([[1, 1],[-1, 1]]);\n\nvar distance = turf.pointToLineDistance(pt, line, {units: 'miles'});\n//=69.11854715938406",
			"example": "var pt = turf.point([0, 0]);\nvar line = turf.lineString([[1, 1],[-1, 1]]);\n\nvar distance = turf.pointToLineDistance(pt, line, {units: 'miles'});\n//=69.11854715938406",
			"hasMap": false,
			"npmName": "@turf/point-to-line-distance",
			"returns": [
				{
					"type": "number",
					"desc": "distance between point and line"
				}
			],
			"params": [
				{
					"Argument": "pt",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>> | Array <number>)",
					"Description": "Feature or Geometry"
				},
				{
					"Argument": "line",
					"Type": "(Geometry | Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">LineString</a>> | Array <Array <number>>)",
					"Description": "GeoJSON Feature or Geometry"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "can be degrees, radians, miles, or kilometers"
				},
				{
					"Prop": "mercator",
					"Type": "boolean",
					"Default": "false",
					"Description": "if distance should be on Mercator or WGS84 projection"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "pointsWithinPolygon",
			"description": "Takes a set of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  and a set of  <a target=\"_blank\" href=\"Polygon\">polygons</a>  and returns the points that fall within the polygons.",
			"snippet": "var searchWithin = turf.featureCollection([\n    turf.polygon([[\n        [-46.653,-23.543],\n        [-46.634,-23.5346],\n        [-46.613,-23.543],\n        [-46.614,-23.559],\n        [-46.631,-23.567],\n        [-46.653,-23.560],\n        [-46.653,-23.543]\n    ]])\n]);\nvar points = turf.featureCollection([\n    turf.point([-46.6318, -23.5523]),\n    turf.point([-46.6246, -23.5325]),\n    turf.point([-46.6062, -23.5513]),\n    turf.point([-46.663, -23.554]),\n    turf.point([-46.643, -23.557])\n]);\n\nvar ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\n",
			"example": "var searchWithin = turf.featureCollection([\n    turf.polygon([[\n        [-46.653,-23.543],\n        [-46.634,-23.5346],\n        [-46.613,-23.543],\n        [-46.614,-23.559],\n        [-46.631,-23.567],\n        [-46.653,-23.560],\n        [-46.653,-23.543]\n    ]])\n]);\nvar points = turf.featureCollection([\n    turf.point([-46.6318, -23.5523]),\n    turf.point([-46.6246, -23.5325]),\n    turf.point([-46.6062, -23.5513]),\n    turf.point([-46.663, -23.554]),\n    turf.point([-46.643, -23.557])\n]);\n\nvar ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\n\n//addToMap\nvar addToMap = [points, searchWithin, ptsWithin]\nturf.featureEach(ptsWithin, function (currentFeature) {\n  currentFeature.properties['marker-size'] = 'large';\n  currentFeature.properties['marker-color'] = '#000';\n});",
			"hasMap": true,
			"npmName": "@turf/points-within-polygon",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "points that land within at least one polygon"
				}
			],
			"params": [
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "input points"
				},
				{
					"Argument": "polygons",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>>",
					"Description": "input polygons"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "polygonTangents",
			"description": "Finds the tangents of a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">(Multi)Polygon</a>  from a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>.",
			"snippet": "var polygon = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\nvar point = turf.point([61, 5]);\n\nvar tangents = turf.polygonTangents(point, polygon)\n",
			"example": "var polygon = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\nvar point = turf.point([61, 5]);\n\nvar tangents = turf.polygonTangents(point, polygon)\n\n//addToMap\nvar addToMap = [tangents, point, polygon];",
			"hasMap": true,
			"npmName": "@turf/polygon-tangents",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "Feature Collection containing the two tangent points"
				}
			],
			"params": [
				{
					"Argument": "pt",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "to calculate the tangent points from"
				},
				{
					"Argument": "polygon",
					"Type": "Feature <(Polygon | MultiPolygon)>",
					"Description": "to get tangents from"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "polygonToLine",
			"description": "Converts a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>  to  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">(Multi)LineString</a>  or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#multipolygon\">MultiPolygon</a>  to a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">(Multi)LineString</a>.",
			"snippet": "var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n\nvar line = turf.polygonToLine(poly);\n",
			"example": "var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n\nvar line = turf.polygonToLine(poly);\n\n//addToMap\nvar addToMap = [line];",
			"hasMap": true,
			"npmName": "@turf/polygon-to-line",
			"returns": [
				{
					"type": "(FeatureCollection | Feature <(LineString | MultiLinestring)>)",
					"desc": "converted (Multi)Polygon to (Multi)LineString"
				}
			],
			"params": [
				{
					"Argument": "polygon",
					"Type": "Feature <(Polygon | MultiPolygon)>",
					"Description": "Feature to convert"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "properties",
					"Type": "Object",
					"Default": "{}",
					"Description": "translates GeoJSON properties to Feature"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "polygonize",
			"description": "Polygonizes  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">(Multi)LineString(s)</a>  into  <a target=\"_blank\" href=\"Polygons\">Polygons</a>. Implementation of GEOSPolygonize function ( geos::operation::polygonize::Polygonizer ).\nPolygonizes a set of lines that represents edges in a planar graph. Edges must be correctly\nnoded, i.e., they must only meet at their endpoints. (NOTE: while TurfJS has no specific function, an easy way to\nensure this is to use the QGis library and call unaryUnion() on the set of input geometries and then pass the\nresult to turf-polygonize).\nThe implementation correctly handles:",
			"snippet": "var lines = {\n \"type\": \"FeatureCollection\",\n \"features\": [\n   {\n     \"type\": \"Feature\",\n     \"properties\": {},\n     \"geometry\": {\n       \"type\": \"LineString\",\n       \"coordinates\": [\n         [\n           119.00390625,\n           -22.024545601240337\n         ],\n         [\n           120.58593749999999,\n           -28.613459424004414\n         ],\n         [\n           125.595703125,\n           -32.99023555965107\n         ],\n         [\n           133.330078125,\n           -32.99023555965107\n         ],\n         [\n           142.646484375,\n           -30.977609093348676\n         ],\n         [\n           142.294921875,\n           -24.126701958681668\n         ],\n         [\n           139.04296875,\n           -16.299051014581817\n         ],\n         [\n           128.84765625,\n           -15.199386048559994\n         ]\n       ]\n     }\n   },\n   {\n     \"type\": \"Feature\",\n     \"properties\": {},\n     \"geometry\": {\n       \"type\": \"LineString\",\n       \"coordinates\": [\n         [\n           142.646484375,\n           -30.977609093348676\n         ],\n         [\n           132.451171875,\n           -27.449790329784214\n         ],\n         [\n           128.671875,\n           -23.1605633090483\n         ],\n         [\n           119.00390625,\n           -22.024545601240337\n         ]\n       ]\n     }\n   }\n ]\n}\nvar outPolygon = turf.polygonize(lines)",
			"example": "var lines = {\n \"type\": \"FeatureCollection\",\n \"features\": [\n   {\n     \"type\": \"Feature\",\n     \"properties\": {},\n     \"geometry\": {\n       \"type\": \"LineString\",\n       \"coordinates\": [\n         [\n           119.00390625,\n           -22.024545601240337\n         ],\n         [\n           120.58593749999999,\n           -28.613459424004414\n         ],\n         [\n           125.595703125,\n           -32.99023555965107\n         ],\n         [\n           133.330078125,\n           -32.99023555965107\n         ],\n         [\n           142.646484375,\n           -30.977609093348676\n         ],\n         [\n           142.294921875,\n           -24.126701958681668\n         ],\n         [\n           139.04296875,\n           -16.299051014581817\n         ],\n         [\n           128.84765625,\n           -15.199386048559994\n         ]\n       ]\n     }\n   },\n   {\n     \"type\": \"Feature\",\n     \"properties\": {},\n     \"geometry\": {\n       \"type\": \"LineString\",\n       \"coordinates\": [\n         [\n           142.646484375,\n           -30.977609093348676\n         ],\n         [\n           132.451171875,\n           -27.449790329784214\n         ],\n         [\n           128.671875,\n           -23.1605633090483\n         ],\n         [\n           119.00390625,\n           -22.024545601240337\n         ]\n       ]\n     }\n   }\n ]\n}\nvar outPolygon = turf.polygonize(lines)\n//addToMap\nvar addToMap = [lines, outPolygon];",
			"hasMap": true,
			"npmName": "@turf/polygonize",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "Polygons created"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Geometry | Feature <(LineString | MultiLineString)>)",
					"Description": "Lines in order to polygonize"
				}
			],
			"options": null,
			"throws": [
				{
					"type": "Error",
					"desc": "if GeoJSON is invalid."
				}
			]
		},
		{
			"parent": "@turf/projection",
			"category": null,
			"name": "toMercator",
			"description": "Converts a WGS84 GeoJSON object into Mercator (EPSG:900913) projection",
			"snippet": "var pt = turf.point([-71,41]);\nvar converted = turf.toMercator(pt);\n",
			"example": "var pt = turf.point([-71,41]);\nvar converted = turf.toMercator(pt);\n\n//addToMap\nvar addToMap = [pt, converted];",
			"hasMap": true,
			"npmName": "@turf/projection",
			"returns": [
				{
					"type": "GeoJSON",
					"desc": "true/false"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(GeoJSON | Position)",
					"Description": "WGS84 GeoJSON object"
				},
				{
					"Argument": "options",
					"Type": "Optional: Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": "@turf/projection",
			"category": null,
			"name": "toWgs84",
			"description": "Converts a Mercator (EPSG:900913) GeoJSON object into WGS84 projection",
			"snippet": "var pt = turf.point([-7903683.846322424, 5012341.663847514]);\nvar converted = turf.toWgs84(pt);\n",
			"example": "var pt = turf.point([-7903683.846322424, 5012341.663847514]);\nvar converted = turf.toWgs84(pt);\n\n//addToMap\nvar addToMap = [pt, converted];",
			"hasMap": true,
			"npmName": "@turf/projection",
			"returns": [
				{
					"type": "GeoJSON",
					"desc": "true/false"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(GeoJSON | Position)",
					"Description": "Mercator GeoJSON object"
				},
				{
					"Argument": "options",
					"Type": "Optional: Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": "@turf/random",
			"category": null,
			"name": "randomPosition",
			"description": "Returns a random position within a  <a target=\"_blank\" href=\"bounding\">box</a>.",
			"snippet": "var position = turf.randomPosition([-180, -90, 180, 90])\n//=position",
			"example": "var position = turf.randomPosition([-180, -90, 180, 90])\n//=position",
			"hasMap": false,
			"npmName": "@turf/random",
			"returns": [
				{
					"type": "Array <number>",
					"desc": "Position  longitude, latitude"
				}
			],
			"params": [
				{
					"Argument": "bbox",
					"Type": "Array <number>",
					"Description": "a bounding box inside of which positions are placed."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/random",
			"category": null,
			"name": "randomPoint",
			"description": "Returns a random  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">point</a>.",
			"snippet": "var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n//=points",
			"example": "var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n//=points",
			"hasMap": false,
			"npmName": "@turf/random",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "GeoJSON FeatureCollection of points"
				}
			],
			"params": [
				{
					"Argument": "count",
					"Type": "number",
					"Description": "how many geometries will be generated"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "bbox",
					"Type": "Array <number>",
					"Default": "[-180,-90,180,90]",
					"Description": "a bounding box inside of which geometries are placed."
				}
			],
			"throws": []
		},
		{
			"parent": "@turf/random",
			"category": null,
			"name": "randomPolygon",
			"description": "Returns a random  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">polygon</a>.",
			"snippet": "var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n//=polygons",
			"example": "var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n//=polygons",
			"hasMap": false,
			"npmName": "@turf/random",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "GeoJSON FeatureCollection of points"
				}
			],
			"params": [
				{
					"Argument": "count",
					"Type": "number",
					"Description": "how many geometries will be generated"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "bbox",
					"Type": "Array <number>",
					"Default": "[-180,-90,180,90]",
					"Description": "a bounding box inside of which geometries are placed."
				},
				{
					"Prop": "num_vertices",
					"Type": "number",
					"Default": "10",
					"Description": "is how many coordinates each LineString will contain."
				},
				{
					"Prop": "max_radial_length",
					"Type": "number",
					"Default": "10",
					"Description": "is the maximum number of decimal degrees latitude or longitude that a vertex can reach out of the center of the Polygon."
				}
			],
			"throws": []
		},
		{
			"parent": "@turf/random",
			"category": null,
			"name": "randomLineString",
			"description": "Returns a random  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">linestring</a>.",
			"snippet": "var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n//=lineStrings",
			"example": "var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n//=lineStrings",
			"hasMap": false,
			"npmName": "@turf/random",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "GeoJSON FeatureCollection of points"
				}
			],
			"params": [
				{
					"Argument": "count",
					"Type": "number",
					"Description": "how many geometries will be generated"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "bbox",
					"Type": "Array <number>",
					"Default": "[-180,-90,180,90]",
					"Description": "a bounding box inside of which geometries are placed."
				},
				{
					"Prop": "num_vertices",
					"Type": "number",
					"Default": "10",
					"Description": "is how many coordinates each LineString will contain."
				},
				{
					"Prop": "max_length",
					"Type": "number",
					"Default": "0.0001",
					"Description": "is the maximum number of decimal degrees that a vertex can be from its predecessor"
				},
				{
					"Prop": "max_rotation",
					"Type": "number",
					"Default": "Math.PI/8",
					"Description": "is the maximum number of radians that a line segment can turn from the previous segment."
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "rewind",
			"description": "Rewind  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#linestring\">(Multi)LineString</a>  or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">(Multi)Polygon</a>  outer ring counterclockwise and inner rings clockwise (Uses  <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Shoelace_formula\">Shoelace Formula</a> ).",
			"snippet": "var polygon = turf.polygon([[[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]]);\n\nvar rewind = turf.rewind(polygon);\n",
			"example": "var polygon = turf.polygon([[[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]]);\n\nvar rewind = turf.rewind(polygon);\n\n//addToMap\nvar addToMap = [rewind];",
			"hasMap": true,
			"npmName": "@turf/rewind",
			"returns": [
				{
					"type": "GeoJSON",
					"desc": "rewind Polygon"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "input GeoJSON Polygon"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "reverse",
					"Type": "boolean",
					"Default": "false",
					"Description": "enable reverse winding"
				},
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "rhumbBearing",
			"description": "Takes two  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  and finds the bearing angle between them along a Rhumb line\ni.e. the angle measured in degrees start the north line (0 degrees)",
			"snippet": "var point1 = turf.point([-75.343, 39.984], {\"marker-color\": \"#F00\"});\nvar point2 = turf.point([-75.534, 39.123], {\"marker-color\": \"#00F\"});\n\nvar bearing = turf.rhumbBearing(point1, point2);\n",
			"example": "var point1 = turf.point([-75.343, 39.984], {\"marker-color\": \"#F00\"});\nvar point2 = turf.point([-75.534, 39.123], {\"marker-color\": \"#00F\"});\n\nvar bearing = turf.rhumbBearing(point1, point2);\n\n//addToMap\nvar addToMap = [point1, point2];\npoint1.properties.bearing = bearing;\npoint2.properties.bearing = bearing;",
			"hasMap": true,
			"npmName": "@turf/rhumb-bearing",
			"returns": [
				{
					"type": "number",
					"desc": "bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise)"
				}
			],
			"params": [
				{
					"Argument": "start",
					"Type": "Coord",
					"Description": "starting Point"
				},
				{
					"Argument": "end",
					"Type": "Coord",
					"Description": "ending Point"
				},
				{
					"Argument": "options",
					"Type": "Optional: Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "final",
					"Type": "boolean",
					"Default": "false",
					"Description": "calculates the final bearing if true"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "rhumbDestination",
			"description": "Returns the destination  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>  having travelled the given distance along a Rhumb line from the\norigin Point with the (varant) given bearing.",
			"snippet": "var pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\nvar distance = 50;\nvar bearing = 90;\nvar options = {units: 'miles'};\n\nvar destination = turf.rhumbDestination(pt, distance, bearing, options);\n",
			"example": "var pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\nvar distance = 50;\nvar bearing = 90;\nvar options = {units: 'miles'};\n\nvar destination = turf.rhumbDestination(pt, distance, bearing, options);\n\n//addToMap\nvar addToMap = [pt, destination]\ndestination.properties['marker-color'] = '#00F';",
			"hasMap": true,
			"npmName": "@turf/rhumb-destination",
			"returns": [
				{
					"type": "Feature <Point>",
					"desc": "Destination point."
				}
			],
			"params": [
				{
					"Argument": "origin",
					"Type": "Coord",
					"Description": "starting point"
				},
				{
					"Argument": "distance",
					"Type": "number",
					"Description": "distance from the starting point"
				},
				{
					"Argument": "bearing",
					"Type": "number",
					"Description": "varant bearing angle ranging from -180 to 180 degrees from north"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "can be degrees, radians, miles, or kilometers"
				},
				{
					"Prop": "properties",
					"Type": "Object",
					"Default": "{}",
					"Description": "translate properties to destination point"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "rhumbDistance",
			"description": "Calculates the distance along a rhumb line between two  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  in degrees, radians,\nmiles, or kilometers.",
			"snippet": "var from = turf.point([-75.343, 39.984]);\nvar to = turf.point([-75.534, 39.123]);\nvar options = {units: 'miles'};\n\nvar distance = turf.rhumbDistance(from, to, options);\n",
			"example": "var from = turf.point([-75.343, 39.984]);\nvar to = turf.point([-75.534, 39.123]);\nvar options = {units: 'miles'};\n\nvar distance = turf.rhumbDistance(from, to, options);\n\n//addToMap\nvar addToMap = [from, to];\nfrom.properties.distance = distance;\nto.properties.distance = distance;",
			"hasMap": true,
			"npmName": "@turf/rhumb-distance",
			"returns": [
				{
					"type": "number",
					"desc": "distance between the two points"
				}
			],
			"params": [
				{
					"Argument": "from",
					"Type": "Coord",
					"Description": "origin point"
				},
				{
					"Argument": "to",
					"Type": "Coord",
					"Description": "destination point"
				},
				{
					"Argument": "options",
					"Type": "Optional: Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "\"kilometers\"",
					"Description": "can be degrees, radians, miles, or kilometers"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "sample",
			"description": "Takes a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>  and returns a FeatureCollection with given number of  <a target=\"_blank\" href=\"Feature\">features</a>  at random.",
			"snippet": "var points = turf.randomPoint(100, {bbox: [-80, 30, -60, 60]});\n\nvar sample = turf.sample(points, 5);\n",
			"example": "var points = turf.randomPoint(100, {bbox: [-80, 30, -60, 60]});\n\nvar sample = turf.sample(points, 5);\n\n//addToMap\nvar addToMap = [points, sample]\nturf.featureEach(sample, function (currentFeature) {\n  currentFeature.properties['marker-size'] = 'large';\n  currentFeature.properties['marker-color'] = '#000';\n});",
			"hasMap": true,
			"npmName": "@turf/sample",
			"returns": [
				{
					"type": "FeatureCollection",
					"desc": "a FeatureCollection with  n  features"
				}
			],
			"params": [
				{
					"Argument": "featurecollection",
					"Type": "FeatureCollection",
					"Description": "set of input features"
				},
				{
					"Argument": "num",
					"Type": "number",
					"Description": "number of features to select"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "sector",
			"description": "Creates a circular sector of a circle of given radius and center  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a> ,\nbetween (clockwise) bearing1 and bearing2; 0 bearing is North of center point, positive clockwise.",
			"snippet": "var center = turf.point([-75, 40]);\nvar radius = 5;\nvar bearing1 = 25;\nvar bearing2 = 45;\n\nvar sector = turf.sector(center, radius, bearing1, bearing2);\n",
			"example": "var center = turf.point([-75, 40]);\nvar radius = 5;\nvar bearing1 = 25;\nvar bearing2 = 45;\n\nvar sector = turf.sector(center, radius, bearing1, bearing2);\n\n//addToMap\nvar addToMap = [center, sector];",
			"hasMap": true,
			"npmName": "@turf/sector",
			"returns": [
				{
					"type": "Feature <Polygon>",
					"desc": "sector polygon"
				}
			],
			"params": [
				{
					"Argument": "center",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "center point"
				},
				{
					"Argument": "radius",
					"Type": "number",
					"Description": "radius of the circle"
				},
				{
					"Argument": "bearing1",
					"Type": "number",
					"Description": "angle, in decimal degrees, of the first radius of the sector"
				},
				{
					"Argument": "bearing2",
					"Type": "number",
					"Description": "angle, in decimal degrees, of the second radius of the sector"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "miles, kilometers, degrees, or radians"
				},
				{
					"Prop": "steps",
					"Type": "number",
					"Default": "64",
					"Description": "number of steps"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "shortestPath",
			"description": "Returns the shortest  <a target=\"_blank\" href=\"LineString\">path</a>  from  <a target=\"_blank\" href=\"Point\">start</a>  to  <a target=\"_blank\" href=\"Point\">end</a>  without colliding with\nany  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>  in  <a target=\"_blank\" href=\"FeatureCollection<Polygon>\"> obstacles</a>",
			"snippet": "var start = [-5, -6];\nvar end = [9, -6];\nvar options = {\n  obstacles: turf.polygon([[[0, -7], [5, -7], [5, -3], [0, -3], [0, -7]]])\n};\n\nvar path = turf.shortestPath(start, end, options);\n",
			"example": "var start = [-5, -6];\nvar end = [9, -6];\nvar options = {\n  obstacles: turf.polygon([[[0, -7], [5, -7], [5, -3], [0, -3], [0, -7]]])\n};\n\nvar path = turf.shortestPath(start, end, options);\n\n//addToMap\nvar addToMap = [start, end, options.obstacles, path];",
			"hasMap": true,
			"npmName": "@turf/shortest-path",
			"returns": [
				{
					"type": "Feature <LineString>",
					"desc": "shortest path between start and end"
				}
			],
			"params": [
				{
					"Argument": "start",
					"Type": "Coord",
					"Description": "point"
				},
				{
					"Argument": "end",
					"Type": "Coord",
					"Description": "point"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "optional parameters"
				}
			],
			"options": [
				{
					"Prop": "obstacles",
					"Type": "Optional: undefined",
					"Default": null,
					"Description": "areas which path cannot travel"
				},
				{
					"Prop": "minDistance",
					"Type": "Optional: number",
					"Default": null,
					"Description": "minimum distance between shortest path and obstacles"
				},
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "unit in which resolution & minimum distance will be expressed in; it can be degrees, radians, miles, kilometers,..."
				},
				{
					"Prop": "resolution",
					"Type": "number",
					"Default": "100",
					"Description": "distance between matrix points on which the path will be calculated"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "simplify",
			"description": "Takes a  <a target=\"_blank\" href=\"GeoJSON\">GeoJSON</a>  object and returns a simplified version. Internally uses\n <a target=\"_blank\" href=\"http://mourner.github.io/simplify-js/\">simplify-js</a>  to perform simplification.",
			"snippet": "var geojson = turf.polygon([[\n  [-70.603637, -33.399918],\n  [-70.614624, -33.395332],\n  [-70.639343, -33.392466],\n  [-70.659942, -33.394759],\n  [-70.683975, -33.404504],\n  [-70.697021, -33.419406],\n  [-70.701141, -33.434306],\n  [-70.700454, -33.446339],\n  [-70.694274, -33.458369],\n  [-70.682601, -33.465816],\n  [-70.668869, -33.472117],\n  [-70.646209, -33.473835],\n  [-70.624923, -33.472117],\n  [-70.609817, -33.468107],\n  [-70.595397, -33.458369],\n  [-70.587158, -33.442901],\n  [-70.587158, -33.426283],\n  [-70.590591, -33.414248],\n  [-70.594711, -33.406224],\n  [-70.603637, -33.399918]\n]]);\nvar options = {tolerance: 0.01, highQuality: false};\nvar simplified = turf.simplify(geojson, options);\n",
			"example": "var geojson = turf.polygon([[\n  [-70.603637, -33.399918],\n  [-70.614624, -33.395332],\n  [-70.639343, -33.392466],\n  [-70.659942, -33.394759],\n  [-70.683975, -33.404504],\n  [-70.697021, -33.419406],\n  [-70.701141, -33.434306],\n  [-70.700454, -33.446339],\n  [-70.694274, -33.458369],\n  [-70.682601, -33.465816],\n  [-70.668869, -33.472117],\n  [-70.646209, -33.473835],\n  [-70.624923, -33.472117],\n  [-70.609817, -33.468107],\n  [-70.595397, -33.458369],\n  [-70.587158, -33.442901],\n  [-70.587158, -33.426283],\n  [-70.590591, -33.414248],\n  [-70.594711, -33.406224],\n  [-70.603637, -33.399918]\n]]);\nvar options = {tolerance: 0.01, highQuality: false};\nvar simplified = turf.simplify(geojson, options);\n\n//addToMap\nvar addToMap = [geojson, simplified]",
			"hasMap": true,
			"npmName": "@turf/simplify",
			"returns": [
				{
					"type": "GeoJSON",
					"desc": "a simplified GeoJSON"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "object to be simplified"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "tolerance",
					"Type": "number",
					"Default": "1",
					"Description": "simplification tolerance"
				},
				{
					"Prop": "highQuality",
					"Type": "boolean",
					"Default": "false",
					"Description": "whether or not to spend more time to create a higher-quality simplification with a different algorithm"
				},
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "squareGrid",
			"description": "Creates a square grid from a bounding box,  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-objects\">Feature</a>  or  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#feature-collection-objects\">FeatureCollection</a>.",
			"snippet": "var bbox = [-95, 30 ,-85, 40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar squareGrid = turf.squareGrid(bbox, cellSide, options);\n",
			"example": "var bbox = [-95, 30 ,-85, 40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar squareGrid = turf.squareGrid(bbox, cellSide, options);\n\n//addToMap\nvar addToMap = [squareGrid]",
			"hasMap": true,
			"npmName": "@turf/square-grid",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "grid a grid of polygons"
				}
			],
			"params": [
				{
					"Argument": "bbox",
					"Type": "Array <number>",
					"Description": "extent in  minX, minY, maxX, maxY  order"
				},
				{
					"Argument": "cellSide",
					"Type": "number",
					"Description": "of each cell, in units"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "used in calculating cellSide, can be degrees, radians, miles, or kilometers"
				},
				{
					"Prop": "mask",
					"Type": "Optional: undefined",
					"Default": null,
					"Description": "if passed a Polygon or MultiPolygon, the grid Points will be created only inside it"
				},
				{
					"Prop": "properties",
					"Type": "Object",
					"Default": "{}",
					"Description": "passed to each point of the grid"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "square",
			"description": "Takes a bounding box and calculates the minimum square bounding box that\nwould contain the input.",
			"snippet": "var bbox = [-20,-20,-15,0];\nvar squared = turf.square(bbox);\nvar features = turf.featureCollection([\n  turf.bboxPolygon(bbox),\n  turf.bboxPolygon(squared)\n]);\n",
			"example": "var bbox = [-20,-20,-15,0];\nvar squared = turf.square(bbox);\nvar features = turf.featureCollection([\n  turf.bboxPolygon(bbox),\n  turf.bboxPolygon(squared)\n]);\n\n//addToMap\nvar addToMap = [features]",
			"hasMap": true,
			"npmName": "@turf/square",
			"returns": [
				{
					"type": "Array <number>",
					"desc": "a square surrounding  bbox"
				}
			],
			"params": [
				{
					"Argument": "bbox",
					"Type": "Array <number>",
					"Description": "extent in  west, south, east, north  order"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "tag",
			"description": "Takes a set of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  and a set of  <a target=\"_blank\" href=\"Polygon\">polygons</a>  and performs a spatial join.",
			"snippet": "var pt1 = turf.point([-77, 44]);\nvar pt2 = turf.point([-77, 38]);\nvar poly1 = turf.polygon([[\n  [-81, 41],\n  [-81, 47],\n  [-72, 47],\n  [-72, 41],\n  [-81, 41]\n]], {pop: 3000});\nvar poly2 = turf.polygon([[\n  [-81, 35],\n  [-81, 41],\n  [-72, 41],\n  [-72, 35],\n  [-81, 35]\n]], {pop: 1000});\n\nvar points = turf.featureCollection([pt1, pt2]);\nvar polygons = turf.featureCollection([poly1, poly2]);\n\nvar tagged = turf.tag(points, polygons, 'pop', 'population');\n",
			"example": "var pt1 = turf.point([-77, 44]);\nvar pt2 = turf.point([-77, 38]);\nvar poly1 = turf.polygon([[\n  [-81, 41],\n  [-81, 47],\n  [-72, 47],\n  [-72, 41],\n  [-81, 41]\n]], {pop: 3000});\nvar poly2 = turf.polygon([[\n  [-81, 35],\n  [-81, 41],\n  [-72, 41],\n  [-72, 35],\n  [-81, 35]\n]], {pop: 1000});\n\nvar points = turf.featureCollection([pt1, pt2]);\nvar polygons = turf.featureCollection([poly1, poly2]);\n\nvar tagged = turf.tag(points, polygons, 'pop', 'population');\n\n//addToMap\nvar addToMap = [tagged, polygons]",
			"hasMap": true,
			"npmName": "@turf/tag",
			"returns": [
				{
					"type": "FeatureCollection <Point>",
					"desc": "points with  containingPolyId  property containing values from  polyId"
				}
			],
			"params": [
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "input points"
				},
				{
					"Argument": "polygons",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>>",
					"Description": "input polygons"
				},
				{
					"Argument": "field",
					"Type": "string",
					"Description": "property in  polygons  to add to joined { <Point> } features"
				},
				{
					"Argument": "outField",
					"Type": "string",
					"Description": "property in  points  in which to store joined property from  polygons"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "tesselate",
			"description": "Tesselates a  <a target=\"_blank\" href=\"Feature<Polygon>\">Feature<Polygon></a>  into a  <a target=\"_blank\" href=\"FeatureCollection<Polygon>\">FeatureCollection<Polygon></a>  of triangles\nusing  <a target=\"_blank\" href=\"https://github.com/mapbox/earcut\">earcut</a>.",
			"snippet": "var poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\nvar triangles = turf.tesselate(poly);\n",
			"example": "var poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\nvar triangles = turf.tesselate(poly);\n\n//addToMap\nvar addToMap = [poly, triangles]",
			"hasMap": true,
			"npmName": "@turf/tesselate",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "a geometrycollection feature"
				}
			],
			"params": [
				{
					"Argument": "poly",
					"Type": "Feature <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#polygon\">Polygon</a>>",
					"Description": "the polygon to tesselate"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "tin",
			"description": "Takes a set of  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">points</a>  and creates a\n <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Triangulated_irregular_network\">Triangulated Irregular Network</a> ,\nor a TIN for short, returned as a collection of Polygons. These are often used\nfor developing elevation contour maps or stepped heat visualizations.",
			"snippet": "// generate some random point data\nvar points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n\n// add a random property to each point between 0 and 9\nfor (var i = 0; i < points.features.length; i++) {\n  points.features[i].properties.z = ~~(Math.random() * 9);\n}\nvar tin = turf.tin(points, 'z');\n",
			"example": "// generate some random point data\nvar points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n\n// add a random property to each point between 0 and 9\nfor (var i = 0; i < points.features.length; i++) {\n  points.features[i].properties.z = ~~(Math.random() * 9);\n}\nvar tin = turf.tin(points, 'z');\n\n//addToMap\nvar addToMap = [tin, points]\nfor (var i = 0; i < tin.features.length; i++) {\n  var properties  = tin.features[i].properties;\n  properties.fill = '#' + properties.a + properties.b + properties.c;\n}",
			"hasMap": true,
			"npmName": "@turf/tin",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "TIN output"
				}
			],
			"params": [
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "input points"
				},
				{
					"Argument": "z",
					"Type": "Optional: String",
					"Description": "name of the property from which to pull z values\nThis is optional: if not given, then there will be no extra data added to the derived triangles."
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "transformRotate",
			"description": "Rotates any geojson Feature or Geometry of a specified angle, around its  centroid  or a given  pivot  point;\nall rotations follow the right-hand rule:  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Right-hand_rule\">https://en.wikipedia.org/wiki/Right-hand_rule</a>",
			"snippet": "var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar options = {pivot: [0, 25]};\nvar rotatedPoly = turf.transformRotate(poly, 10, options);\n",
			"example": "var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar options = {pivot: [0, 25]};\nvar rotatedPoly = turf.transformRotate(poly, 10, options);\n\n//addToMap\nvar addToMap = [poly, rotatedPoly];\nrotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};",
			"hasMap": true,
			"npmName": "@turf/transform-rotate",
			"returns": [
				{
					"type": "GeoJSON",
					"desc": "the rotated GeoJSON feature"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "object to be rotated"
				},
				{
					"Argument": "angle",
					"Type": "number",
					"Description": "of rotation (along the vertical axis), from North in decimal degrees, negative clockwise"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "pivot",
					"Type": "(Geometry | Feature <Point> | Array <number>)",
					"Default": "'centroid'",
					"Description": "point around which the rotation will be performed"
				},
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "transformScale",
			"description": "Scale a GeoJSON from a given point by a factor of scaling (ex: factor=2 would make the GeoJSON 200% larger).\nIf a FeatureCollection is provided, the origin point will be calculated based on each individual Feature.",
			"snippet": "var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar scaledPoly = turf.transformScale(poly, 3);\n",
			"example": "var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar scaledPoly = turf.transformScale(poly, 3);\n\n//addToMap\nvar addToMap = [poly, scaledPoly];\nscaledPoly.properties = {stroke: '#F00', 'stroke-width': 4};",
			"hasMap": true,
			"npmName": "@turf/transform-scale",
			"returns": [
				{
					"type": "GeoJSON",
					"desc": "scaled GeoJSON"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "GeoJSON to be scaled"
				},
				{
					"Argument": "factor",
					"Type": "number",
					"Description": "of scaling, positive or negative values greater than 0"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "origin",
					"Type": "(string | Geometry | Feature <Point> | Array <number>)",
					"Default": "'centroid'",
					"Description": "Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)"
				},
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "transformTranslate",
			"description": "Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line\non the provided direction angle.",
			"snippet": "var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar translatedPoly = turf.transformTranslate(poly, 100, 35);\n",
			"example": "var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\nvar translatedPoly = turf.transformTranslate(poly, 100, 35);\n\n//addToMap\nvar addToMap = [poly, translatedPoly];\ntranslatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};",
			"hasMap": true,
			"npmName": "@turf/transform-translate",
			"returns": [
				{
					"type": "GeoJSON",
					"desc": "the translated GeoJSON object"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "GeoJSON",
					"Description": "object to be translated"
				},
				{
					"Argument": "distance",
					"Type": "number",
					"Description": "length of the motion; negative values determine motion in opposite direction"
				},
				{
					"Argument": "direction",
					"Type": "number",
					"Description": "of the motion; angle from North in decimal degrees, positive clockwise"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "in which  distance  will be express; miles, kilometers, degrees, or radians"
				},
				{
					"Prop": "zTranslation",
					"Type": "number",
					"Default": "0",
					"Description": "length of the vertical motion, same unit of distance"
				},
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "triangleGrid",
			"description": "Takes a bounding box and a cell depth and returns a set of triangular  <a target=\"_blank\" href=\"Polygon\">polygons</a>  in a grid.",
			"snippet": "var bbox = [-95, 30 ,-85, 40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n",
			"example": "var bbox = [-95, 30 ,-85, 40];\nvar cellSide = 50;\nvar options = {units: 'miles'};\n\nvar triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n\n//addToMap\nvar addToMap = [triangleGrid];",
			"hasMap": true,
			"npmName": "@turf/triangle-grid",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "grid of polygons"
				}
			],
			"params": [
				{
					"Argument": "bbox",
					"Type": "Array <number>",
					"Description": "extent in  minX, minY, maxX, maxY  order"
				},
				{
					"Argument": "cellSide",
					"Type": "number",
					"Description": "dimension of each cell"
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "units",
					"Type": "string",
					"Default": "'kilometers'",
					"Description": "used in calculating cellSide, can be degrees, radians, miles, or kilometers"
				},
				{
					"Prop": "mask",
					"Type": "Optional: undefined",
					"Default": null,
					"Description": "if passed a Polygon or MultiPolygon, the grid Points will be created only inside it"
				},
				{
					"Prop": "properties",
					"Type": "Object",
					"Default": "{}",
					"Description": "passed to each point of the grid"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "truncate",
			"description": "Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.",
			"snippet": "var point = turf.point([\n    70.46923055566859,\n    58.11088890802906,\n    1508\n]);\n\nvar truncated = turf.truncate(point);\n",
			"example": "var point = turf.point([\n    70.46923055566859,\n    58.11088890802906,\n    1508\n]);\n\nvar truncated = turf.truncate(point);\n\n//addToMap\nvar addToMap = [truncated];",
			"hasMap": true,
			"npmName": "@turf/truncate",
			"returns": [
				{
					"type": "(FeatureCollection | Feature <any>)",
					"desc": "layer with truncated geometry"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature <any>)",
					"Description": "any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection."
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "precision",
					"Type": "number",
					"Default": "6",
					"Description": "coordinate decimal precision"
				},
				{
					"Prop": "coordinates",
					"Type": "number",
					"Default": "3",
					"Description": "maximum number of coordinates (primarly used to remove z coordinates)"
				},
				{
					"Prop": "mutate",
					"Type": "boolean",
					"Default": "false",
					"Description": "allows GeoJSON input to be mutated (significant performance increase if true)"
				}
			],
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "union",
			"description": "Takes two or more  <a target=\"_blank\" href=\"Polygon\">polygons</a>  and returns a combined polygon. If the input polygons are not contiguous, this function returns a  <a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#multipolygon\">MultiPolygon</a>  feature.",
			"snippet": "var poly1 = turf.polygon([[\n    [-82.574787, 35.594087],\n    [-82.574787, 35.615581],\n    [-82.545261, 35.615581],\n    [-82.545261, 35.594087],\n    [-82.574787, 35.594087]\n]], {\"fill\": \"#0f0\"});\nvar poly2 = turf.polygon([[\n    [-82.560024, 35.585153],\n    [-82.560024, 35.602602],\n    [-82.52964, 35.602602],\n    [-82.52964, 35.585153],\n    [-82.560024, 35.585153]\n]], {\"fill\": \"#00f\"});\n\nvar union = turf.union(poly1, poly2);\n",
			"example": "var poly1 = turf.polygon([[\n    [-82.574787, 35.594087],\n    [-82.574787, 35.615581],\n    [-82.545261, 35.615581],\n    [-82.545261, 35.594087],\n    [-82.574787, 35.594087]\n]], {\"fill\": \"#0f0\"});\nvar poly2 = turf.polygon([[\n    [-82.560024, 35.585153],\n    [-82.560024, 35.602602],\n    [-82.52964, 35.602602],\n    [-82.52964, 35.585153],\n    [-82.560024, 35.585153]\n]], {\"fill\": \"#00f\"});\n\nvar union = turf.union(poly1, poly2);\n\n//addToMap\nvar addToMap = [poly1, poly2, union];",
			"hasMap": true,
			"npmName": "@turf/union",
			"returns": [
				{
					"type": "Feature <(Polygon | MultiPolygon)>",
					"desc": "a combined  Polygon  or  MultiPolygon  feature"
				}
			],
			"params": [
				{
					"Argument": "A",
					"Description": "polygon to combine"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": null,
			"category": null,
			"name": "unkinkPolygon",
			"description": "Takes a kinked polygon and returns a feature collection of polygons that have no kinks.\nUses  <a target=\"_blank\" href=\"https://github.com/mclaeysb/simplepolygon\">simplepolygon</a>  internally.",
			"snippet": "var poly = turf.polygon([[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]);\n\nvar result = turf.unkinkPolygon(poly);\n",
			"example": "var poly = turf.polygon([[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]);\n\nvar result = turf.unkinkPolygon(poly);\n\n//addToMap\nvar addToMap = [poly, result]",
			"hasMap": true,
			"npmName": "@turf/unkink-polygon",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "Unkinked polygons"
				}
			],
			"params": [
				{
					"Argument": "geojson",
					"Type": "(FeatureCollection | Feature <(Polygon | MultiPolygon)>)",
					"Description": "GeoJSON Polygon or MultiPolygon"
				}
			],
			"options": null,
			"throws": []
		},
		{
			"parent": "@turf/voronoi",
			"category": null,
			"name": "voronoi",
			"description": "Takes a FeatureCollection of points, and a bounding box, and returns a FeatureCollection\nof Voronoi polygons.",
			"snippet": "var options = {\n  bbox: [-70, 40, -60, 60]\n};\nvar points = turf.randomPoint(100, options);\nvar voronoiPolygons = turf.voronoi(points, options);\n",
			"example": "var options = {\n  bbox: [-70, 40, -60, 60]\n};\nvar points = turf.randomPoint(100, options);\nvar voronoiPolygons = turf.voronoi(points, options);\n\n//addToMap\nvar addToMap = [voronoiPolygons, points];",
			"hasMap": true,
			"npmName": "@turf/voronoi",
			"returns": [
				{
					"type": "FeatureCollection <Polygon>",
					"desc": "a set of polygons, one per input point."
				}
			],
			"params": [
				{
					"Argument": "points",
					"Type": "FeatureCollection <<a target=\"_blank\" href=\"http://geojson.org/geojson-spec.html#point\">Point</a>>",
					"Description": "to find the Voronoi polygons around."
				},
				{
					"Argument": "options",
					"Type": "Object",
					"Description": "Optional parameters: see below"
				}
			],
			"options": [
				{
					"Prop": "bbox",
					"Type": "Array <number>",
					"Default": "[-180,-85,180,-85]",
					"Description": "clipping rectangle, in  minX, minY, maxX, MaxY  order."
				}
			],
			"throws": []
		}
	]
}

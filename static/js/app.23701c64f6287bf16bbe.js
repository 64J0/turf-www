webpackJsonp([1],{"+i/C":function(e,r,n){"use strict";var t=n("j19H"),o=n("FOxL"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},"+sOc":function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t),a=n("9Xvl"),i=n("pEmh");r.a={name:"CheckboxGroup",mixins:[i.a],props:{value:{type:Array,default:function(){return[]}},size:{validator:function(e){return n.i(a.b)(e,["small","large","default"])}}},data:function(){return{currentValue:this.value,childrens:[]}},computed:{classes:function(){return["ivu-checkbox-group",o()({},"ivu-checkbox-"+this.size,!!this.size)]}},mounted:function(){this.updateModel(!0)},methods:{updateModel:function(e){var r=this.value;this.childrens=n.i(a.c)(this,"Checkbox"),this.childrens&&this.childrens.forEach(function(n){n.model=r,e&&(n.currentValue=r.indexOf(n.label)>=0,n.group=!0)})},change:function(e){this.currentValue=e,this.$emit("input",e),this.$emit("on-change",e),this.dispatch("FormItem","on-form-change",e)}},watch:{value:function(){this.updateModel(!0)}}}},"0J1z":function(e,r,n){"use strict";var t=n("2iAY"),o=n("eNc0"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},"0UpZ":function(e,r,n){"use strict";var t=n("BeJp"),o=n("4qis"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},"0oBZ":function(e,r){e.exports={_args:[[{raw:"mapbox.js",scope:null,escapedName:"mapbox.js",name:"mapbox.js",rawSpec:"",spec:"latest",type:"tag"},"C:\\code\\turf-www\\template\\turf-template"]],_from:"mapbox.js@latest",_id:"mapbox.js@3.1.1",_inCache:!0,_location:"/mapbox.js",_nodeVersion:"7.7.1",_npmOperationalInternal:{host:"s3://npm-registry-packages",tmp:"tmp/mapbox.js-3.1.1.tgz_1495570579259_0.4753663376905024"},_npmUser:{name:"tristen",email:"tristen.brown@gmail.com"},_npmVersion:"4.1.2",_phantomChildren:{},_requested:{raw:"mapbox.js",scope:null,escapedName:"mapbox.js",name:"mapbox.js",rawSpec:"",spec:"latest",type:"tag"},_requiredBy:["#USER","/"],_resolved:"https://registry.npmjs.org/mapbox.js/-/mapbox.js-3.1.1.tgz",_shasum:"4ebe41bd89b533f507fb3455f4f490e417ea1e8f",_shrinkwrap:null,_spec:"mapbox.js",_where:"C:\\code\\turf-www\\template\\turf-template",author:{name:"Mapbox"},bugs:{url:"https://github.com/mapbox/mapbox.js/issues"},config:{commitizen:{path:"./node_modules/cz-conventional-changelog"}},dependencies:{corslite:"0.0.6",isarray:"0.0.1",leaflet:"1.0.2",mustache:"2.2.1","sanitize-caja":"0.1.4"},description:"mapbox javascript api",devDependencies:{browserify:"^13.0.0","clean-css":"~2.0.7","cz-conventional-changelog":"1.2.0",eslint:"^0.23.0","expect.js":"0.3.1",happen:"0.1.3","leaflet-fullscreen":"0.0.4","leaflet-hash":"0.2.1",marked:"~0.3.0",minifyify:"^6.1.0",minimist:"0.0.5",mocha:"2.4.5","mocha-phantomjs-core":"2.0.1","phantomjs-prebuilt":"2.1.12",sinon:"1.10.2"},directories:{},dist:{shasum:"4ebe41bd89b533f507fb3455f4f490e417ea1e8f",tarball:"https://registry.npmjs.org/mapbox.js/-/mapbox.js-3.1.1.tgz"},engines:{node:"*"},gitHead:"8a52b388a21e7de418c2a61448bf33107c5db766",homepage:"http://mapbox.com/",license:"BSD-3-Clause",main:"src/index.js",maintainers:[{name:"mollymerp",email:"mollylloyd@gmail.com"},{name:"arunasank",email:"aruna@mapbox.com"},{name:"amyleew",email:"amyleewalton@gmail.com"},{name:"mapbox-admin",email:"accounts@mapbox.com"},{name:"mtirwin",email:"irwin@mapbox.com"},{name:"1ec5",email:"mxn@1ec5.org"},{name:"apendleton",email:"andrew@mapbox.com"},{name:"alulsh",email:"ulsh@mapbox.com"},{name:"karenzshea",email:"karen@mapbox.com"},{name:"freenerd",email:"spam@freenerd.de"},{name:"flippmoke",email:"flippmoke@gmail.com"},{name:"bergwerkgis",email:"wb@bergwerk-gis.at"},{name:"themarex",email:"patrick@mapbox.com"},{name:"emilymcafee",email:"emily@mapbox.com"},{name:"jrpruit1",email:"jake@jakepruitt.com"},{name:"sbma44",email:"tlee@mapbox.com"},{name:"scothis",email:"scothis@gmail.com"},{name:"lyzidiamond",email:"lyzi@mapbox.com"},{name:"bhousel",email:"bryan@mapbox.com"},{name:"mcwhittemore",email:"mcwhittemore@gmail.com"},{name:"tristen",email:"tristen.brown@gmail.com"},{name:"ansis",email:"ansis.brammanis@gmail.com"},{name:"yhahn",email:"young@mapbox.com"},{name:"willwhite",email:"will@mapbox.com"},{name:"jfirebaugh",email:"john.firebaugh@gmail.com"},{name:"mourner",email:"agafonkin@gmail.com"},{name:"sgillies",email:"sean@mapbox.com"},{name:"lbud",email:"lauren@mapbox.com"},{name:"bsudekum",email:"bobby@mapbox.com"},{name:"dnomadb",email:"damon@mapbox.com"},{name:"ian29",email:"ian.villeda@gmail.com"},{name:"nickidlugash",email:"nicki@mapbox.com"},{name:"samanbb",email:"saman@mapbox.com"},{name:"ajashton",email:"aj@mapbox.com"},{name:"lxbarth",email:"alex@mapbox.com"},{name:"ianshward",email:"ian@mapbox.com"},{name:"ingalls",email:"nicholas.ingalls@gmail.com"},{name:"miccolis",email:"jeff@miccolis.net"},{name:"gretacb",email:"carol@mapbox.com"},{name:"morganherlocker",email:"morgan.herlocker@gmail.com"},{name:"rclark",email:"ryan.clark.j@gmail.com"},{name:"springmeyer",email:"dane@mapbox.com"},{name:"kkaefer",email:"mail@kkaefer.com"}],name:"mapbox.js",optionalDependencies:{},readme:"ERROR: No README data found!",repository:{type:"git",url:"git://github.com/mapbox/mapbox.js.git"},scripts:{test:"eslint --no-eslintrc -c .eslintrc src && phantomjs node_modules/mocha-phantomjs-core/mocha-phantomjs-core.js test/index.html"},version:"3.1.1"}},"1pZ/":function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t);r.a={props:{row:Object,prefixCls:String},computed:{objData:function(){return this.$parent.objData}},methods:{rowClasses:function(e){var r;return[this.prefixCls+"-row",this.rowClsName(e),(r={},o()(r,this.prefixCls+"-row-highlight",this.objData[e]&&this.objData[e]._isHighlight),o()(r,this.prefixCls+"-row-hover",this.objData[e]&&this.objData[e]._isHover),r)]},rowClsName:function(e){return this.$parent.$parent.rowClassName(this.objData[e],e)}}}},"2BZS":function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("div",{directives:[{name:"clickoutside",rawName:"v-clickoutside",value:e.handleClose,expression:"handleClose"}],class:e.classes},[n("div",{ref:"reference",class:e.selectionCls,on:{click:e.toggleMenu}},[e._t("input",[n("input",{attrs:{type:"hidden",name:e.name},domProps:{value:e.model}}),e._v(" "),e._l(e.selectedMultiple,function(r,t){return n("div",{staticClass:"ivu-tag"},[n("span",{staticClass:"ivu-tag-text"},[e._v(e._s(r.label))]),e._v(" "),n("Icon",{attrs:{type:"ios-close-empty"},nativeOn:{click:function(r){r.stopPropagation(),e.removeTag(t)}}})],1)}),e._v(" "),n("span",{directives:[{name:"show",rawName:"v-show",value:e.showPlaceholder&&!e.filterable,expression:"showPlaceholder && !filterable"}],class:[e.prefixCls+"-placeholder"]},[e._v(e._s(e.localePlaceholder))]),e._v(" "),n("span",{directives:[{name:"show",rawName:"v-show",value:!e.showPlaceholder&&!e.multiple&&!e.filterable,expression:"!showPlaceholder && !multiple && !filterable"}],class:[e.prefixCls+"-selected-value"]},[e._v(e._s(e.selectedSingle))]),e._v(" "),e.filterable?n("input",{directives:[{name:"model",rawName:"v-model",value:e.query,expression:"query"}],ref:"input",class:[e.prefixCls+"-input"],style:e.inputStyle,attrs:{id:e.elementId,type:"text",disabled:e.disabled,placeholder:e.showPlaceholder?e.localePlaceholder:""},domProps:{value:e.query},on:{blur:e.handleBlur,keydown:[e.resetInputState,function(r){if(!("button"in r)&&e._k(r.keyCode,"delete",[8,46]))return null;e.handleInputDelete(r)}],input:function(r){r.target.composing||(e.query=r.target.value)}}}):e._e(),e._v(" "),n("Icon",{directives:[{name:"show",rawName:"v-show",value:e.showCloseIcon,expression:"showCloseIcon"}],class:[e.prefixCls+"-arrow"],attrs:{type:"ios-close"},nativeOn:{click:function(r){r.stopPropagation(),e.clearSingleSelect(r)}}}),e._v(" "),e.remote?e._e():n("Icon",{class:[e.prefixCls+"-arrow"],attrs:{type:"arrow-down-b"}})])],2),e._v(" "),n("transition",{attrs:{name:e.transitionName}},[n("Drop",{directives:[{name:"show",rawName:"v-show",value:e.dropVisible,expression:"dropVisible"},{name:"transfer-dom",rawName:"v-transfer-dom"}],ref:"dropdown",class:e.dropdownCls,attrs:{placement:e.placement,"data-transfer":e.transfer}},[n("ul",{directives:[{name:"show",rawName:"v-show",value:e.notFoundShow,expression:"notFoundShow"}],class:[e.prefixCls+"-not-found"]},[n("li",[e._v(e._s(e.localeNotFoundText))])]),e._v(" "),n("ul",{directives:[{name:"show",rawName:"v-show",value:!e.notFound&&!e.remote||e.remote&&!e.loading&&!e.notFound,expression:"(!notFound && !remote) || (remote && !loading && !notFound)"}],class:[e.prefixCls+"-dropdown-list"]},[e._t("default")],2),e._v(" "),n("ul",{directives:[{name:"show",rawName:"v-show",value:e.loading,expression:"loading"}],class:[e.prefixCls+"-loading"]},[e._v(e._s(e.localeLoadingText))])])],1)],1)},o=[],a={render:t,staticRenderFns:o};r.a=a},"2LA7":function(e,r){e.exports={sidebar:[{isHeading:!0,name:"Measurement",hidden:!1},{isHeading:!1,name:"along",hidden:!1},{isHeading:!1,name:"area",hidden:!1},{isHeading:!1,name:"bbox",hidden:!1},{isHeading:!1,name:"bboxPolygon",hidden:!1},{isHeading:!1,name:"bearing",hidden:!1},{isHeading:!1,name:"center",hidden:!1},{isHeading:!1,name:"centerOfMass",hidden:!1},{isHeading:!1,name:"centroid",hidden:!1},{isHeading:!1,name:"destination",hidden:!1},{isHeading:!1,name:"distance",hidden:!1},{isHeading:!1,name:"envelope",hidden:!1},{isHeading:!1,name:"lineDistance",hidden:!1},{isHeading:!1,name:"midpoint",hidden:!1},{isHeading:!1,name:"pointOnSurface",hidden:!1},{isHeading:!1,name:"polygonTangents",hidden:!1},{isHeading:!1,name:"rhumbBearing",hidden:!1},{isHeading:!1,name:"rhumbDestination",hidden:!1},{isHeading:!1,name:"rhumbDistance",hidden:!1},{isHeading:!1,name:"square",hidden:!1},{isHeading:!1,name:"greatCircle",hidden:!1},{isHeading:!0,name:"Coordinate Mutation",hidden:!1},{isHeading:!1,name:"flip",hidden:!1},{isHeading:!1,name:"rewind",hidden:!1},{isHeading:!1,name:"round",hidden:!1},{isHeading:!1,name:"truncate",hidden:!1},{isHeading:!0,name:"Transformation",hidden:!1},{isHeading:!1,name:"bboxClip",hidden:!1},{isHeading:!1,name:"bezier",hidden:!1},{isHeading:!1,name:"buffer",hidden:!1},{isHeading:!1,name:"circle",hidden:!1},{isHeading:!1,name:"concave",hidden:!1},{isHeading:!1,name:"convex",hidden:!1},{isHeading:!1,name:"difference",hidden:!1},{isHeading:!1,name:"dissolve",hidden:!1},{isHeading:!1,name:"intersect",hidden:!1},{isHeading:!1,name:"lineOffset",hidden:!1},{isHeading:!1,name:"simplify",hidden:!1},{isHeading:!1,name:"tesselate",hidden:!1},{isHeading:!1,name:"union",hidden:!1},{isHeading:!0,name:"Feature Conversion",hidden:!1},{isHeading:!1,name:"combine",hidden:!1},{isHeading:!1,name:"explode",hidden:!1},{isHeading:!1,name:"flatten",hidden:!1},{isHeading:!1,name:"lineStringToPolygon",hidden:!1},{isHeading:!1,name:"polygonize",hidden:!1},{isHeading:!1,name:"polygonToLineString",hidden:!1},{isHeading:!0,name:"Misc",hidden:!1},{isHeading:!1,name:"kinks",hidden:!1},{isHeading:!1,name:"lineArc",hidden:!1},{isHeading:!1,name:"lineChunk",hidden:!1},{isHeading:!1,name:"lineIntersect",hidden:!1},{isHeading:!1,name:"lineOverlap",hidden:!1},{isHeading:!1,name:"lineSegment",hidden:!1},{isHeading:!1,name:"lineSlice",hidden:!1},{isHeading:!1,name:"lineSliceAlong",hidden:!1},{isHeading:!1,name:"lineSplit",hidden:!1},{isHeading:!1,name:"mask",hidden:!1},{isHeading:!1,name:"pointOnLine",hidden:!1},{isHeading:!1,name:"sector",hidden:!1},{isHeading:!1,name:"unkinkPolygon",hidden:!1},{isHeading:!0,name:"Helper",hidden:!1},{isHeading:!1,name:"featureCollection",hidden:!1},{isHeading:!1,name:"feature",hidden:!1},{isHeading:!1,name:"geometryCollection",hidden:!1},{isHeading:!1,name:"lineString",hidden:!1},{isHeading:!1,name:"multiLineString",hidden:!1},{isHeading:!1,name:"multiPoint",hidden:!1},{isHeading:!1,name:"multiPolygon",hidden:!1},{isHeading:!1,name:"point",hidden:!1},{isHeading:!1,name:"polygon",hidden:!1},{isHeading:!0,name:"Data",hidden:!1},{isHeading:!1,name:"random",hidden:!1},{isHeading:!1,name:"sample",hidden:!1},{isHeading:!0,name:"Interpolation",hidden:!1},{isHeading:!1,name:"isobands",hidden:!1},{isHeading:!1,name:"isolines",hidden:!1},{isHeading:!1,name:"planepoint",hidden:!1},{isHeading:!1,name:"tin",hidden:!1},{isHeading:!1,name:"idw",hidden:!1},{isHeading:!0,name:"Joins",hidden:!1},{isHeading:!1,name:"inside",hidden:!1},{isHeading:!1,name:"within",hidden:!1},{isHeading:!1,name:"tag",hidden:!1},{isHeading:!0,name:"Grids",hidden:!1},{isHeading:!1,name:"hexGrid",hidden:!1},{isHeading:!1,name:"pointGrid",hidden:!1},{isHeading:!1,name:"squareGrid",hidden:!1},{isHeading:!1,name:"triangleGrid",hidden:!1},{isHeading:!0,name:"Classification",hidden:!1},{isHeading:!1,name:"nearest",hidden:!1},{isHeading:!0,name:"Aggregation",hidden:!1},{isHeading:!1,name:"collect",hidden:!1},{isHeading:!0,name:"Meta",hidden:!1},{isHeading:!1,name:"coordAll",hidden:!1},{isHeading:!1,name:"coordEach",hidden:!1},{isHeading:!1,name:"coordReduce",hidden:!1},{isHeading:!1,name:"featureEach",hidden:!1},{isHeading:!1,name:"featureReduce",hidden:!1},{isHeading:!1,name:"flattenEach",hidden:!1},{isHeading:!1,name:"flattenReduce",hidden:!1},{isHeading:!1,name:"getCoord",hidden:!1},{isHeading:!1,name:"getCoords",hidden:!1},{isHeading:!1,name:"getGeom",hidden:!1},{isHeading:!1,name:"getGeomType",hidden:!1},{isHeading:!1,name:"geomEach",hidden:!1},{isHeading:!1,name:"geomReduce",hidden:!1},{isHeading:!1,name:"propEach",hidden:!1},{isHeading:!1,name:"propReduce",hidden:!1},{isHeading:!0,name:"Assertions",hidden:!1},{isHeading:!1,name:"collectionOf",hidden:!1},{isHeading:!1,name:"containsNumber",hidden:!1},{isHeading:!1,name:"geojsonType",hidden:!1},{isHeading:!1,name:"featureOf",hidden:!1},{isHeading:!0,name:"Booleans",hidden:!1},{isHeading:!1,name:"booleanClockwise",hidden:!1},{isHeading:!1,name:"booleanContains",hidden:!1},{isHeading:!1,name:"booleanCrosses",hidden:!1},{isHeading:!1,name:"booleanDisjoint",hidden:!1},{isHeading:!0,name:"Unit Conversion",hidden:!1},{isHeading:!1,name:"bearingToAngle",hidden:!1},{isHeading:!1,name:"convertDistance",hidden:!1},{isHeading:!1,name:"degrees2radians",hidden:!1},{isHeading:!1,name:"distanceToRadians",hidden:!1},{isHeading:!1,name:"distanceToDegrees",hidden:!1},{isHeading:!1,name:"radiansToDistance",hidden:!1},{isHeading:!1,name:"radians2degrees",hidden:!1},{isHeading:!1,name:"clusters",hidden:!1},{isHeading:!1,name:"removeEmptyPolygon",hidden:!1},{isHeading:!1,name:"ab",hidden:!1},{isHeading:!1,name:"rotate",hidden:!1},{isHeading:!1,name:"scale",hidden:!1},{isHeading:!1,name:"translate",hidden:!1}],modules:[{name:"along",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">line</a>  and returns a  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">point</a>  at a specified distance along the line.',parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[-83, 30], [-84, 36], [-78, 41]]\r\n  }\r\n};\r\n\r\nvar along = turf.along(line, 200, \'miles\');\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[-83, 30], [-84, 36], [-78, 41]]\r\n  }\r\n};\r\n\r\nvar along = turf.along(line, 200, \'miles\');\r\n\r\n//addToMap\r\nvar addToMap = [along, line]',hasMap:!0,npmName:"along",returns:[{type:"Feature 〈Point〉",desc:"Point  distance   units  along the line"}],params:[{Argument:"line",Type:"Feature 〈LineString〉",Description:"input line"},{Argument:"distance",Type:"number",Description:"distance along the line"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers"}],throws:[]},{name:"area",description:"Takes one or more features and returns their area in square meters.",parent:null,snippet:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]\r\n  }\r\n}\r\nvar area = turf.area(polygon);\r\n',example:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]\r\n  }\r\n}\r\nvar area = turf.area(polygon);\r\n\r\n//addToMap\r\npolygon.properties.area = area\r\nvar addToMap = [polygon]',hasMap:!0,npmName:"area",returns:[{type:"number",desc:"area in square meters"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Feature 〈any〉 )",Description:"input GeoJSON feature(s)"}],throws:[]},{name:"bbox",description:"Takes a set of features, calculates the bbox of all input features, and returns a bounding box.",parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[-74, 40], [-78, 42], [-82, 35]]\r\n  }\r\n}\r\nvar bbox = turf.bbox(line);\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[-74, 40], [-78, 42], [-82, 35]]\r\n  }\r\n}\r\nvar bbox = turf.bbox(line);\r\n\r\n//addToMap\r\nvar bboxPolygon = turf.bboxPolygon(bbox);\r\nvar addToMap = [line, bboxPolygon]',hasMap:!0,npmName:"bbox",returns:[{type:"Array 〈number〉",desc:"bbox extent in  minX, minY, maxX, maxY  order"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Feature 〈any〉 )",Description:"input features"}],throws:[]},{name:"bboxPolygon",description:'Takes a bbox and returns an equivalent  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">polygon</a>.',parent:null,snippet:"var bbox = [0, 0, 10, 10];\r\n\r\nvar poly = turf.bboxPolygon(bbox);\r\n",example:"var bbox = [0, 0, 10, 10];\r\n\r\nvar poly = turf.bboxPolygon(bbox);\r\n\r\n//addToMap\r\nvar addToMap = [poly]",hasMap:!0,npmName:"bbox-polygon",returns:[{type:"Feature 〈Polygon〉",desc:"a Polygon representation of the bounding box"}],params:[{Argument:"bbox",Type:"Array 〈number〉",Description:"extent in  minX, minY, maxX, maxY  order"}],throws:[]},{name:"bearing",description:'Takes two  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  and finds the geographic bearing between them,\ni.e. the angle measured in degrees from the north line (0 degrees)',parent:null,snippet:'var point1 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar point2 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.534, 39.123]\r\n  }\r\n};\r\n\r\nvar bearing = turf.bearing(point1, point2);\r\n',example:'var point1 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar point2 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.534, 39.123]\r\n  }\r\n};\r\n\r\nvar bearing = turf.bearing(point1, point2);\r\n\r\n//addToMap\r\nvar addToMap = [point1, point2]\r\npoint1.properties[\'marker-color\'] = \'#f00\'\r\npoint2.properties[\'marker-color\'] = \'#0f0\'\r\npoint1.properties.bearing = bearing',hasMap:!0,npmName:"bearing",returns:[{type:"number",desc:"bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)"}],params:[{Argument:"start",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"starting Point"},{Argument:"end",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"ending Point"},{Argument:"final",Type:"boolean",Description:"calculates the final bearing if true"}],throws:[]},{name:"center",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-objects">Feature</a>  or  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  and returns the absolute center point of all features.',parent:null,snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-97.522259, 35.4691]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-97.502754, 35.463455]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-97.508269, 35.463245]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar center = turf.center(features);\r\n',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-97.522259, 35.4691]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-97.502754, 35.463455]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-97.508269, 35.463245]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar center = turf.center(features);\r\n\r\n//addToMap\r\ncenter.properties[\'marker-size\'] = \'large\';\r\ncenter.properties[\'marker-color\'] = \'#000\';\r\nvar addToMap = [features, center]',hasMap:!0,npmName:"center",returns:[{type:"Feature 〈Point〉",desc:"a Point feature at the absolute center point of all input features"}],params:[{Argument:"geojson",Type:"GeoJSON",Description:"GeoJSON to be centered"},{Argument:"properties",Type:"Optional: Object",Description:"an Object that is used as the  Feature 's properties"}],throws:[]},{name:"centerOfMass",description:'Takes any  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-objects">Feature</a>  or a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  and returns its  <a target="_blank" href="https://en.wikipedia.org/wiki/Center_of_mass">center of mass</a>  using this formula:  <a target="_blank" href="https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon">Centroid of Polygon</a>.',parent:null,snippet:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]\r\n  }\r\n};\r\n\r\nvar center = turf.centerOfMass(polygon);\r\n',example:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]\r\n  }\r\n};\r\n\r\nvar center = turf.centerOfMass(polygon);\r\n\r\n//addToMap\r\nvar addToMap = [polygon, center]',hasMap:!0,npmName:"center-of-mass",returns:[{type:"Feature 〈Point〉",desc:"the center of mass"}],params:[{Argument:"geojson",Type:"GeoJSON",Description:"GeoJSON to be centered"},{Argument:"properties",Type:"Optional: Object",Description:"an Object that is used as the  Feature 's properties"}],throws:[]},{name:"centroid",description:"Takes one or more features and calculates the centroid using the mean of all vertices.\nThis lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.",parent:null,snippet:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]\r\n  }\r\n};\r\n\r\nvar centroid = turf.centroid(polygon);\r\n',example:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]\r\n  }\r\n};\r\n\r\nvar centroid = turf.centroid(polygon);\r\n\r\n//addToMap\r\nvar addToMap = [polygon, centroid]',hasMap:!0,npmName:"centroid",returns:[{type:"Feature 〈Point〉",desc:"the centroid of the input features"}],params:[{Argument:"geojson",Type:"GeoJSON",Description:"GeoJSON to be centered"},{Argument:"properties",Type:"Optional: Object",Description:"an Object that is used as the  Feature 's properties"}],throws:[]},{name:"destination",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the  <a target="_blank" href="http://en.wikipedia.org/wiki/Haversine_formula">Haversine formula</a>  to account for global curvature.',parent:null,snippet:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar distance = 50;\r\nvar bearing = 90;\r\nvar units = \'miles\';\r\n\r\nvar destination = turf.destination(point, distance, bearing, units);\r\n',example:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar distance = 50;\r\nvar bearing = 90;\r\nvar units = \'miles\';\r\n\r\nvar destination = turf.destination(point, distance, bearing, units);\r\n\r\n//addToMap\r\ndestination.properties[\'marker-color\'] = \'#f00\';\r\npoint.properties[\'marker-color\'] = \'#0f0\';\r\nvar addToMap = [point, destination]',hasMap:!0,npmName:"destination",returns:[{type:"Feature 〈Point〉",desc:"destination point"}],params:[{Argument:"origin",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"starting point"},{Argument:"distance",Type:"number",Description:"distance from the origin point"},{Argument:"bearing",Type:"number",Description:"ranging from -180 to 180"},{Argument:"units",Type:"string",Description:"miles, kilometers, degrees, or radians"}],throws:[]},{name:"distance",description:'Calculates the distance between two  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  in degrees, radians,\nmiles, or kilometers. This uses the\n <a target="_blank" href="http://en.wikipedia.org/wiki/Haversine_formula">Haversine formula</a> \nto account for global curvature.',parent:null,snippet:'var from = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar to = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.534, 39.123]\r\n  }\r\n};\r\n\r\nvar distance = turf.distance(from, to, "miles");\r\n',example:'var from = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar to = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.534, 39.123]\r\n  }\r\n};\r\n\r\nvar distance = turf.distance(from, to, "miles");\r\n\r\n//addToMap\r\nfrom.properties.distance = distance;\r\nto.properties.distance = distance;\r\nvar addToMap = [from, to];',hasMap:!0,npmName:"distance",returns:[{type:"number",desc:"distance between the two points"}],params:[{Argument:"from",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"origin point"},{Argument:"to",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"destination point"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers"}],throws:[]},{name:"envelope",description:'Takes any number of features and returns a rectangular  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a>  that encompasses all vertices.',parent:null,snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {\r\n        "name": "Location A"\r\n      },\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-75.343, 39.984]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {\r\n        "name": "Location B"\r\n      },\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-75.833, 39.284]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {\r\n        "name": "Location C"\r\n      },\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-75.534, 39.123]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar enveloped = turf.envelope(features);\r\n',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {\r\n        "name": "Location A"\r\n      },\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-75.343, 39.984]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {\r\n        "name": "Location B"\r\n      },\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-75.833, 39.284]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {\r\n        "name": "Location C"\r\n      },\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-75.534, 39.123]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar enveloped = turf.envelope(features);\r\n\r\n//addToMap\r\nvar addToMap = [features, enveloped]',hasMap:!0,npmName:"envelope",returns:[{type:"Feature 〈Polygon〉",desc:"a rectangular Polygon feature that encompasses all vertices"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Feature 〈any〉 )",Description:"input features"}],throws:[]},{name:"lineDistance",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">LineString</a>  or  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a>  and measures its length in the specified units.',parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [\r\n      [-77.031669, 38.878605],\r\n      [-77.029609, 38.881946],\r\n      [-77.020339, 38.884084],\r\n      [-77.025661, 38.885821],\r\n      [-77.021884, 38.889563],\r\n      [-77.019824, 38.892368]\r\n    ]\r\n  }\r\n};\r\n\r\nvar length = turf.lineDistance(line, \'miles\');\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [\r\n      [-77.031669, 38.878605],\r\n      [-77.029609, 38.881946],\r\n      [-77.020339, 38.884084],\r\n      [-77.025661, 38.885821],\r\n      [-77.021884, 38.889563],\r\n      [-77.019824, 38.892368]\r\n    ]\r\n  }\r\n};\r\n\r\nvar length = turf.lineDistance(line, \'miles\');\r\n\r\n//addToMap\r\nline.properties.distance = length;\r\nvar addToMap = [line];',hasMap:!0,npmName:"line-distance",returns:[{type:"number",desc:"length feature"}],params:[{Argument:"geojson",Type:"( Feature 〈〉 | FeatureCollection 〈〉 )",Description:"feature to measure"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers"}],throws:[]},{name:"midpoint",description:'Takes two  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  and returns a point midway between them.\nThe midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.',parent:null,snippet:'var pt1 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [144.834823, -37.771257]\r\n  }\r\n};\r\nvar pt2 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [145.14244, -37.830937]\r\n  }\r\n};\r\n\r\nvar midpoint = turf.midpoint(pt1, pt2);\r\n',example:'var pt1 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [144.834823, -37.771257]\r\n  }\r\n};\r\nvar pt2 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [145.14244, -37.830937]\r\n  }\r\n};\r\n\r\nvar midpoint = turf.midpoint(pt1, pt2);\r\n\r\n//addToMap\r\nmidpoint.properties[\'marker-color\'] = \'#f00\';\r\nvar addToMap = [pt1, pt2, midpoint];',hasMap:!0,npmName:"midpoint",returns:[{type:"Feature 〈Point〉",desc:"a point midway between  pt1  and  pt2"}],params:[{Argument:"from",Type:"Feature 〈Point〉",Description:"first point"},{Argument:"to",Type:"Feature 〈Point〉",Description:"second point"}],throws:[]},{name:"pointOnSurface",description:'Takes a feature and returns a  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  guaranteed to be on the surface of the feature.',parent:null,snippet:"// create a random polygon\r\nvar polygon = turf.random('polygon');\r\n\r\nvar pointOnPolygon = turf.pointOnSurface(polygon);\r\n",example:"// create a random polygon\r\nvar polygon = turf.random('polygon');\r\n\r\nvar pointOnPolygon = turf.pointOnSurface(polygon);\r\n\r\n//addToMap\r\nvar addToMap = [polygon, pointOnPolygon];",hasMap:!0,npmName:"point-on-surface",returns:[{type:"Feature",desc:"a point on the surface of  input"}],params:[{Argument:"fc",Type:"( Feature | FeatureCollection )",Description:"any feature or set of features"}],throws:[]},{name:"polygonTangents",description:'Finds the tangents of a  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">(Multi)Polygon</a>  from a  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>.',parent:null,snippet:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]\r\n  }\r\n}\r\nvar point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [61, 5]\r\n  }\r\n}\r\nvar tangents = turf.polygonTangents(point, polygon)',example:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]\r\n  }\r\n}\r\nvar point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [61, 5]\r\n  }\r\n}\r\nvar tangents = turf.polygonTangents(point, polygon)\r\n//addToMap\r\nvar addToMap = [tangents, point, polygon];',hasMap:!0,npmName:"polygon-tangents",returns:[{type:"FeatureCollection 〈Point〉",desc:"Feature Collection containing the two tangent points"}],params:[{Argument:"point",Type:"Feature 〈Point〉",Description:"to calculate the tangent points from"},{Argument:"polygon",Type:"Feature 〈〉",Description:"to get tangents from"}],throws:[]},{name:"rhumbBearing",description:'Takes two  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  and finds the bearing angle between them along a Rhumb line\ni.e. the angle measured in degrees start the north line (0 degrees)',parent:null,snippet:'var point1 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "marker-color": "#F00"\r\n  },\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar point2 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "marker-color": "#00F"\r\n  },\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.534, 39.123]\r\n  }\r\n};\r\n\r\nvar bearing = turf.rhumbBearing(point1, point2);\r\n',example:'var point1 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "marker-color": "#F00"\r\n  },\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar point2 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "marker-color": "#00F"\r\n  },\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.534, 39.123]\r\n  }\r\n};\r\n\r\nvar bearing = turf.rhumbBearing(point1, point2);\r\n\r\n//addToMap\r\npoint1.properties.bearing = bearing\r\npoint2.properties.bearing = bearing\r\nvar addToMap = [point1, point2]',hasMap:!0,npmName:"rhumb-bearing",returns:[{type:"number",desc:"bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise)"}],params:[{Argument:"start",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"starting Point"},{Argument:"end",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"ending Point"},{Argument:"final",Type:"boolean",Description:"calculates the final bearing if true"}],throws:[]},{name:"rhumbDestination",description:'Returns the destination  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  having travelled the given distance along a Rhumb line from the\norigin Point with the (constant) given bearing.',parent:null,snippet:'var point = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "marker-color": "F00"\r\n  },\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar distance = 50;\r\nvar bearing = 90;\r\nvar units = \'miles\';\r\n\r\nvar destination = turf.rhumbDestination(point, distance, bearing, units);\r\n',example:'var point = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "marker-color": "F00"\r\n  },\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar distance = 50;\r\nvar bearing = 90;\r\nvar units = \'miles\';\r\n\r\nvar destination = turf.rhumbDestination(point, distance, bearing, units);\r\n\r\n//addToMap\r\ndestination.properties[\'marker-color\'] = \'#00F\';\r\nvar addToMap = [point, destination]',hasMap:!0,npmName:"rhumb-destination",returns:[{type:"Feature 〈Point〉",desc:"Destination point."}],params:[{Argument:"origin",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"starting point"},{Argument:"distance",Type:"number",Description:"distance from the starting point"},{Argument:"bearing",Type:"number",Description:"constant bearing angle ranging from -180 to 180 degrees from north"},{Argument:"units",Type:"string",Description:"miles, kilometers, degrees, or radians"}],throws:[]},{name:"rhumbDistance",description:'Calculates the distance along a rhumb line between two  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  in degrees, radians,\nmiles, or kilometers.',parent:null,snippet:'var from = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar to = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.534, 39.123]\r\n  }\r\n};\r\n\r\nvar distance = turf.rhumbDistance(from, to, "miles");\r\n',example:'var from = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.343, 39.984]\r\n  }\r\n};\r\nvar to = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.534, 39.123]\r\n  }\r\n};\r\n\r\nvar distance = turf.rhumbDistance(from, to, "miles");\r\n\r\n//addToMap\r\nfrom.properties.distance = distance;\r\nto.properties.distance = distance;\r\nvar addToMap = [from, to];',hasMap:!0,npmName:"rhumb-distance",returns:[{type:"number",desc:"distance between the two points"}],params:[{Argument:"from",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"origin point"},{Argument:"to",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"destination point"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers"}],throws:[]},{name:"square",description:"Takes a bounding box and calculates the minimum square bounding box that\nwould contain the input.",parent:null,snippet:'var bbox = [-20,-20,-15,0];\r\n\r\nvar squared = turf.square(bbox);\r\n\r\nvar features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    turf.bboxPolygon(bbox),\r\n    turf.bboxPolygon(squared)\r\n  ]\r\n};\r\n',example:'var bbox = [-20,-20,-15,0];\r\n\r\nvar squared = turf.square(bbox);\r\n\r\nvar features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    turf.bboxPolygon(bbox),\r\n    turf.bboxPolygon(squared)\r\n  ]\r\n};\r\n\r\n//addToMap\r\nvar addToMap = [features]',hasMap:!0,npmName:"square",returns:[{type:"Array 〈number〉",desc:"a square surrounding  bbox"}],params:[{Argument:"bbox",Type:"Array 〈number〉",Description:"extent in  west, south, east, north  order"}],throws:[]},{name:"greatCircle",description:'Calculate great circles routes as  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">LineString</a>',parent:null,snippet:'var start = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-122, 48]\r\n  }\r\n}\r\nvar end = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-77, 39]\r\n  }\r\n}\r\nvar greatCircle = turf.greatCircle(start, end, {\'name\': \'Seattle to DC\'});\r\n',example:'var start = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-122, 48]\r\n  }\r\n}\r\nvar end = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-77, 39]\r\n  }\r\n}\r\nvar greatCircle = turf.greatCircle(start, end, {\'name\': \'Seattle to DC\'});\r\n\r\n//addToMap\r\nvar addToMap = [start, end, greatCircle]',hasMap:!0,npmName:"great-circle",returns:[{type:"Feature 〈LineString〉",desc:"great circle line feature"}],params:[{Argument:"start",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"source point feature"},{Argument:"end",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"destination point feature"},{Argument:"properties",Type:"Object",Description:"line feature properties"},{Argument:"npoints",Type:"number",Description:"number of points"},{Argument:"offset",Type:"number",Description:"offset controls the likelyhood that lines will\nbe split which cross the dateline. The higher the number the more likely."}],throws:[]},{name:"flip",description:"Takes input features and flips all of their coordinates from  [x, y]  to  [y, x].",parent:null,snippet:'var serbia = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [20.566406, 43.421008]\r\n  }\r\n};\r\n\r\nvar saudiArabia = turf.flip(serbia);\r\n',example:'var serbia = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [20.566406, 43.421008]\r\n  }\r\n};\r\n\r\nvar saudiArabia = turf.flip(serbia);\r\n\r\n//addToMap\r\nvar addToMap = [serbia, saudiArabia]',hasMap:!0,npmName:"flip",returns:[{type:"( FeatureCollection | Feature 〈any〉 )",desc:"a feature or set of features of the same type as  input  with flipped coordinates"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Feature 〈any〉 )",Description:"input features"},{Argument:"mutate",Type:"boolean",Description:"allows GeoJSON input to be mutated (significant performance increase if true)"}],throws:[]},{name:"rewind",description:'Rewind  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">(Multi)LineString</a>  or  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">(Multi)Polygon</a>  outer ring counterclockwise and inner rings clockwise (Uses  <a target="_blank" href="http://en.wikipedia.org/wiki/Shoelace_formula">Shoelace Formula</a> ).',parent:null,snippet:'var polygon = {\r\n    "type": "Feature",\r\n    "properties": {},\r\n    "geometry": {\r\n        "type": "Polygon",\r\n        "coordinates": [\r\n            [[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]\r\n        ]\r\n    }\r\n};\r\nvar rewind = turf.rewind(polygon);\r\n',example:'var polygon = {\r\n    "type": "Feature",\r\n    "properties": {},\r\n    "geometry": {\r\n        "type": "Polygon",\r\n        "coordinates": [\r\n            [[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]\r\n        ]\r\n    }\r\n};\r\nvar rewind = turf.rewind(polygon);\r\n\r\n//addToMap\r\nvar addToMap = [rewind];',hasMap:!0,npmName:"rewind",returns:[{type:"( FeatureCollection | Geometry | Feature 〈〉 )",desc:"rewind Polygon"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Geometry | Feature 〈〉 )",Description:"input GeoJSON Polygon"},{Argument:"reverse",Type:"Boolean",Description:"enable reverse winding"},{Argument:"mutate",Type:"boolean",Description:"allows GeoJSON input to be mutated (significant performance increase if true)"}],throws:[]},{name:"round",description:"Round number to precision",parent:"helpers",snippet:"round(120.4321)\r\n//=120\r\n\r\nround(120.4321, 2)\r\n//=120.43",example:"round(120.4321)\r\n//=120\r\n\r\nround(120.4321, 2)\r\n//=120.43",hasMap:!1,npmName:"helpers",returns:[{type:"number",desc:"rounded number"}],params:[{Argument:"num",Type:"number",Description:"Number"},{Argument:"precision",Type:"number",Description:"Precision"}],throws:[]},{name:"truncate",description:"Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.",parent:null,snippet:'var point = {\r\n    "type": "Feature",\r\n    "properties": {}\r\n    "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [\r\n            70.46923055566859,\r\n            58.11088890802906,\r\n            1508\r\n        ]\r\n    }\r\n};\r\nvar truncated = turf.truncate(point);\r\n',example:'var point = {\r\n    "type": "Feature",\r\n    "properties": {}\r\n    "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [\r\n            70.46923055566859,\r\n            58.11088890802906,\r\n            1508\r\n        ]\r\n    }\r\n};\r\nvar truncated = turf.truncate(point);\r\n\r\n//addToMap\r\nvar addToMap = [truncated];',hasMap:!0,npmName:"truncate",returns:[{type:"( FeatureCollection | Feature 〈any〉 )",desc:"layer with truncated geometry"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection."},{Argument:"precision",Type:"number",Description:"coordinate decimal precision"},{Argument:"coordinates",Type:"number",Description:"maximum number of coordinates (primarly used to remove z coordinates)"},{Argument:"mutate",Type:"boolean",Description:"allows GeoJSON input to be mutated (significant performance increase if true)"}],throws:[]},{name:"bboxClip",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-objects">Feature</a>  and a bbox and clips the feature to the bbox using  <a target="_blank" href="https://github.com/mapbox/lineclip">lineclip</a>.\nMay result in degenerate edges when clipping Polygons.',parent:null,snippet:'var bbox = [0, 0, 10, 10];\r\nvar poly = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]\r\n  }\r\n}\r\n\r\nvar clipped = turf.bboxClip(poly, bbox);\r\n',example:'var bbox = [0, 0, 10, 10];\r\nvar poly = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]\r\n  }\r\n}\r\n\r\nvar clipped = turf.bboxClip(poly, bbox);\r\n\r\n//addToMap\r\nvar addToMap = [bbox, poly, clipped]',hasMap:!0,npmName:"bbox-clip",returns:[{type:"Feature 〈〉",desc:"clipped Feature"}],params:[{Argument:"feature",Type:"Feature 〈〉",Description:"feature to clip to the bbox"},{Argument:"bbox",Type:"Array 〈number〉",Description:"extent in  minX, minY, maxX, maxY  order"}],throws:[]},{name:"bezier",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">line</a>  and returns a curved version\nby applying a  <a target="_blank" href="http://en.wikipedia.org/wiki/B%C3%A9zier_spline">Bezier spline</a> \nalgorithm.',parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "stroke": "#f00"\r\n  },\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [\r\n      [-76.091308, 18.427501],\r\n      [-76.695556, 18.729501],\r\n      [-76.552734, 19.40443],\r\n      [-74.61914, 19.134789],\r\n      [-73.652343, 20.07657],\r\n      [-73.157958, 20.210656]\r\n    ]\r\n  }\r\n};\r\n\r\nvar curved = turf.bezier(line);\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "stroke": "#f00"\r\n  },\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [\r\n      [-76.091308, 18.427501],\r\n      [-76.695556, 18.729501],\r\n      [-76.552734, 19.40443],\r\n      [-74.61914, 19.134789],\r\n      [-73.652343, 20.07657],\r\n      [-73.157958, 20.210656]\r\n    ]\r\n  }\r\n};\r\n\r\nvar curved = turf.bezier(line);\r\n\r\n//addToMap\r\ncurved.properties = { stroke: \'#0f0\' };\r\nvar addToMap = [line, curved]',hasMap:!0,npmName:"bezier",returns:[{type:"Feature 〈LineString〉",desc:"curved line"}],params:[{Argument:"line",Type:"Feature 〈LineString〉",Description:"input LineString"},{Argument:"resolution",Type:"number",Description:"time in milliseconds between points"},{Argument:"sharpness",Type:"number",Description:"a measure of how curvy the path should be between splines"}],throws:[]},{name:"buffer",description:"Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.",parent:null,snippet:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-90.548630, 14.616599]\r\n  }\r\n};\r\nvar buffered = turf.buffer(point, 500, \'miles\');\r\n',example:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-90.548630, 14.616599]\r\n  }\r\n};\r\nvar buffered = turf.buffer(point, 500, \'miles\');\r\n\r\n//addToMap\r\nvar addToMap = [point, buffered]',hasMap:!0,npmName:"buffer",returns:[{type:"( FeatureCollection | Feature 〈〉 |  )",desc:"buffered features"}],params:[{Argument:"feature",Type:"( FeatureCollection | Geometry | Feature 〈any〉 )",Description:"input to be buffered"},{Argument:"radius",Type:"number",Description:"distance to draw the buffer (negative values are allowed)"},{Argument:"units",Type:"string",Description:"any of the options supported by turf units"},{Argument:"steps",Type:"number",Description:"number of steps"}],throws:[]},{name:"circle",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.',parent:null,snippet:"var center = [-75.343, 39.984];\r\nvar radius = 5;\r\nvar steps = 10;\r\nvar units = 'kilometers';\r\nvar properties = {foo: 'bar'};\r\n\r\nvar circle = turf.circle(center, radius, steps, units, properties);\r\n",example:"var center = [-75.343, 39.984];\r\nvar radius = 5;\r\nvar steps = 10;\r\nvar units = 'kilometers';\r\nvar properties = {foo: 'bar'};\r\n\r\nvar circle = turf.circle(center, radius, steps, units, properties);\r\n\r\n//addToMap\r\nvar addToMap = [turf.point(center), circle]",hasMap:!0,npmName:"circle",returns:[{type:"Feature 〈Polygon〉",desc:"circle polygon"}],params:[{Argument:"center",Type:"( Feature 〈Point〉 | Array 〈number〉 )",Description:"center point"},{Argument:"radius",Type:"number",Description:"radius of the circle"},{Argument:"steps",Type:"number",Description:"number of steps"},{Argument:"units",Type:"string",Description:"miles, kilometers, degrees, or radians"},{Argument:"properties",Type:"Object",Description:"properties"}],throws:[]},{name:"concave",description:'Takes a set of  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  and returns a concave hull polygon.',parent:null,snippet:'var points = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.601226, 44.642643]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.591442, 44.651436]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.580799, 44.648749]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.573589, 44.641788]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.587665, 44.64533]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.595218, 44.64765]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar hull = turf.concave(points, 1, \'miles\');\r\n',example:'var points = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.601226, 44.642643]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.591442, 44.651436]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.580799, 44.648749]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.573589, 44.641788]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.587665, 44.64533]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-63.595218, 44.64765]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar hull = turf.concave(points, 1, \'miles\');\r\n\r\n//addToMap\r\nvar addToMap = [points, hull]',hasMap:!0,npmName:"concave",returns:[{type:"Feature 〈Polygon〉",desc:"a concave hull"}],params:[{Argument:"points",Type:"FeatureCollection 〈Point〉",Description:"input points"},{Argument:"maxEdge",Type:"number",Description:"the size of an edge necessary for part of the hull to become concave (in miles)"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers"}],throws:[{type:"Error",desc:"if maxEdge parameter is missing or unable to compute hull"}]},{name:"convex",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-objects">Feature</a>  or a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  and returns a convex hull  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a>.',parent:null,snippet:'var points = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.195312, 43.755225]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.404052, 43.8424511]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.579833, 43.659924]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.360107, 43.516688]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.14038, 43.588348]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.195312, 43.755225]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar hull = turf.convex(points);\r\n',example:'var points = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.195312, 43.755225]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.404052, 43.8424511]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.579833, 43.659924]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.360107, 43.516688]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.14038, 43.588348]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [10.195312, 43.755225]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar hull = turf.convex(points);\r\n\r\n//addToMap\r\nvar addToMap = [points, hull]',hasMap:!0,npmName:"convex",returns:[{type:"Feature 〈Polygon〉",desc:"a convex hull"}],params:[{Argument:"feature",Type:"( Feature | FeatureCollection )",Description:"input Feature or FeatureCollection"}],throws:[]},{name:"difference",description:'Finds the difference between two  <a target="_blank" href="Polygon">polygons</a>  by clipping the second polygon from the first.',parent:null,snippet:'var polygon1 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "fill": "#F00",\r\n    "fill-opacity": 0.1\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-46.738586, -23.596711],\r\n      [-46.738586, -23.458207],\r\n      [-46.560058, -23.458207],\r\n      [-46.560058, -23.596711],\r\n      [-46.738586, -23.596711]\r\n    ]]\r\n  }\r\n};\r\nvar polygon2 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "fill": "#00F",\r\n    "fill-opacity": 0.1\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[126, -28], [140, -28], [140, -20], [126, -20], [126, -28]]]\r\n  }\r\n};\r\n\r\nvar difference = turf.difference(polygon1, polygon2);\r\n',example:'var polygon1 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "fill": "#F00",\r\n    "fill-opacity": 0.1\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-46.738586, -23.596711],\r\n      [-46.738586, -23.458207],\r\n      [-46.560058, -23.458207],\r\n      [-46.560058, -23.596711],\r\n      [-46.738586, -23.596711]\r\n    ]]\r\n  }\r\n};\r\nvar polygon2 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "fill": "#00F",\r\n    "fill-opacity": 0.1\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[126, -28], [140, -28], [140, -20], [126, -20], [126, -28]]]\r\n  }\r\n};\r\n\r\nvar difference = turf.difference(polygon1, polygon2);\r\n\r\n//addToMap\r\nvar addToMap = [polygon1, polygon2, difference];',hasMap:!0,npmName:"difference",returns:[{type:"( Feature 〈〉 |  )",desc:"a Polygon or MultiPolygon feature showing the area of  polygon1  excluding the area of  polygon2  (if empty returns  undefined )"}],params:[{Argument:"polygon1",Type:"Feature 〈〉",Description:"input Polygon feature"},{Argument:"polygon2",Type:"Feature 〈〉",Description:"Polygon feature to difference from polygon1"}],throws:[]},{name:"dissolve",description:"Dissolves a FeatureCollection of polygons based on a property. Note that multipart features within the collection are not supported",parent:null,snippet:'var features = {\r\n"type": "FeatureCollection",\r\n"features": [\r\n  {\r\n    "type": "Feature",\r\n    "properties": {\r\n      "combine": "yes"\r\n    },\r\n    "geometry": {\r\n      "type": "Polygon",\r\n      "coordinates": [[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]]\r\n    }\r\n  },\r\n  {\r\n    "type": "Feature",\r\n    "properties": {\r\n      "combine": "yes"\r\n    },\r\n    "geometry": {\r\n      "type": "Polygon",\r\n      "coordinates": [[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]]\r\n    }\r\n  },\r\n  {\r\n    "type": "Feature",\r\n    "properties": {\r\n      "combine": "no"\r\n    },\r\n    "geometry": {\r\n      "type": "Polygon",\r\n      "coordinates": [[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]]\r\n    }\r\n  }\r\n ]\r\n}\r\n\r\nvar dissolved = turf.dissolve(features, \'combine\');\r\n',example:'var features = {\r\n"type": "FeatureCollection",\r\n"features": [\r\n  {\r\n    "type": "Feature",\r\n    "properties": {\r\n      "combine": "yes"\r\n    },\r\n    "geometry": {\r\n      "type": "Polygon",\r\n      "coordinates": [[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]]\r\n    }\r\n  },\r\n  {\r\n    "type": "Feature",\r\n    "properties": {\r\n      "combine": "yes"\r\n    },\r\n    "geometry": {\r\n      "type": "Polygon",\r\n      "coordinates": [[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]]\r\n    }\r\n  },\r\n  {\r\n    "type": "Feature",\r\n    "properties": {\r\n      "combine": "no"\r\n    },\r\n    "geometry": {\r\n      "type": "Polygon",\r\n      "coordinates": [[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]]\r\n    }\r\n  }\r\n ]\r\n}\r\n\r\nvar dissolved = turf.dissolve(features, \'combine\');\r\n\r\n//addToMap\r\nvar addToMap = [features, dissolved]',hasMap:!0,npmName:"dissolve",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"a FeatureCollection containing the dissolved polygons"}],params:[{Argument:"featureCollection",Type:"FeatureCollection 〈Polygon〉",Description:"input feature collection to be dissolved"},{Argument:"propertyName",Type:"Optional: string",Description:"property name on which to dissolve features"}],throws:[]},{name:"intersect",description:'Takes two  <a target="_blank" href="Polygon">polygons</a>  and finds their intersection. If they share a border, returns the border; if they don\'t intersect, returns undefined.',parent:null,snippet:"var poly1 = turf.polygon([[\r\n  [-122.801742, 45.48565],\r\n  [-122.801742, 45.60491],\r\n  [-122.584762, 45.60491],\r\n  [-122.584762, 45.48565],\r\n  [-122.801742, 45.48565]\r\n]]);\r\n\r\nvar poly2 = turf.polygon([[\r\n  [-122.520217, 45.535693],\r\n  [-122.64038, 45.553967],\r\n  [-122.720031, 45.526554],\r\n  [-122.669906, 45.507309],\r\n  [-122.723464, 45.446643],\r\n  [-122.532577, 45.408574],\r\n  [-122.487258, 45.477466],\r\n  [-122.520217, 45.535693]\r\n]]);\r\n\r\nvar intersection = turf.intersect(poly1, poly2);\r\n",example:"var poly1 = turf.polygon([[\r\n  [-122.801742, 45.48565],\r\n  [-122.801742, 45.60491],\r\n  [-122.584762, 45.60491],\r\n  [-122.584762, 45.48565],\r\n  [-122.801742, 45.48565]\r\n]]);\r\n\r\nvar poly2 = turf.polygon([[\r\n  [-122.520217, 45.535693],\r\n  [-122.64038, 45.553967],\r\n  [-122.720031, 45.526554],\r\n  [-122.669906, 45.507309],\r\n  [-122.723464, 45.446643],\r\n  [-122.532577, 45.408574],\r\n  [-122.487258, 45.477466],\r\n  [-122.520217, 45.535693]\r\n]]);\r\n\r\nvar intersection = turf.intersect(poly1, poly2);\r\n\r\n//addToMap\r\nvar addToMap = [poly1, poly2, intersection]",hasMap:!0,npmName:"intersect",returns:[{type:"( Feature |  )",desc:"returns a feature representing the point(s) they share (in case of a  Point   or  MultiPoint ), the borders they share (in case of a  LineString  or a  MultiLineString ), the area they share (in case of  Polygon  or  MultiPolygon ). If they do not share any point, returns  undefined."}],params:[{Argument:"poly1",Type:"Feature 〈Polygon〉",Description:"the first polygon"},{Argument:"poly2",Type:"Feature 〈Polygon〉",Description:"the second polygon"}],throws:[]},{name:"lineOffset",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">line</a>  and returns a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">line</a>  at offset by the specified distance.',parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "stroke": "#F00"\r\n  },\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[-83, 30], [-84, 36], [-78, 41]]\r\n  }\r\n};\r\n\r\nvar offsetLine = turf.lineOffset(line, 2, "miles");\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "stroke": "#F00"\r\n  },\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[-83, 30], [-84, 36], [-78, 41]]\r\n  }\r\n};\r\n\r\nvar offsetLine = turf.lineOffset(line, 2, "miles");\r\n\r\n//addToMap\r\noffsetLine.properties.stroke = "#00F"\r\nvar addToMap = [offsetLine, line]',hasMap:!0,npmName:"line-offset",returns:[{type:"Feature 〈〉",desc:"Line offset from the input line"}],params:[{Argument:"geojson",Type:"( Geometry | Feature 〈〉 )",Description:"input GeoJSON"},{Argument:"distance",Type:"number",Description:"distance to offset the line (can be of negative value)"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, kilometers, inches, yards, meters"}],throws:[]},{name:"simplify",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">LineString</a>  or  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a>  and returns a simplified version. Internally uses  <a target="_blank" href="http://mourner.github.io/simplify-js/">simplify-js</a>  to perform simplification.',parent:null,snippet:'var feature = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-70.603637, -33.399918],\r\n      [-70.614624, -33.395332],\r\n      [-70.639343, -33.392466],\r\n      [-70.659942, -33.394759],\r\n      [-70.683975, -33.404504],\r\n      [-70.697021, -33.419406],\r\n      [-70.701141, -33.434306],\r\n      [-70.700454, -33.446339],\r\n      [-70.694274, -33.458369],\r\n      [-70.682601, -33.465816],\r\n      [-70.668869, -33.472117],\r\n      [-70.646209, -33.473835],\r\n      [-70.624923, -33.472117],\r\n      [-70.609817, -33.468107],\r\n      [-70.595397, -33.458369],\r\n      [-70.587158, -33.442901],\r\n      [-70.587158, -33.426283],\r\n      [-70.590591, -33.414248],\r\n      [-70.594711, -33.406224],\r\n      [-70.603637, -33.399918]\r\n    ]]\r\n  }\r\n};\r\n\r\nvar tolerance = 0.01;\r\n\r\nvar simplified = turf.simplify(feature, tolerance, false);\r\n',example:'var feature = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-70.603637, -33.399918],\r\n      [-70.614624, -33.395332],\r\n      [-70.639343, -33.392466],\r\n      [-70.659942, -33.394759],\r\n      [-70.683975, -33.404504],\r\n      [-70.697021, -33.419406],\r\n      [-70.701141, -33.434306],\r\n      [-70.700454, -33.446339],\r\n      [-70.694274, -33.458369],\r\n      [-70.682601, -33.465816],\r\n      [-70.668869, -33.472117],\r\n      [-70.646209, -33.473835],\r\n      [-70.624923, -33.472117],\r\n      [-70.609817, -33.468107],\r\n      [-70.595397, -33.458369],\r\n      [-70.587158, -33.442901],\r\n      [-70.587158, -33.426283],\r\n      [-70.590591, -33.414248],\r\n      [-70.594711, -33.406224],\r\n      [-70.603637, -33.399918]\r\n    ]]\r\n  }\r\n};\r\n\r\nvar tolerance = 0.01;\r\n\r\nvar simplified = turf.simplify(feature, tolerance, false);\r\n\r\n//addToMap\r\nvar addToMap = [feature, simplified]',hasMap:!0,npmName:"simplify",returns:[{type:"( Feature 〈〉 | FeatureCollection | GeometryCollection )",desc:"a simplified feature"}],params:[{Argument:"feature",Type:"( Feature 〈〉 | FeatureCollection | GeometryCollection )",Description:"feature to be simplified"},{Argument:"tolerance",Type:"number",Description:"simplification tolerance"},{Argument:"highQuality",Type:"boolean",Description:"whether or not to spend more time to create\na higher-quality simplification with a different algorithm"}],throws:[]},{name:"tesselate",description:'Tesselates a  <a target="_blank" href="Feature<Polygon>">Feature<Polygon></a>  into a  <a target="_blank" href="FeatureCollection<Polygon>">FeatureCollection<Polygon></a>  of triangles\nusing  <a target="_blank" href="https://github.com/mapbox/earcut">earcut</a>.',parent:null,snippet:'var poly = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]\r\n  }\r\n}\r\nvar triangles = turf.tesselate(poly);\r\n',example:'var poly = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]\r\n  }\r\n}\r\nvar triangles = turf.tesselate(poly);\r\n\r\n//addToMap\r\nvar addToMap = [poly, triangles]',hasMap:!0,npmName:"tesselate",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"a geometrycollection feature"}],params:[{Argument:"poly",Type:"Feature 〈Polygon〉",Description:"the polygon to tesselate"}],throws:[]},{name:"union",description:'Takes two or more  <a target="_blank" href="Polygon">polygons</a>  and returns a combined polygon. If the input polygons are not contiguous, this function returns a  <a target="_blank" href="http://geojson.org/geojson-spec.html#multipolygon">MultiPolygon</a>  feature.',parent:null,snippet:'var poly1 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "fill": "#0f0"\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-82.574787, 35.594087],\r\n      [-82.574787, 35.615581],\r\n      [-82.545261, 35.615581],\r\n      [-82.545261, 35.594087],\r\n      [-82.574787, 35.594087]\r\n    ]]\r\n  }\r\n};\r\nvar poly2 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "fill": "#00f"\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-82.560024, 35.585153],\r\n      [-82.560024, 35.602602],\r\n      [-82.52964, 35.602602],\r\n      [-82.52964, 35.585153],\r\n      [-82.560024, 35.585153]\r\n    ]]\r\n  }\r\n};\r\n\r\nvar union = turf.union(poly1, poly2);\r\n',example:'var poly1 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "fill": "#0f0"\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-82.574787, 35.594087],\r\n      [-82.574787, 35.615581],\r\n      [-82.545261, 35.615581],\r\n      [-82.545261, 35.594087],\r\n      [-82.574787, 35.594087]\r\n    ]]\r\n  }\r\n};\r\nvar poly2 = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "fill": "#00f"\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-82.560024, 35.585153],\r\n      [-82.560024, 35.602602],\r\n      [-82.52964, 35.602602],\r\n      [-82.52964, 35.585153],\r\n      [-82.560024, 35.585153]\r\n    ]]\r\n  }\r\n};\r\n\r\nvar union = turf.union(poly1, poly2);\r\n\r\n//addToMap\r\nvar addToMap = [poly1, poly2, union];',hasMap:!0,npmName:"union",returns:[{type:"Feature 〈〉",desc:"a combined  Polygon  or  MultiPolygon  feature"}],params:[{Argument:"A",Description:"polygon to combine"}],throws:[]},{name:"combine",description:'Combines a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  of  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a> ,  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">LineString</a> , or  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a>  features\ninto  <a target="_blank" href="http://geojson.org/geojson-spec.html#multipoint">MultiPoint</a> ,  <a target="_blank" href="http://geojson.org/geojson-spec.html#multilinestring">MultiLineString</a> , or  <a target="_blank" href="http://geojson.org/geojson-spec.html#multipolygon">MultiPolygon</a>  features.',parent:null,snippet:'var fc = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [19.026432, 47.49134]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [19.074497, 47.509548]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar combined = turf.combine(fc);\r\n',example:'var fc = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [19.026432, 47.49134]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [19.074497, 47.509548]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar combined = turf.combine(fc);\r\n\r\n//addToMap\r\nvar addToMap = [combined]',hasMap:!0,npmName:"combine",returns:[{type:"FeatureCollection 〈〉",desc:"a FeatureCollection of corresponding type to input"}],params:[{Argument:"fc",Type:"FeatureCollection 〈〉",Description:"a FeatureCollection of any type"}],throws:[]},{name:"explode",description:'Takes a feature or set of features and returns all positions as  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>.',parent:null,snippet:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]\r\n  }\r\n};\r\n\r\nvar explode = turf.explode(polygon);\r\n',example:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]\r\n  }\r\n};\r\n\r\nvar explode = turf.explode(polygon);\r\n\r\n//addToMap\r\nvar addToMap = [polygon, explode]',hasMap:!0,npmName:"explode",returns:[{type:"FeatureCollection 〈point〉",desc:"points representing the exploded input features"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Feature 〈any〉 )",Description:"input features"}],throws:[{type:"Error",desc:"if it encounters an unknown geometry type"}]},{name:"flatten",description:'Flattens any  <a target="_blank" href="GeoJSON">GeoJSON</a>  to a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  inspired by  <a target="_blank" href="https://github.com/tmcw/geojson-flatten">geojson-flatten</a>.',parent:null,snippet:'var multiGeometry = {\r\n  "type": "MultiPolygon",\r\n  "coordinates": [\r\n     [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],\r\n     [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\r\n     [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]\r\n   ]\r\n };\r\n\r\nvar flatten = turf.flatten(multiGeometry);\r\n',example:'var multiGeometry = {\r\n  "type": "MultiPolygon",\r\n  "coordinates": [\r\n     [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],\r\n     [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\r\n     [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]\r\n   ]\r\n };\r\n\r\nvar flatten = turf.flatten(multiGeometry);\r\n\r\n//addToMap\r\nvar addToMap = [flatten]',hasMap:!0,npmName:"flatten",returns:[{type:"FeatureCollection 〈any〉",desc:"all Multi-Geometries are flattened into single Features"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Geometry | Feature 〈any〉 )",Description:"any valid GeoJSON Object"}],throws:[]},{name:"lineStringToPolygon",description:"Converts (Multi)LineString(s) to Polygon(s).",parent:null,snippet:"var line = {\r\n  'type': 'Feature',\r\n  'properties': {},\r\n  'geometry': {\r\n    'type': 'LineString',\r\n    'coordinates': [[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]\r\n  }\r\n}\r\nvar polygon = turf.lineStringToPolygon(line);\r\n",example:"var line = {\r\n  'type': 'Feature',\r\n  'properties': {},\r\n  'geometry': {\r\n    'type': 'LineString',\r\n    'coordinates': [[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]\r\n  }\r\n}\r\nvar polygon = turf.lineStringToPolygon(line);\r\n\r\n//addToMap\r\nvar addToMap = [polygon];",hasMap:!0,npmName:"line-string-to-polygon",returns:[{type:"Feature 〈〉",desc:"converted to Polygons"}],params:[{Argument:"lines",Type:"( FeatureCollection | Feature 〈〉 )",Description:"Features to convert"},{Argument:"properties",Type:"Optional: Object",Description:"translates GeoJSON properties to Feature"},{Argument:"autoComplete",Type:"boolean",Description:"auto complete linestrings (matches first & last coordinates)"},{Argument:"orderCoords",Type:"boolean",Description:"sorts linestrings to place outer ring at the first position of the coordinates"}],throws:[]},{name:"polygonize",description:'Polygonizes  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">(Multi)LineString(s)</a>  into  <a target="_blank" href="Polygons">Polygons</a>.',parent:null,snippet:!1,example:!1,hasMap:!1,npmName:"polygonize",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"Polygons created"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Geometry | Feature 〈〉 )",Description:"Lines in order to polygonize"}],throws:[{type:"Error",desc:"if GeoJSON is invalid."}]},{name:"polygonToLineString",description:'Converts a  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a>  to  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">(Multi)LineString</a>  or  <a target="_blank" href="http://geojson.org/geojson-spec.html#multipolygon">MultiPolygon</a>  to a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  of  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">(Multi)LineString</a>.',parent:null,snippet:'var poly = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]\r\n  }\r\n}\r\nvar line = turf.polygonToLineString(poly);\r\n',example:'var poly = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]\r\n  }\r\n}\r\nvar line = turf.polygonToLineString(poly);\r\n\r\n//addToMap\r\nvar addToMap = [line];',hasMap:!0,npmName:"polygon-to-line-string",returns:[{type:"( FeatureCollection | Feature 〈〉 )",desc:"converted (Multi)Polygon to (Multi)LineString"}],params:[{Argument:"polygon",Type:"Feature 〈〉",Description:"Feature to convert"},{Argument:"properties",Type:"Optional: Object",Description:"translates GeoJSON properties to Feature"}],throws:[]},{name:"kinks",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">linestring</a> ,  <a target="_blank" href="MultiLineString">multi-linestring</a> ,  <a target="_blank" href="MultiPolygon">multi-polygon</a> , or  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">polygon</a>  and returns  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  at all self-intersections.',parent:null,snippet:'var poly = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-12.034835, 8.901183],\r\n      [-12.060413, 8.899826],\r\n      [-12.03638, 8.873199],\r\n      [-12.059383, 8.871418],\r\n      [-12.034835, 8.901183]\r\n    ]]\r\n  }\r\n};\r\n\r\nvar kinks = turf.kinks(poly);\r\n',example:'var poly = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-12.034835, 8.901183],\r\n      [-12.060413, 8.899826],\r\n      [-12.03638, 8.873199],\r\n      [-12.059383, 8.871418],\r\n      [-12.034835, 8.901183]\r\n    ]]\r\n  }\r\n};\r\n\r\nvar kinks = turf.kinks(poly);\r\n\r\n//addToMap\r\nvar addToMap = [poly, kinks]',hasMap:!0,npmName:"kinks",returns:[{type:"FeatureCollection 〈Point〉",desc:"self-intersections"}],params:[{Argument:"featureIn",Type:"Feature 〈〉",Description:"input feature"}],throws:[]},{name:"lineArc",description:"Creates a circular arc, of a circle of the given radius and center point, between bearing1 and bearing2;\n0 bearing is North of center point, positive clockwise.",parent:null,snippet:'var center = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75, 40]\r\n  }\r\n}\r\nvar radius = 5;\r\nvar bearing1 = 25;\r\nvar bearing2 = 47;\r\n\r\nvar arc = turf.lineArc(center, radius, bearing1, bearing2);\r\n',example:'var center = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75, 40]\r\n  }\r\n}\r\nvar radius = 5;\r\nvar bearing1 = 25;\r\nvar bearing2 = 47;\r\n\r\nvar arc = turf.lineArc(center, radius, bearing1, bearing2);\r\n\r\n//addToMap\r\nvar addToMap = [center, arc]',hasMap:!0,npmName:"line-arc",returns:[{type:"Feature 〈LineString〉",desc:"line arc"}],params:[{Argument:"center",Type:"Feature 〈Point〉",Description:"center point"},{Argument:"radius",Type:"number",Description:"radius of the circle"},{Argument:"bearing1",Type:"number",Description:"angle, in decimal degrees, of the first radius of the arc"},{Argument:"bearing2",Type:"number",Description:"angle, in decimal degrees, of the second radius of the arc"},{Argument:"steps",Type:"number",Description:"number of steps"},{Argument:"units",Type:"string",Description:"miles, kilometers, degrees, or radians"}],throws:[]},{name:"lineChunk",description:'Divides a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">LineString</a>  into chunks of a specified length.\nIf the line is shorter than the segment length then the original line is returned.',parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[-95, 40], [-93, 45], [-85, 50]]\r\n  }\r\n};\r\nvar chunk = turf.lineChunk(line, 15, \'miles\');\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[-95, 40], [-93, 45], [-85, 50]]\r\n  }\r\n};\r\nvar chunk = turf.lineChunk(line, 15, \'miles\');\r\n\r\n//addToMap\r\nvar addToMap = [chunk];',hasMap:!0,npmName:"line-chunk",returns:[{type:"FeatureCollection 〈LineString〉",desc:"collection of line segments"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Geometry | Feature 〈〉 )",Description:"the lines to split"},{Argument:"segmentLength",Type:"number",Description:"how long to make each segment"},{Argument:"units",Type:"string",Description:"units can be degrees, radians, miles, or kilometers"},{Argument:"reverse",Type:"boolean",Description:"reverses coordinates to start the first chunked segment at the end"}],throws:[]},{name:"lineIntersect",description:"Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).",parent:null,snippet:'var line1 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[126, -11], [129, -21]]\r\n  }\r\n};\r\nvar line2 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[123, -18], [131, -14]]\r\n  }\r\n};\r\nvar intersects = turf.lineIntersect(line1, line2);\r\n',example:'var line1 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[126, -11], [129, -21]]\r\n  }\r\n};\r\nvar line2 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[123, -18], [131, -14]]\r\n  }\r\n};\r\nvar intersects = turf.lineIntersect(line1, line2);\r\n\r\n//addToMap\r\nvar addToMap = [line, line2, intersects]',hasMap:!0,npmName:"line-intersect",returns:[{type:"FeatureCollection 〈Point〉",desc:"point(s) that intersect both"}],params:[{Argument:"line1",Type:"( Geometry | FeatureCollection | Feature 〈〉 )",Description:"any LineString or Polygon"},{Argument:"line2",Type:"( Geometry | FeatureCollection | Feature 〈〉 )",Description:"any LineString or Polygon"}],throws:[]},{name:"lineOverlap",description:"Takes any LineString or Polygon and returns the overlapping lines between both features.",parent:null,snippet:'var line1 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[115, -35], [125, -30], [135, -30], [145, -35]\r\n    ]\r\n  }\r\n}\r\nvar line2 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[115, -25], [125, -30], [135, -30], [145, -25]\r\n    ]\r\n  }\r\n}\r\nvar overlapping = turf.lineOverlap(line1, line2);\r\n',example:'var line1 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[115, -35], [125, -30], [135, -30], [145, -35]\r\n    ]\r\n  }\r\n}\r\nvar line2 = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[115, -25], [125, -30], [135, -30], [145, -25]\r\n    ]\r\n  }\r\n}\r\nvar overlapping = turf.lineOverlap(line1, line2);\r\n\r\n//addToMap\r\nvar addToMap = [line1, line2, overlapping]',hasMap:!0,npmName:"line-overlap",returns:[{type:"FeatureCollection 〈LineString〉",desc:"lines(s) that are overlapping between both features"}],params:[{Argument:"line1",Type:"( Geometry | Feature 〈〉 )",Description:"any LineString or Polygon"},{Argument:"line2",Type:"( Geometry | Feature 〈〉 )",Description:"any LineString or Polygon"}],throws:[]},{name:"lineSegment",description:'Creates a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  of 2-vertex  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">LineString</a>  segments from a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">(Multi)LineString</a>  or  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">(Multi)Polygon</a>.',parent:null,snippet:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]\r\n  }\r\n}\r\nvar segments = turf.lineSegment(polygon);\r\n',example:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]\r\n  }\r\n}\r\nvar segments = turf.lineSegment(polygon);\r\n\r\n//addToMap\r\nvar addToMap = [polygon, segments]',hasMap:!0,npmName:"line-segment",returns:[{type:"FeatureCollection 〈LineString〉",desc:"2-vertex line segments"}],params:[{Argument:"geojson",Type:"( Geometry | FeatureCollection | Feature 〈〉 )",Description:"GeoJSON Polygon or LineString"}],throws:[]},{name:"lineSlice",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">line</a> , a start  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a> , and a stop point\nand returns a subsection of the line in-between those points.\nThe start & stop points don\'t need to fall exactly on the line.',parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [\r\n      [-77.031669, 38.878605],\r\n      [-77.029609, 38.881946],\r\n      [-77.020339, 38.884084],\r\n      [-77.025661, 38.885821],\r\n      [-77.021884, 38.889563],\r\n      [-77.019824, 38.892368]\r\n    ]\r\n  }\r\n};\r\nvar start = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-77.029609, 38.881946]\r\n  }\r\n};\r\nvar stop = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-77.021884, 38.889563]\r\n  }\r\n};\r\n\r\nvar sliced = turf.lineSlice(start, stop, line);\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [\r\n      [-77.031669, 38.878605],\r\n      [-77.029609, 38.881946],\r\n      [-77.020339, 38.884084],\r\n      [-77.025661, 38.885821],\r\n      [-77.021884, 38.889563],\r\n      [-77.019824, 38.892368]\r\n    ]\r\n  }\r\n};\r\nvar start = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-77.029609, 38.881946]\r\n  }\r\n};\r\nvar stop = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-77.021884, 38.889563]\r\n  }\r\n};\r\n\r\nvar sliced = turf.lineSlice(start, stop, line);\r\n\r\n//addToMap\r\nvar addToMap = [start, stop, line]',hasMap:!0,npmName:"line-slice",returns:[{type:"Feature 〈LineString〉",desc:"sliced line"}],params:[{Argument:"startPt",Type:"Feature 〈Point〉",Description:"starting point"},{Argument:"stopPt",Type:"Feature 〈Point〉",Description:"stopping point"},{Argument:"line",Type:"( Feature 〈LineString〉 | LineString )",Description:"line to slice"}],throws:[]},{name:"lineSliceAlong",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">line</a> , a specified distance along the line to a start  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a> ,\nand a specified  distance along the line to a stop point\nand returns a subsection of the line in-between those points.',parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[7, 45], [9, 45], [14, 40], [14, 41]]\r\n  }\r\n};\r\nvar start = 12.5;\r\nvar stop = 25;\r\nvar sliced = turf.lineSliceAlong(line, start, stop, \'miles\');\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[7, 45], [9, 45], [14, 40], [14, 41]]\r\n  }\r\n};\r\nvar start = 12.5;\r\nvar stop = 25;\r\nvar sliced = turf.lineSliceAlong(line, start, stop, \'miles\');\r\n\r\n//addToMap\r\nvar addToMap = [line, start, stop, sliced]',hasMap:!0,npmName:"line-slice-along",returns:[{type:"Feature 〈LineString〉",desc:"sliced line"}],params:[{Argument:"line",Type:"( Feature 〈LineString〉 | LineString )",Description:"input line"},{Argument:"startDist",Type:"number",Description:"distance along the line to starting point"},{Argument:"stopDist",Type:"number",Description:"distance along the line to ending point"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers"}],throws:[]},{name:"lineSplit",description:"Split a LineString by another GeoJSON Feature.",parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[120, -25], [145, -25]]\r\n  }\r\n};\r\nvar splitter = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[130, -15], [130, -35]]\r\n  }\r\n};\r\nvar split = turf.lineSplit(line, splitter);\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[120, -25], [145, -25]]\r\n  }\r\n};\r\nvar splitter = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[130, -15], [130, -35]]\r\n  }\r\n};\r\nvar split = turf.lineSplit(line, splitter);\r\n\r\n//addToMap\r\nvar addToMap = [line, splitter]',hasMap:!0,npmName:"line-split",returns:[{type:"FeatureCollection 〈LineString〉",desc:"Split LineStrings"}],params:[{Argument:"line",Type:"Feature 〈LineString〉",Description:"LineString Feature to split"},{Argument:"splitter",Type:"Feature 〈〉",Description:"Feature used to split line"}],throws:[]},{name:"mask",description:'Takes any type of  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">polygon</a>  and an optional mask and returns a  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">polygon</a>  exterior ring with holes.',parent:null,snippet:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]\r\n  }\r\n}\r\nvar mask = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]\r\n  }\r\n}\r\nvar masked = turf.mask(polygon, mask);\r\n',example:'var polygon = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]\r\n  }\r\n}\r\nvar mask = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]\r\n  }\r\n}\r\nvar masked = turf.mask(polygon, mask);\r\n\r\n//addToMap\r\nvar addToMap = [masked]',hasMap:!0,npmName:"mask",returns:[{type:"Feature 〈Polygon〉",desc:"Masked Polygon (exterior ring with holes)."}],params:[{Argument:"polygon",Type:"( FeatureCollection | Feature 〈〉 )",Description:"GeoJSON Polygon used as interior rings or holes."},{Argument:"mask",Type:"Optional: undefined",Description:"GeoJSON Polygon used as the exterior ring (if undefined, the world extent is used)"}],throws:[]},{name:"pointOnLine",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  and a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">LineString</a>  and calculates the closest Point on the LineString.',parent:null,snippet:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [\r\n      [-77.031669, 38.878605],\r\n      [-77.029609, 38.881946],\r\n      [-77.020339, 38.884084],\r\n      [-77.025661, 38.885821],\r\n      [-77.021884, 38.889563],\r\n      [-77.019824, 38.892368]\r\n    ]\r\n  }\r\n};\r\nvar pt = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-77.037076, 38.884017]\r\n  }\r\n};\r\n\r\nvar snapped = turf.pointOnLine(line, pt, \'miles\');\r\n',example:'var line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [\r\n      [-77.031669, 38.878605],\r\n      [-77.029609, 38.881946],\r\n      [-77.020339, 38.884084],\r\n      [-77.025661, 38.885821],\r\n      [-77.021884, 38.889563],\r\n      [-77.019824, 38.892368]\r\n    ]\r\n  }\r\n};\r\nvar pt = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-77.037076, 38.884017]\r\n  }\r\n};\r\n\r\nvar snapped = turf.pointOnLine(line, pt, \'miles\');\r\n\r\n//addToMap\r\nsnapped.properties[\'marker-color\'] = \'#00f\';\r\nvar addToMap = [line, pt, snapped];',hasMap:!0,npmName:"point-on-line",returns:[{type:"Feature 〈Point〉",desc:"closest point on the  line  to  point. The properties object will contain three values:  index : closest point was found on nth line part,  dist : distance between pt and the closest point,  location : distance along the line between start and the closest point."}],params:[{Argument:"line",Type:"Feature 〈LineString〉",Description:"line to snap to"},{Argument:"pt",Type:"Feature 〈Point〉",Description:"point to snap from"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers"}],throws:[]},{name:"sector",description:'Creates a circular sector of a circle of given radius and center  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a> ,\nbetween (clockwise) bearing1 and bearing2; 0 bearing is North of center point, positive clockwise.',parent:null,snippet:'var center = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75, 40]\r\n  }\r\n}\r\nvar radius = 5;\r\nvar bearing1 = 25;\r\nvar bearing2 = 45;\r\n\r\nvar sector = turf.sector(center, radius, bearing1, bearing2);\r\n',example:'var center = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75, 40]\r\n  }\r\n}\r\nvar radius = 5;\r\nvar bearing1 = 25;\r\nvar bearing2 = 45;\r\n\r\nvar sector = turf.sector(center, radius, bearing1, bearing2);\r\n\r\n//addToMap\r\nvar addToMap = [center, sector];',hasMap:!0,npmName:"sector",returns:[{type:"Feature 〈Polygon〉",desc:"sector polygon"}],params:[{Argument:"center",Type:"Feature 〈Point〉",Description:"center point"},{Argument:"radius",Type:"number",Description:"radius of the circle"},{Argument:"bearing1",Type:"number",Description:"angle, in decimal degrees, of the first radius of the sector"},{Argument:"bearing2",Type:"number",Description:"angle, in decimal degrees, of the second radius of the sector"},{Argument:"steps",Type:"number",Description:"number of steps"},{Argument:"units",Type:"string",Description:"miles, kilometers, degrees, or radians"}],throws:[]},{name:"unkinkPolygon",description:'Takes a kinked polygon and returns a feature collection of polygons that have no kinks.\nUses  <a target="_blank" href="https://github.com/mclaeysb/simplepolygon">simplepolygon</a>  internally.',parent:null,snippet:"var poly = {\r\n   'type': 'Feature',\r\n     'geometry': {\r\n        'type': 'Polygon',\r\n       'coordinates': [[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]\r\n      }\r\n};\r\n\r\nvar result = turf.unkinkPolygon(poly);\r\n",example:"var poly = {\r\n   'type': 'Feature',\r\n     'geometry': {\r\n        'type': 'Polygon',\r\n       'coordinates': [[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]\r\n      }\r\n};\r\n\r\nvar result = turf.unkinkPolygon(poly);\r\n\r\n//addToMap\r\nvar addToMap = [poly, result]",hasMap:!0,npmName:"unkink-polygon",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"Unkinked polygons"}],params:[{Argument:"geojson",Type:"( FeatureCollection | Feature 〈〉 )",Description:"GeoJSON Polygon or MultiPolygon"}],throws:[]},{name:"featureCollection",description:'Takes one or more  <a target="_blank" href="Feature">Features</a>  and creates a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>.',parent:"helpers",snippet:"var features = [\r\n turf.point([-75.343, 39.984], {name: 'Location A'}),\r\n turf.point([-75.833, 39.284], {name: 'Location B'}),\r\n turf.point([-75.534, 39.123], {name: 'Location C'})\r\n];\r\n\r\nvar collection = turf.featureCollection(features);\r\n\r\n//=collection",example:"var features = [\r\n turf.point([-75.343, 39.984], {name: 'Location A'}),\r\n turf.point([-75.833, 39.284], {name: 'Location B'}),\r\n turf.point([-75.534, 39.123], {name: 'Location C'})\r\n];\r\n\r\nvar collection = turf.featureCollection(features);\r\n\r\n//=collection",hasMap:!1,npmName:"helpers",returns:[{type:"FeatureCollection",desc:"a FeatureCollection of input features"}],params:[{Argument:"features",Type:"Array 〈Feature〉",Description:"input features"}],throws:[]},{name:"feature",description:'Wraps a GeoJSON  <a target="_blank" href="http://geojson.org/geojson-spec.html#geometry">Geometry</a>  in a GeoJSON  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-objects">Feature</a>.',parent:"helpers",snippet:'var geometry = {\r\n  "type": "Point",\r\n  "coordinates": [110, 50]\r\n};\r\n\r\nvar feature = turf.feature(geometry);\r\n\r\n//=feature',example:'var geometry = {\r\n  "type": "Point",\r\n  "coordinates": [110, 50]\r\n};\r\n\r\nvar feature = turf.feature(geometry);\r\n\r\n//=feature',hasMap:!1,npmName:"helpers",returns:[{type:"Feature",desc:"a GeoJSON Feature"}],params:[{Argument:"geometry",Type:"Geometry",Description:"input geometry"},{Argument:"properties",Type:"Object",Description:"properties"}],throws:[]},{name:"geometryCollection",description:'Creates a  <a target="_blank" href="Feature<GeometryCollection>">Feature<GeometryCollection></a>  based on a\ncoordinate array. Properties can be added optionally.',parent:"helpers",snippet:'var pt = {\r\n    "type": "Point",\r\n      "coordinates": [100, 0]\r\n    };\r\nvar line = {\r\n    "type": "LineString",\r\n    "coordinates": [ [101, 0], [102, 1] ]\r\n  };\r\nvar collection = turf.geometryCollection([pt, line]);\r\n\r\n//=collection',example:'var pt = {\r\n    "type": "Point",\r\n      "coordinates": [100, 0]\r\n    };\r\nvar line = {\r\n    "type": "LineString",\r\n    "coordinates": [ [101, 0], [102, 1] ]\r\n  };\r\nvar collection = turf.geometryCollection([pt, line]);\r\n\r\n//=collection',hasMap:!1,npmName:"helpers",returns:[{type:"Feature 〈GeometryCollection〉",desc:"a GeoJSON GeometryCollection Feature"}],params:[{Argument:"geometries",Type:"Array 〈〉",Description:"an array of GeoJSON Geometries"},{Argument:"properties",Type:"Optional: Object",Description:"an Object of key-value pairs to add as properties"}],throws:[]},{name:"lineString",description:'Creates a  <a target="_blank" href="http://geojson.org/geojson-spec.html#linestring">LineString</a>  based on a\ncoordinate array. Properties can be added optionally.',parent:"helpers",snippet:"var linestring1 = turf.lineString([\r\n  [-21.964416, 64.148203],\r\n  [-21.956176, 64.141316],\r\n  [-21.93901, 64.135924],\r\n  [-21.927337, 64.136673]\r\n]);\r\nvar linestring2 = turf.lineString([\r\n  [-21.929054, 64.127985],\r\n  [-21.912918, 64.134726],\r\n  [-21.916007, 64.141016],\r\n  [-21.930084, 64.14446]\r\n], {name: 'line 1', distance: 145});\r\n\r\n//=linestring1\r\n\r\n//=linestring2",example:"var linestring1 = turf.lineString([\r\n  [-21.964416, 64.148203],\r\n  [-21.956176, 64.141316],\r\n  [-21.93901, 64.135924],\r\n  [-21.927337, 64.136673]\r\n]);\r\nvar linestring2 = turf.lineString([\r\n  [-21.929054, 64.127985],\r\n  [-21.912918, 64.134726],\r\n  [-21.916007, 64.141016],\r\n  [-21.930084, 64.14446]\r\n], {name: 'line 1', distance: 145});\r\n\r\n//=linestring1\r\n\r\n//=linestring2",hasMap:!1,npmName:"helpers",returns:[{type:"Feature 〈LineString〉",desc:"a LineString feature"}],params:[{Argument:"coordinates",Type:"Array 〈〉",Description:"an array of Positions"},{Argument:"properties",Type:"Optional: Object",Description:"an Object of key-value pairs to add as properties"}],throws:[{type:"Error",desc:"if no coordinates are passed"}]},{name:"multiLineString",description:'Creates a  <a target="_blank" href="Feature<MultiLineString>">Feature<MultiLineString></a>  based on a\ncoordinate array. Properties can be added optionally.',parent:"helpers",snippet:"var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\r\n\r\n//=multiLine",example:"var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\r\n\r\n//=multiLine",hasMap:!1,npmName:"helpers",returns:[{type:"Feature 〈MultiLineString〉",desc:"a MultiLineString feature"}],params:[{Argument:"coordinates",Type:"Array 〈〉",Description:"an array of LineStrings"},{Argument:"properties",Type:"Optional: Object",Description:"an Object of key-value pairs to add as properties"}],throws:[{type:"Error",desc:"if no coordinates are passed"}]},{name:"multiPoint",description:'Creates a  <a target="_blank" href="Feature<MultiPoint>">Feature<MultiPoint></a>  based on a\ncoordinate array. Properties can be added optionally.',parent:"helpers",snippet:"var multiPt = turf.multiPoint([[0,0],[10,10]]);\r\n\r\n//=multiPt",example:"var multiPt = turf.multiPoint([[0,0],[10,10]]);\r\n\r\n//=multiPt",hasMap:!1,npmName:"helpers",returns:[{type:"Feature 〈MultiPoint〉",desc:"a MultiPoint feature"}],params:[{Argument:"coordinates",Type:"Array 〈〉",Description:"an array of Positions"},{Argument:"properties",Type:"Optional: Object",Description:"an Object of key-value pairs to add as properties"}],throws:[{type:"Error",desc:"if no coordinates are passed"}]},{name:"multiPolygon",description:'Creates a  <a target="_blank" href="Feature<MultiPolygon>">Feature<MultiPolygon></a>  based on a\ncoordinate array. Properties can be added optionally.',parent:"helpers",snippet:"var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\r\n\r\n//=multiPoly",example:"var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\r\n\r\n//=multiPoly",hasMap:!1,npmName:"helpers",returns:[{type:"Feature 〈MultiPolygon〉",desc:"a multipolygon feature"}],params:[{Argument:"coordinates",Type:"Array 〈〉",Description:"an array of Polygons"},{Argument:"properties",Type:"Optional: Object",Description:"an Object of key-value pairs to add as properties"}],throws:[{type:"Error",desc:"if no coordinates are passed"}]},{name:"point",description:'Takes coordinates and properties (optional) and returns a new  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  feature.',parent:"helpers",snippet:"var point = turf.point([-75.343, 39.984]);\r\n\r\n//=point",example:"var point = turf.point([-75.343, 39.984]);\r\n\r\n//=point",hasMap:!1,npmName:"helpers",returns:[{type:"Feature 〈Point〉",desc:"a Point feature"}],params:[{Argument:"coordinates",Type:"Array 〈number〉",Description:"longitude, latitude position (each in decimal degrees)"},{Argument:"properties",Type:"Optional: Object",Description:"an Object that is used as the  Feature 's\nproperties"}],throws:[]},{name:"polygon",description:'Takes an array of LinearRings and optionally an  <a target="_blank" href="Object">Object</a>  with properties and returns a  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a>  feature.',parent:"helpers",snippet:"var polygon = turf.polygon([[\r\n  [-2.275543, 53.464547],\r\n  [-2.275543, 53.489271],\r\n  [-2.215118, 53.489271],\r\n  [-2.215118, 53.464547],\r\n  [-2.275543, 53.464547]\r\n]], { name: 'poly1', population: 400});\r\n\r\n//=polygon",example:"var polygon = turf.polygon([[\r\n  [-2.275543, 53.464547],\r\n  [-2.275543, 53.489271],\r\n  [-2.215118, 53.489271],\r\n  [-2.215118, 53.464547],\r\n  [-2.275543, 53.464547]\r\n]], { name: 'poly1', population: 400});\r\n\r\n//=polygon",hasMap:!1,npmName:"helpers",returns:[{type:"Feature 〈Polygon〉",desc:"a Polygon feature"}],params:[{Argument:"coordinates",Type:"Array 〈〉",Description:"an array of LinearRings"},{Argument:"properties",Type:"Optional: Object",Description:"a properties object"}],throws:[{type:"Error",desc:"throw an error if a LinearRing of the polygon has too few positions\nor if a LinearRing of the Polygon does not have matching Positions at the beginning & end."}]},{name:"random",description:'Generates random  <a target="_blank" href="GeoJSON">GeoJSON</a>  data, including  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Points</a>  and  <a target="_blank" href="Polygon">Polygons</a> , for testing\nand experimentation.',parent:null,snippet:"var points = turf.random('points', 100, {\r\n  bbox: [-70, 40, -60, 60]\r\n});\r\n\r\nvar polygons = turf.random('polygons', 4, {\r\n  bbox: [-70, 40, -60, 60]\r\n});\r\n",example:"var points = turf.random('points', 100, {\r\n  bbox: [-70, 40, -60, 60]\r\n});\r\n\r\nvar polygons = turf.random('polygons', 4, {\r\n  bbox: [-70, 40, -60, 60]\r\n});\r\n\r\n//addToMap\r\nvar addToMap = [points, polygons]",hasMap:!0,npmName:"random",returns:[{type:"FeatureCollection",desc:"generated random features"}],params:[{Argument:"type",Type:"string",Description:"type of features desired: 'points' or 'polygons'"},{Argument:"count",Type:"number",Description:"how many geometries should be generated."},{Argument:"options",Type:"Object",Description:"options relevant to the feature desired. Can include:"}],throws:[]},{name:"sample",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  and returns a FeatureCollection with given number of  <a target="_blank" href="Feature">features</a>  at random.',parent:null,snippet:"var points = turf.random('points', 1000);\r\n\r\nvar sample = turf.sample(points, 10);\r\n",example:"var points = turf.random('points', 1000);\r\n\r\nvar sample = turf.sample(points, 10);\r\n\r\n//addToMap\r\nvar addToMap = [points, sample]\r\nturf.featureEach(sample, function (currentFeature) {\r\n  currentFeature.properties['marker-size'] = 'large';\r\n  currentFeature.properties['marker-color'] = '#000';\r\n});",hasMap:!0,npmName:"sample",returns:[{type:"FeatureCollection",desc:"a FeatureCollection with  n  features"}],params:[{Argument:"featurecollection",Type:"FeatureCollection",Description:"set of input features"},{Argument:"num",Type:"number",Description:"number of features to select"}],throws:[]},{name:"isobands",description:'Takes a grid  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  of  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  features with z-values and an array of\nvalue breaks and generates filled contour isobands.',parent:null,snippet:"// create random points with random\r\n// z-values in their properties\r\nvar extent = [-70.823364, -33.553984, -69.823364, -32.553984];\r\nvar cellWidth = 5;\r\nvar units = 'miles';\r\nvar pointGrid = turf.pointGrid(extent, cellWidth, units);\r\nfor (var i = 0; i < pointGrid.features.length; i++) {\r\n    pointGrid.features[i].properties.elevation = Math.random() * 10;\r\n}\r\nvar breaks = [0, 5, 8.5];\r\nvar isobands = turf.isobands(pointGrid, breaks, 'temp');\r\n",example:"// create random points with random\r\n// z-values in their properties\r\nvar extent = [-70.823364, -33.553984, -69.823364, -32.553984];\r\nvar cellWidth = 5;\r\nvar units = 'miles';\r\nvar pointGrid = turf.pointGrid(extent, cellWidth, units);\r\nfor (var i = 0; i < pointGrid.features.length; i++) {\r\n    pointGrid.features[i].properties.elevation = Math.random() * 10;\r\n}\r\nvar breaks = [0, 5, 8.5];\r\nvar isobands = turf.isobands(pointGrid, breaks, 'temp');\r\n\r\n//addToMap\r\nvar addToMap = [isobands];",hasMap:!0,npmName:"isobands",returns:[{type:"FeatureCollection 〈MultiPolygon〉",desc:"a FeatureCollection of  MultiPolygon  features representing isobands"}],params:[{Argument:"points",Type:"FeatureCollection 〈Point〉",Description:"a FeatureCollection of  Point  features"},{Argument:"breaks",Type:"Array 〈number〉",Description:"where to draw contours"},{Argument:"zProperty",Type:"string",Description:"the property name in  points  from which z-values will be pulled"},{Argument:"options",Type:"Object",Description:"options on output"}],throws:[]},{name:"isolines",description:'Takes  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  with z-values and an array of\nvalue breaks and generates  <a target="_blank" href="http://en.wikipedia.org/wiki/Isoline">isolines</a>.',parent:null,snippet:"// create random points with random z-values in their properties\r\nvar points = turf.random('point', 100, {\r\n  bbox: [0, 30, 20, 50]\r\n});\r\nfor (var i = 0; i < points.features.length; i++) {\r\n  points.features[i].properties.z = Math.random() * 10;\r\n}\r\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\nvar isolines = turf.isolines(points, breaks, 'temperature');\r\n",example:"// create random points with random z-values in their properties\r\nvar points = turf.random('point', 100, {\r\n  bbox: [0, 30, 20, 50]\r\n});\r\nfor (var i = 0; i < points.features.length; i++) {\r\n  points.features[i].properties.z = Math.random() * 10;\r\n}\r\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\nvar isolines = turf.isolines(points, breaks, 'temperature');\r\n\r\n//addToMap\r\nvar addToMap = [isolines];",hasMap:!0,npmName:"isolines",returns:[{type:"FeatureCollection 〈MultiLineString〉",desc:"a FeatureCollection of  MultiLineString  features representing isolines"}],params:[{Argument:"points",Type:"FeatureCollection 〈Point〉",Description:"input points"},{Argument:"breaks",Type:"Array 〈number〉",Description:"values of  zProperty  where to draw isolines"},{Argument:"zProperty",Type:"string",Description:"the property name in  points  from which z-values will be pulled"},{Argument:"propertiesToAllIsolines",Type:"Object",Description:"GeoJSON properties passed to ALL isolines"},{Argument:"propertiesPerIsoline",Type:"Array 〈Object〉",Description:"GeoJSON properties passed, in order, to the correspondent\nisoline; the breaks array will define the order in which the isolines are created"}],throws:[]},{name:"planepoint",description:'Takes a triangular plane as a  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a> \nand a  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  within that triangle and returns the z-value\nat that point. The Polygon should have properties  a ,  b , and  c \nthat define the values at its three corners. Alternatively, the z-values\nof each triangle point can be provided by their respective 3rd coordinate\nif their values are not provided as properties.',parent:null,snippet:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.3221, 39.529]\r\n  }\r\n};\r\nvar point = turf.point([-75.3221, 39.529]);\r\n// triangle is a polygon with "a", "b",\r\n// and "c" values representing\r\n// the values of the coordinates in order.\r\nvar triangle = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "a": 11,\r\n    "b": 122,\r\n    "c": 44\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-75.1221, 39.57],\r\n      [-75.58, 39.18],\r\n      [-75.97, 39.86],\r\n      [-75.1221, 39.57]\r\n    ]]\r\n  }\r\n};\r\n\r\nvar zValue = turf.planepoint(point, triangle);\r\n',example:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [-75.3221, 39.529]\r\n  }\r\n};\r\nvar point = turf.point([-75.3221, 39.529]);\r\n// triangle is a polygon with "a", "b",\r\n// and "c" values representing\r\n// the values of the coordinates in order.\r\nvar triangle = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "a": 11,\r\n    "b": 122,\r\n    "c": 44\r\n  },\r\n  "geometry": {\r\n    "type": "Polygon",\r\n    "coordinates": [[\r\n      [-75.1221, 39.57],\r\n      [-75.58, 39.18],\r\n      [-75.97, 39.86],\r\n      [-75.1221, 39.57]\r\n    ]]\r\n  }\r\n};\r\n\r\nvar zValue = turf.planepoint(point, triangle);\r\n\r\n//addToMap\r\npoint.properties.zValue = zValue;\r\nvar addToMap = [triangle, point];',hasMap:!0,npmName:"planepoint",returns:[{type:"number",desc:"the z-value for  interpolatedPoint"}],params:[{Argument:"point",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"the Point for which a z-value will be calculated"},{Argument:"triangle",Type:"( Geometry | Feature 〈Polygon〉 )",Description:"a Polygon feature with three vertices"}],throws:[]},{name:"tin",description:'Takes a set of  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  and creates a\n <a target="_blank" href="http://en.wikipedia.org/wiki/Triangulated_irregular_network">Triangulated Irregular Network</a> ,\nor a TIN for short, returned as a collection of Polygons. These are often used\nfor developing elevation contour maps or stepped heat visualizations.',parent:null,snippet:"// generate some random point data\r\nvar points = turf.random('points', 30, {\r\n  bbox: [50, 30, 70, 50]\r\n});\r\n// add a random property to each point between 0 and 9\r\nfor (var i = 0; i < points.features.length; i++) {\r\n  points.features[i].properties.z = ~~(Math.random() * 9);\r\n}\r\nvar tin = turf.tin(points, 'z');\r\n",example:"// generate some random point data\r\nvar points = turf.random('points', 30, {\r\n  bbox: [50, 30, 70, 50]\r\n});\r\n// add a random property to each point between 0 and 9\r\nfor (var i = 0; i < points.features.length; i++) {\r\n  points.features[i].properties.z = ~~(Math.random() * 9);\r\n}\r\nvar tin = turf.tin(points, 'z');\r\n\r\n//addToMap\r\nvar addToMap = [tin, points]\r\nfor (var i = 0; i < tin.features.length; i++) {\r\n  var properties  = tin.features[i].properties;\r\n  properties.fill = '#' + properties.a + properties.b + properties.c;\r\n}",hasMap:!0,npmName:"tin",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"TIN output"}],params:[{Argument:"points",Type:"FeatureCollection 〈Point〉",Description:"input points"},{Argument:"z",Type:"Optional: String",Description:"name of the property from which to pull z values\nThis is optional: if not given, then there will be no extra data added to the derived triangles."}],throws:[]},{name:"idw",description:'Takes a FeatureCollection of points with known value, a power parameter, a cell depth, a unit of measurement\nand returns a FeatureCollection of polygons in a square-grid with an interpolated value property "IDW" for each grid cell.\nIt finds application when in need of creating a continuous surface (i.e. rainfall, temperature, chemical dispersion surface...)\nfrom a set of spatially scattered points.',parent:null,snippet:!1,example:!1,hasMap:!1,npmName:"idw",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"grid A grid of polygons with a property field named as  valueField"}],params:[{Argument:"controlPoints",Type:"FeatureCollection 〈Point〉",Description:"Sampled points with known value"},{Argument:"valueField",Type:"string",Description:"GeoJSON field containing the known value to interpolate on"},{Argument:"weight",Type:"number",Description:"Exponent regulating the distance-decay weighting"},{Argument:"cellWidth",Type:"number",Description:"The distance across each cell"},{Argument:"units",Type:"string",Description:"used in calculating cellSize, can be degrees, radians, miles, or kilometers"}],throws:[]},{name:"inside",description:'Takes a  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  and a  <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a>  or  <a target="_blank" href="http://geojson.org/geojson-spec.html#multipolygon">MultiPolygon</a>  and determines if the point resides inside the polygon. The polygon can\nbe convex or concave. The function accounts for holes.',parent:null,snippet:"var pt = turf.point([-77, 44]);\r\nvar poly = turf.polygon([[\r\n  [-81, 41],\r\n  [-81, 47],\r\n  [-72, 47],\r\n  [-72, 41],\r\n  [-81, 41]\r\n]]);\r\n\r\nvar isInside = turf.inside(pt, poly);\r\n",example:"var pt = turf.point([-77, 44]);\r\nvar poly = turf.polygon([[\r\n  [-81, 41],\r\n  [-81, 47],\r\n  [-72, 47],\r\n  [-72, 41],\r\n  [-81, 41]\r\n]]);\r\n\r\nvar isInside = turf.inside(pt, poly);\r\n\r\n//addToMap\r\npt.properties.isInside = isInside\r\nvar addToMap = [pt, poly]",hasMap:!0,npmName:"inside",returns:[{type:"boolean",desc:"true  if the Point is inside the Polygon;  false  if the Point is not inside the Polygon"}],params:[{Argument:"point",Type:"Feature 〈Point〉",Description:"input point"},{Argument:"polygon",Type:"Feature 〈〉",Description:"input polygon or multipolygon"},{Argument:"ignoreBoundary",Type:"boolean",Description:"True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false."}],throws:[]},{name:"within",description:'Takes a set of  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  and a set of  <a target="_blank" href="Polygon">polygons</a>  and returns the points that fall within the polygons.',parent:null,snippet:'var searchWithin = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Polygon",\r\n        "coordinates": [[\r\n          [-46.653,-23.543],\r\n          [-46.634,-23.5346],\r\n          [-46.613,-23.543],\r\n          [-46.614,-23.559],\r\n          [-46.631,-23.567],\r\n          [-46.653,-23.560],\r\n          [-46.653,-23.543]\r\n        ]]\r\n      }\r\n    }\r\n  ]\r\n};\r\nvar points = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.6318, -23.5523]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.6246, -23.5325]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.6062, -23.5513]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.663, -23.554]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.643, -23.557]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar ptsWithin = turf.within(points, searchWithin);\r\n',example:'var searchWithin = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Polygon",\r\n        "coordinates": [[\r\n          [-46.653,-23.543],\r\n          [-46.634,-23.5346],\r\n          [-46.613,-23.543],\r\n          [-46.614,-23.559],\r\n          [-46.631,-23.567],\r\n          [-46.653,-23.560],\r\n          [-46.653,-23.543]\r\n        ]]\r\n      }\r\n    }\r\n  ]\r\n};\r\nvar points = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.6318, -23.5523]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.6246, -23.5325]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.6062, -23.5513]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.663, -23.554]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [-46.643, -23.557]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar ptsWithin = turf.within(points, searchWithin);\r\n\r\n//addToMap\r\nvar addToMap = [points, searchWithin, ptsWithin]\r\nturf.featureEach(ptsWithin, function (currentFeature) {\r\n  currentFeature.properties[\'marker-size\'] = \'large\';\r\n  currentFeature.properties[\'marker-color\'] = \'#000\';\r\n});',hasMap:!0,npmName:"within",returns:[{type:"FeatureCollection 〈Point〉",desc:"points that land within at least one polygon"}],params:[{Argument:"points",Type:"FeatureCollection 〈Point〉",Description:"input points"},{Argument:"polygons",Type:"FeatureCollection 〈Polygon〉",Description:"input polygons"}],throws:[]},{name:"tag",description:'Takes a set of  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  and a set of  <a target="_blank" href="Polygon">polygons</a>  and performs a spatial join.',parent:null,snippet:"var pt1 = turf.point([-77, 44]);\r\nvar pt2 = turf.point([-77, 38]);\r\nvar poly1 = turf.polygon([[\r\n  [-81, 41],\r\n  [-81, 47],\r\n  [-72, 47],\r\n  [-72, 41],\r\n  [-81, 41]\r\n]], {pop: 3000});\r\nvar poly2 = turf.polygon([[\r\n  [-81, 35],\r\n  [-81, 41],\r\n  [-72, 41],\r\n  [-72, 35],\r\n  [-81, 35]\r\n]], {pop: 1000});\r\n\r\nvar points = turf.featureCollection([pt1, pt2]);\r\nvar polygons = turf.featureCollection([poly1, poly2]);\r\n\r\nvar tagged = turf.tag(points, polygons, 'pop', 'population');\r\n",example:"var pt1 = turf.point([-77, 44]);\r\nvar pt2 = turf.point([-77, 38]);\r\nvar poly1 = turf.polygon([[\r\n  [-81, 41],\r\n  [-81, 47],\r\n  [-72, 47],\r\n  [-72, 41],\r\n  [-81, 41]\r\n]], {pop: 3000});\r\nvar poly2 = turf.polygon([[\r\n  [-81, 35],\r\n  [-81, 41],\r\n  [-72, 41],\r\n  [-72, 35],\r\n  [-81, 35]\r\n]], {pop: 1000});\r\n\r\nvar points = turf.featureCollection([pt1, pt2]);\r\nvar polygons = turf.featureCollection([poly1, poly2]);\r\n\r\nvar tagged = turf.tag(points, polygons, 'pop', 'population');\r\n\r\n//addToMap\r\nvar addToMap = [tagged, polygons]",hasMap:!0,npmName:"tag",returns:[{type:"FeatureCollection 〈Point〉",desc:"points with  containingPolyId  property containing values from  polyId"}],params:[{Argument:"points",Type:"FeatureCollection 〈Point〉",Description:"input points"},{Argument:"polygons",Type:"FeatureCollection 〈Polygon〉",Description:"input polygons"},{Argument:"field",Type:"string",Description:"property in  polygons  to add to joined { <Point> } features"},{Argument:"outField",Type:"string",Description:"property in  points  in which to store joined property from  polygons"}],throws:[]},{name:"hexGrid",description:'Takes a bounding box and the diameter of the cell and returns a  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  of flat-topped\nhexagons or triangles ( <a target="_blank" href="http://geojson.org/geojson-spec.html#polygon">Polygon</a>  features) aligned in an "odd-q" vertical grid as\ndescribed in  <a target="_blank" href="http://www.redblobgames.com/grids/hexagons/">Hexagonal Grids</a>.',parent:null,snippet:"var bbox = [-96,31,-84,40];\r\nvar cellDiameter = 50;\r\nvar units = 'miles';\r\n\r\nvar hexgrid = turf.hexGrid(bbox, cellDiameter, units);\r\n",example:"var bbox = [-96,31,-84,40];\r\nvar cellDiameter = 50;\r\nvar units = 'miles';\r\n\r\nvar hexgrid = turf.hexGrid(bbox, cellDiameter, units);\r\n\r\n//addToMap\r\nvar addToMap = [hexgrid]",hasMap:!0,npmName:"hex-grid",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"a hexagonal grid"}],params:[{Argument:"bbox",Type:"Array 〈number〉",Description:"extent in  minX, minY, maxX, maxY  order"},{Argument:"cellDiameter",Type:"number",Description:"diameter of the circumcircle of the hexagons, in specified units"},{Argument:"units",Type:"string",Description:"used in calculating cell size, can be degrees, radians, miles, or kilometers"},{Argument:"triangles",Type:"boolean",Description:"whether to return as triangles instead of hexagons"}],throws:[]},{name:"pointGrid",description:'Creates a  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">Point</a>  grid from a bounding box,  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  or  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-objects">Feature</a>.',parent:null,snippet:"var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\r\nvar cellSide = 3;\r\nvar units = 'miles';\r\n\r\nvar grid = turf.pointGrid(extent, cellSide, units);\r\n",example:"var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\r\nvar cellSide = 3;\r\nvar units = 'miles';\r\n\r\nvar grid = turf.pointGrid(extent, cellSide, units);\r\n\r\n//addToMap\r\nvar addToMap = [grid];",hasMap:!0,npmName:"point-grid",returns:[{type:"FeatureCollection 〈Point〉",desc:"grid of points"}],params:[{Argument:"bbox",Type:"( Array 〈number〉 | FeatureCollection | Feature 〈any〉 )",Description:"extent in  minX, minY, maxX, maxY  order"},{Argument:"cellSide",Type:"number",Description:"the distance between points"},{Argument:"units",Type:"string",Description:"used in calculating cellSide, can be degrees, radians, miles, or kilometers"},{Argument:"centered",Type:"boolean",Description:"adjust points position to center the grid into bbox"},{Argument:"bboxIsMask",Type:"boolean",Description:"if true, and bbox is a Polygon or MultiPolygon, the grid Point will be created\nonly if inside the bbox Polygon(s)"}],throws:[]},{name:"squareGrid",description:'Creates a square grid from a bounding box,  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-objects">Feature</a>  or  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>.',parent:null,snippet:"var bbox = [-95, 30 ,-85, 40];\r\nvar cellSize = 50;\r\nvar units = 'miles';\r\n\r\nvar squareGrid = turf.squareGrid(bbox, cellSize, units);\r\n",example:"var bbox = [-95, 30 ,-85, 40];\r\nvar cellSize = 50;\r\nvar units = 'miles';\r\n\r\nvar squareGrid = turf.squareGrid(bbox, cellSize, units);\r\n\r\n//addToMap\r\nvar addToMap = [squareGrid]",hasMap:!0,npmName:"square-grid",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"grid a grid of polygons"}],params:[{Argument:"bbox",Type:"( Array 〈number〉 | FeatureCollection | Feature 〈any〉 )",Description:"extent in  minX, minY, maxX, maxY  order"},{Argument:"cellSize",Type:"number",Description:"width of each cell"},{Argument:"units",Type:"string",Description:"used in calculating cellSize, can be degrees, radians, miles, or kilometers"},{Argument:"completelyWithin",Type:"boolean",Description:"adjust width & height cellSize to fit exactly within bbox"}],throws:[]},{name:"triangleGrid",description:'Takes a bounding box and a cell depth and returns a set of triangular  <a target="_blank" href="Polygon">polygons</a>  in a grid.',parent:null,snippet:"var bbox = [-96,31,-84,40]\r\nvar cellSize = 10;\r\nvar units = 'miles';\r\n\r\nvar triangleGrid = turf.triangleGrid(bbox, cellSize, units);\r\n",example:"var bbox = [-96,31,-84,40]\r\nvar cellSize = 10;\r\nvar units = 'miles';\r\n\r\nvar triangleGrid = turf.triangleGrid(bbox, cellSize, units);\r\n\r\n//addToMap\r\nvar addToMap = [triangleGrid];",hasMap:!0,npmName:"triangle-grid",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"grid of polygons"}],params:[{Argument:"bbox",Type:"Array 〈number〉",Description:"extent in  minX, minY, maxX, maxY  order"},{Argument:"cellSize",Type:"number",Description:"dimension of each cell"},{Argument:"units",Type:"string",Description:"used in calculating cellSize, can be degrees, radians, miles, or kilometers"}],throws:[]},{name:"nearest",description:'Takes a reference  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">point</a>  and a FeatureCollection of Features\nwith Point geometries and returns the\npoint from the FeatureCollection closest to the reference. This calculation\nis geodesic.',parent:null,snippet:'var point = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "marker-color": "#0f0"\r\n  },\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [28.965797, 41.010086]\r\n  }\r\n};\r\nvar against = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [28.973865, 41.011122]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [28.948459, 41.024204]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [28.938674, 41.013324]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar nearest = turf.nearest(point, against);\r\n',example:'var point = {\r\n  "type": "Feature",\r\n  "properties": {\r\n    "marker-color": "#0f0"\r\n  },\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [28.965797, 41.010086]\r\n  }\r\n};\r\nvar against = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [28.973865, 41.011122]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [28.948459, 41.024204]\r\n      }\r\n    }, {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [28.938674, 41.013324]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nvar nearest = turf.nearest(point, against);\r\n\r\n//addToMap\r\nnearest.properties[\'marker-color\'] = \'#f00\';\r\nvar addToMap = [point, against, nearest];',hasMap:!0,npmName:"nearest",returns:[{type:"Feature 〈Point〉",desc:"the closest point in the set to the reference point"}],params:[{Argument:"targetPoint",Type:"Feature 〈Point〉",Description:"the reference point"},{Argument:"points",Type:"FeatureCollection 〈Point〉",Description:"against input point set"}],throws:[]},{name:"collect",description:"Merges a specified property from a FeatureCollection of points into a\nFeatureCollection of polygons. Given an  inProperty  on points and an  outProperty \nfor polygons, this finds every point that lies within each polygon, collects the\n inProperty  values from those points, and adds them as an array to  outProperty \non the polygon.",parent:null,snippet:"var poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\r\nvar poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\r\nvar polyFC = turf.featureCollection([poly1, poly2]);\r\nvar pt1 = turf.point([5,5], {population: 200});\r\nvar pt2 = turf.point([1,3], {population: 600});\r\nvar pt3 = turf.point([14,2], {population: 100});\r\nvar pt4 = turf.point([13,1], {population: 200});\r\nvar pt5 = turf.point([19,7], {population: 300});\r\nvar pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);\r\nvar collected = turf.collect(polyFC, pointFC, 'population', 'values');\r\nvar values = collected.features[0].properties.values\r\n//=values => [200, 600]\r\n",example:"var poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\r\nvar poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\r\nvar polyFC = turf.featureCollection([poly1, poly2]);\r\nvar pt1 = turf.point([5,5], {population: 200});\r\nvar pt2 = turf.point([1,3], {population: 600});\r\nvar pt3 = turf.point([14,2], {population: 100});\r\nvar pt4 = turf.point([13,1], {population: 200});\r\nvar pt5 = turf.point([19,7], {population: 300});\r\nvar pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);\r\nvar collected = turf.collect(polyFC, pointFC, 'population', 'values');\r\nvar values = collected.features[0].properties.values\r\n//=values => [200, 600]\r\n\r\n//addToMap\r\nvar addToMap = [pointFC, collected]",hasMap:!0,npmName:"collect",returns:[{type:"FeatureCollection 〈Polygon〉",desc:"polygons with properties listed based on  outField"}],params:[{Argument:"polygons",Type:"FeatureCollection 〈Polygon〉",Description:"polygons with values on which to aggregate"},{Argument:"points",Type:"FeatureCollection 〈Point〉",Description:"points to be aggregated"},{Argument:"inProperty",Type:"string",Description:"property to be nested from"},{Argument:"outProperty",Type:"string",Description:"property to be nested into"}],throws:[]},{name:"coordAll",description:"Get all coordinates from any GeoJSON object.",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nvar coords = turf.coordAll(features);\r\n//=coords',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nvar coords = turf.coordAll(features);\r\n//=coords',hasMap:!1,npmName:"meta",returns:[{type:"Array 〈〉",desc:"coordinate position array"}],params:[{Argument:"geojson",Type:"( Geometry | FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON object"}],throws:[]},{name:"coordEach",description:"Iterate over coordinates in any GeoJSON object, similar to Array.forEach()",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.coordEach(features, function (currentCoords, currentIndex) {\r\n  //=currentCoords\r\n  //=currentIndex\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.coordEach(features, function (currentCoords, currentIndex) {\r\n  //=currentCoords\r\n  //=currentIndex\r\n});',hasMap:!1,npmName:"meta",returns:[],params:[{Argument:"geojson",Type:"( FeatureCollection | Geometry | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (currentCoords, currentIndex)"},{Argument:"excludeWrapCoord",Type:"boolean",Description:"whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration."}],throws:[]},{name:"coordReduce",description:"Reduce coordinates in any GeoJSON object, similar to Array.reduce()",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.coordReduce(features, function (previousValue, currentCoords, currentIndex) {\r\n  //=previousValue\r\n  //=currentCoords\r\n  //=currentIndex\r\n  return currentCoords;\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.coordReduce(features, function (previousValue, currentCoords, currentIndex) {\r\n  //=previousValue\r\n  //=currentCoords\r\n  //=currentIndex\r\n  return currentCoords;\r\n});',hasMap:!1,npmName:"meta",returns:[{desc:"The value that results from the reduction."}],params:[{Argument:"geojson",Type:"( FeatureCollection | Geometry | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (previousValue, currentCoords, currentIndex)"},{Argument:"initialValue",Type:"Optional: undefined",Description:"Value to use as the first argument to the first call of the callback."},{Argument:"excludeWrapCoord",Type:"boolean",Description:"whether or not to include\nthe final coordinate of LinearRings that wraps the ring in its iteration."}],throws:[]},{name:"featureEach",description:"Iterate over features in any GeoJSON object, similar to\nArray.forEach.",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.featureEach(features, function (currentFeature, currentIndex) {\r\n  //=currentFeature\r\n  //=currentIndex\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.featureEach(features, function (currentFeature, currentIndex) {\r\n  //=currentFeature\r\n  //=currentIndex\r\n});',hasMap:!1,npmName:"meta",returns:[],params:[{Argument:"geojson",Type:"( Geometry | FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (currentFeature, currentIndex)"}],throws:[]},{name:"featureReduce",description:"Reduce features in any GeoJSON object, similar to Array.reduce().",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.featureReduce(features, function (previousValue, currentFeature, currentIndex) {\r\n  //=previousValue\r\n  //=currentFeature\r\n  //=currentIndex\r\n  return currentFeature\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.featureReduce(features, function (previousValue, currentFeature, currentIndex) {\r\n  //=previousValue\r\n  //=currentFeature\r\n  //=currentIndex\r\n  return currentFeature\r\n});',hasMap:!1,npmName:"meta",returns:[{desc:"The value that results from the reduction."}],params:[{Argument:"geojson",Type:"( Geometry | FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (previousValue, currentFeature, currentIndex)"},{Argument:"initialValue",Type:"Optional: undefined",Description:"Value to use as the first argument to the first call of the callback."}],throws:[]},{name:"flattenEach",description:"Iterate over flattened features in any GeoJSON object, similar to\nArray.forEach.",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "MultiPoint",\r\n        "coordinates": [ [36, 53], [46, 69] ]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.flattenEach(features, function (currentFeature, currentIndex, currentSubIndex) {\r\n  //=currentFeature\r\n  //=currentIndex\r\n  //=currentSubIndex\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "MultiPoint",\r\n        "coordinates": [ [36, 53], [46, 69] ]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.flattenEach(features, function (currentFeature, currentIndex, currentSubIndex) {\r\n  //=currentFeature\r\n  //=currentIndex\r\n  //=currentSubIndex\r\n});',hasMap:!1,npmName:"meta",returns:[],params:[{Argument:"geojson",Type:"( Geometry | FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (currentFeature, currentIndex, currentSubIndex)"}],throws:[]},{name:"flattenReduce",description:"Reduce flattened features in any GeoJSON object, similar to Array.reduce().",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "MultiPoint",\r\n        "coordinates": [ [36, 53], [46, 69] ]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.flattenReduce(features, function (previousValue, currentFeature, currentIndex, currentSubIndex) {\r\n  //=previousValue\r\n  //=currentFeature\r\n  //=currentIndex\r\n  //=currentSubIndex\r\n  return currentFeature\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "MultiPoint",\r\n        "coordinates": [ [36, 53], [46, 69] ]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.flattenReduce(features, function (previousValue, currentFeature, currentIndex, currentSubIndex) {\r\n  //=previousValue\r\n  //=currentFeature\r\n  //=currentIndex\r\n  //=currentSubIndex\r\n  return currentFeature\r\n});',hasMap:!1,npmName:"meta",returns:[{desc:"The value that results from the reduction."}],params:[{Argument:"geojson",Type:"( Geometry | FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (previousValue, currentFeature, currentIndex, currentSubIndex)"},{Argument:"initialValue",Type:"Optional: undefined",Description:"Value to use as the first argument to the first call of the callback."}],throws:[]},{name:"getCoord",description:"Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.",parent:"invariant",snippet:!1,example:!1,hasMap:!1,npmName:"invariant",returns:[{type:"Array 〈number〉",desc:"coordinates"}],params:[{Argument:"obj",Type:"( Array 〈any〉 | Geometry | Feature 〈Point〉 )",Description:"any value"}],throws:[]},{name:"getCoords",description:"Unwrap coordinates from a Feature, Geometry Object or an Array of numbers",parent:"invariant",snippet:!1,example:!1,hasMap:!1,npmName:"invariant",returns:[{type:"Array 〈any〉",desc:"coordinates"}],params:[{Argument:"obj",Type:"( Array 〈any〉 | Geometry | Feature 〈any〉 )",Description:"any value"}],throws:[]},{name:"getGeom",description:"Get Geometry from Feature or Geometry Object",parent:"invariant",snippet:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [110, 40]\r\n  }\r\n}\r\nvar geom = invariant.getGeom(point)\r\n//={"type": "Point", "coordinates": [110, 40]}',example:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [110, 40]\r\n  }\r\n}\r\nvar geom = invariant.getGeom(point)\r\n//={"type": "Point", "coordinates": [110, 40]}',hasMap:!1,npmName:"invariant",returns:[{type:"Geometry 〈any〉",desc:"GeoJSON Geometry Object"}],params:[{Argument:"geojson",Type:"( Feature 〈any〉 | Geometry 〈any〉 )",Description:"GeoJSON Feature or Geometry Object"}],throws:[{type:"Error",desc:"if geojson is not a Feature or Geometry Object"}]},{name:"getGeomType",description:"Get Geometry Type from Feature or Geometry Object",parent:"invariant",snippet:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [110, 40]\r\n  }\r\n}\r\nvar geom = invariant.getGeom(point)\r\n//="Point"',example:'var point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [110, 40]\r\n  }\r\n}\r\nvar geom = invariant.getGeom(point)\r\n//="Point"',hasMap:!1,npmName:"invariant",returns:[{type:"string",desc:"GeoJSON Geometry Type"}],params:[{Argument:"geojson",Type:"( Feature 〈any〉 | Geometry 〈any〉 )",Description:"GeoJSON Feature or Geometry Object"}],throws:[{type:"Error",desc:"if geojson is not a Feature or Geometry Object"}]},{name:"geomEach",description:"Iterate over each geometry in any GeoJSON object, similar to Array.forEach()",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.geomEach(features, function (currentGeometry, currentIndex, currentProperties) {\r\n  //=currentGeometry\r\n  //=currentIndex\r\n  //=currentProperties\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.geomEach(features, function (currentGeometry, currentIndex, currentProperties) {\r\n  //=currentGeometry\r\n  //=currentIndex\r\n  //=currentProperties\r\n});',hasMap:!1,npmName:"meta",returns:[],params:[{Argument:"geojson",Type:"( Geometry | FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (currentGeometry, currentIndex, currentProperties)"}],throws:[]},{name:"geomReduce",description:"Reduce geometry in any GeoJSON object, similar to Array.reduce().",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.geomReduce(features, function (previousValue, currentGeometry, currentIndex) {\r\n  //=previousValue\r\n  //=currentGeometry\r\n  //=currentIndex\r\n  return currentGeometry\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.geomReduce(features, function (previousValue, currentGeometry, currentIndex) {\r\n  //=previousValue\r\n  //=currentGeometry\r\n  //=currentIndex\r\n  return currentGeometry\r\n});',hasMap:!1,npmName:"meta",returns:[{desc:"The value that results from the reduction."}],params:[{Argument:"geojson",Type:"( Geometry | FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (previousValue, currentGeometry, currentIndex, currentProperties)"},{Argument:"initialValue",Type:"Optional: undefined",Description:"Value to use as the first argument to the first call of the callback."}],throws:[]},{name:"propEach",description:"Iterate over properties in any GeoJSON object, similar to Array.forEach()",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.propEach(features, function (currentProperties, currentIndex) {\r\n  //=currentProperties\r\n  //=currentIndex\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.propEach(features, function (currentProperties, currentIndex) {\r\n  //=currentProperties\r\n  //=currentIndex\r\n});',hasMap:!1,npmName:"meta",returns:[],params:[{Argument:"geojson",Type:"( FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (currentProperties, currentIndex)"}],throws:[]},{name:"propReduce",description:"Reduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.",parent:"meta",snippet:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.propReduce(features, function (previousValue, currentProperties, currentIndex) {\r\n  //=previousValue\r\n  //=currentProperties\r\n  //=currentIndex\r\n  return currentProperties\r\n});',example:'var features = {\r\n  "type": "FeatureCollection",\r\n  "features": [\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"foo": "bar"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [26, 37]\r\n      }\r\n    },\r\n    {\r\n      "type": "Feature",\r\n      "properties": {"hello": "world"},\r\n      "geometry": {\r\n        "type": "Point",\r\n        "coordinates": [36, 53]\r\n      }\r\n    }\r\n  ]\r\n};\r\nturf.propReduce(features, function (previousValue, currentProperties, currentIndex) {\r\n  //=previousValue\r\n  //=currentProperties\r\n  //=currentIndex\r\n  return currentProperties\r\n});',hasMap:!1,npmName:"meta",returns:[{desc:"The value that results from the reduction."}],params:[{Argument:"geojson",Type:"( FeatureCollection | Feature 〈any〉 )",Description:"any GeoJSON object"},{Argument:"callback",Type:"Function",Description:"a method that takes (previousValue, currentProperties, currentIndex)"},{Argument:"initialValue",Type:"Optional: undefined",Description:"Value to use as the first argument to the first call of the callback."}],throws:[]},{name:"collectionOf",description:'Enforce expectations about types of  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-collection-objects">FeatureCollection</a>  inputs for Turf.\nInternally this uses  <a target="_blank" href="geojsonType">geojsonType</a>  to judge geometry types.',parent:"invariant",snippet:!1,example:!1,hasMap:!1,npmName:"invariant",returns:[],params:[{Argument:"featureCollection",Type:"FeatureCollection",Description:"a FeatureCollection for which features will be judged"},{Argument:"type",Type:"string",Description:"expected GeoJSON type"},{Argument:"name",Type:"string",Description:"name of calling function"}],throws:[{type:"Error",desc:"if value is not the expected type."}]},{name:"containsNumber",description:"Checks if coordinates contains a number",parent:"invariant",snippet:!1,example:!1,hasMap:!1,npmName:"invariant",returns:[{type:"boolean",desc:"true if Array contains a number"}],params:[{Argument:"coordinates",Type:"Array 〈any〉",Description:"GeoJSON Coordinates"}],throws:[]},{name:"geojsonType",description:"Enforce expectations about types of GeoJSON objects for Turf.",parent:"invariant",snippet:!1,example:!1,hasMap:!1,npmName:"invariant",returns:[],params:[{Argument:"value",Type:"GeoJSON",Description:"any GeoJSON object"},{Argument:"type",Type:"string",Description:"expected GeoJSON type"},{Argument:"name",Type:"string",Description:"name of calling function"}],throws:[{type:"Error",desc:"if value is not the expected type."}]},{name:"featureOf",description:'Enforce expectations about types of  <a target="_blank" href="http://geojson.org/geojson-spec.html#feature-objects">Feature</a>  inputs for Turf.\nInternally this uses  <a target="_blank" href="geojsonType">geojsonType</a>  to judge geometry types.',parent:"invariant",snippet:!1,example:!1,hasMap:!1,npmName:"invariant",returns:[],params:[{Argument:"feature",Type:"Feature",Description:"a feature with an expected geometry type"},{Argument:"type",Type:"string",Description:"expected GeoJSON type"},{Argument:"name",Type:"string",Description:"name of calling function"}],throws:[{type:"Error",desc:"error if value is not the expected type."}]},{name:"booleanClockwise",description:"Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.",parent:null,snippet:"var clockwiseRing = [[0,0],[1,1],[1,0],[0,0]]\r\nvar counterClockwiseRing = [[0,0],[1,0],[1,1],[0,0]]\r\n\r\nturf.booleanClockwise(clockwiseRing)\r\n//=true\r\nturf.booleanClockwise(counterClockwiseRing)\r\n//=false",example:"var clockwiseRing = [[0,0],[1,1],[1,0],[0,0]]\r\nvar counterClockwiseRing = [[0,0],[1,0],[1,1],[0,0]]\r\n\r\nturf.booleanClockwise(clockwiseRing)\r\n//=true\r\nturf.booleanClockwise(counterClockwiseRing)\r\n//=false",hasMap:!1,npmName:"boolean-clockwise",returns:[{type:"Boolean",desc:"true/false"}],params:[{Argument:"line",Type:"( Geometry | Feature 〈LineString〉 | Array 〈〉 )",Description:"to be evaluated"}],throws:[]},{name:"booleanContains",description:"Boolean-contains returns True if the second geometry is completely contained by the first geometry.\nThe interiors of both geometries must intersect and, the interior and boundary of the secondary (geometry b)\nmust not intersect the exterior of the primary (geometry a).\nBoolean-contains returns the exact opposite result of the  @turf/boolean-within.",parent:null,snippet:'const point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [1, 2]\r\n  }\r\n}\r\nconst line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[1, 1], [1, 2], [1, 3], [1, 4]]\r\n  }\r\n}\r\nturf.booleanContains(line, point);\r\n//=true',example:'const point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [1, 2]\r\n  }\r\n}\r\nconst line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[1, 1], [1, 2], [1, 3], [1, 4]]\r\n  }\r\n}\r\nturf.booleanContains(line, point);\r\n//=true',hasMap:!1,npmName:"boolean-contains",returns:[{type:"Boolean",desc:"true/false"}],params:[{Argument:"feature1",Type:"( Geometry | Feature 〈any〉 )",Description:"GeoJSON Feature or Geometry"},{Argument:"feature2",Type:"( Geometry | Feature 〈any〉 )",Description:"GeoJSON Feature or Geometry"}],throws:[]},{name:"booleanCrosses",description:"Boolean-Crosses returns True if the intersection results in a geometry whose dimension is one less than\nthe maximum dimension of the two source geometries and the intersection set is interior to\nboth source geometries.",parent:null,snippet:"var cross = turf.booleanCrosses(feature1, feature2);",example:"var cross = turf.booleanCrosses(feature1, feature2);",hasMap:!1,npmName:"boolean-crosses",returns:[{type:"Boolean",desc:"true/false"}],params:[{Argument:"feature1",Type:"( Geometry | Feature 〈any〉 )",Description:"GeoJSON Feature or Geometry"},{Argument:"feature2",Type:"( Geometry | Feature 〈any〉 )",Description:"GeoJSON Feature or Geometry"}],throws:[]},{name:"booleanDisjoint",description:"Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.",parent:null,snippet:'const point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [2, 2]\r\n  }\r\n}\r\nconst line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[1, 1], [1, 2], [1, 3], [1, 4]]\r\n  }\r\n}\r\nturf.booleanDisjoint(line, point);\r\n//=true',example:'const point = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "Point",\r\n    "coordinates": [2, 2]\r\n  }\r\n}\r\nconst line = {\r\n  "type": "Feature",\r\n  "properties": {},\r\n  "geometry": {\r\n    "type": "LineString",\r\n    "coordinates": [[1, 1], [1, 2], [1, 3], [1, 4]]\r\n  }\r\n}\r\nturf.booleanDisjoint(line, point);\r\n//=true',hasMap:!1,npmName:"boolean-disjoint",returns:[{type:"Boolean",desc:"true/false"}],params:[{Argument:"feature1",Type:"( Geometry | Feature 〈any〉 )",Description:"GeoJSON Feature or Geometry"},{Argument:"feature2",Type:"( Geometry | Feature 〈any〉 )",Description:"GeoJSON Feature or Geometry"}],throws:[]},{name:"bearingToAngle",description:"Converts any bearing angle from the north line direction (positive clockwise)\nand returns an angle between 0-360 degrees (positive clockwise), 0 being the north line",parent:"helpers",snippet:!1,example:!1,hasMap:!1,npmName:"helpers",returns:[{type:"number",desc:"angle between 0 and 360 degrees"}],params:[{Argument:"bearing",Type:"number",Description:"angle, between -180 and +180 degrees"}],throws:[]},{name:"convertDistance",description:"Converts a distance to the requested unit.\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet",parent:"helpers",snippet:!1,example:!1,hasMap:!1,npmName:"helpers",returns:[{type:"number",desc:"the converted distance"}],params:[{Argument:"distance",Type:"number",Description:"to be converted"},{Argument:"originalUnit",Type:"string",Description:"of the distance"},{Argument:"finalUnit",Type:"string",Description:"returned unit"}],throws:[]},{name:"degrees2radians",description:"Converts an angle in degrees to radians",parent:"helpers",snippet:!1,example:!1,hasMap:!1,npmName:"helpers",returns:[{type:"number",desc:"angle in radians"}],params:[{Argument:"degrees",Type:"number",Description:"angle between 0 and 360 degrees"}],throws:[]},{name:"distanceToRadians",description:"Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet",parent:"helpers",snippet:!1,example:!1,hasMap:!1,npmName:"helpers",returns:[{type:"number",desc:"radians"}],params:[{Argument:"distance",Type:"number",Description:"in real units"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers."}],throws:[]},{name:"distanceToDegrees",description:"Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\nValid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet",parent:"helpers",snippet:!1,example:!1,hasMap:!1,npmName:"helpers",returns:[{type:"number",desc:"degrees"}],params:[{Argument:"distance",Type:"number",Description:"in real units"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers."}],throws:[]},{name:"radiansToDistance",description:"Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet",parent:"helpers",snippet:!1,example:!1,hasMap:!1,npmName:"helpers",returns:[{type:"number",desc:"distance"}],params:[{Argument:"radians",Type:"number",Description:"in radians across the sphere"},{Argument:"units",Type:"string",Description:"can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers."}],throws:[]},{name:"radians2degrees",description:"Converts an angle in radians to degrees",parent:"helpers",snippet:!1,example:!1,hasMap:!1,npmName:"helpers",returns:[{type:"number",desc:"degrees between 0 and 360 degrees"}],params:[{Argument:"radians",Type:"number",Description:"angle in radians"}],throws:[]},{name:"clusters",description:'Takes a set of  <a target="_blank" href="http://geojson.org/geojson-spec.html#point">points</a>  and partition them into clusters using the k-mean.\nIt uses the  <a target="_blank" href="https://en.wikipedia.org/wiki/K-means_clustering">k-means algorithm</a>',parent:null,snippet:"// create random points with random z-values in their properties\r\nvar points = turf.random('point', 100, {\r\n  bbox: [0, 30, 20, 50]\r\n});\r\nvar numberOfClusters = 7;\r\nvar clustered = turf.clusters(points, numberOfClusters);\r\n",example:"// create random points with random z-values in their properties\r\nvar points = turf.random('point', 100, {\r\n  bbox: [0, 30, 20, 50]\r\n});\r\nvar numberOfClusters = 7;\r\nvar clustered = turf.clusters(points, numberOfClusters);\r\n\r\n//addToMap\r\nvar addToMap = featureCollection(clustered.points);",hasMap:!0,npmName:"clusters",returns:[{type:"Object",desc:"an object containing a  points  FeatureCollection, the input points where each Point\n    has given a  cluster  property with the cluster number it belongs, and a  centroids  FeatureCollection of\n    Points, collecting all the cluster centroids each with its own  cluster  property."}],params:[{Argument:"points",Type:"FeatureCollection 〈Point〉",Description:"to be clustered"},{Argument:"numberOfClusters",Type:"number",Description:"numberOfClusters that will be generated"}],throws:[]},{name:"removeEmptyPolygon",description:"Detect Empty Polygon",parent:null,snippet:!1,example:!1,hasMap:!1,npmName:"remove-empty-polygon",returns:[{type:"( Geometry 〈〉 |  )",desc:"removed any polygons with no areas"}],params:[{Argument:"geom",Type:"Geometry 〈〉",Description:"Geometry Object"}],throws:[]},{name:"ab",description:'<a target="_blank" href="https://github.com/rook2pawn/node-intersection">https://github.com/rook2pawn/node-intersection</a>',parent:null,snippet:!1,example:!1,hasMap:!1,npmName:"ab",returns:[],params:[],throws:[]},{name:"rotate",description:'Rotates any geojson Feature or Geometry of a specified angle, around its  centroid  or a given  pivot  point;\nall rotations follow the right-hand rule:  <a target="_blank" href="https://en.wikipedia.org/wiki/Right-hand_rule">https://en.wikipedia.org/wiki/Right-hand_rule</a>',parent:null,snippet:"var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\r\nvar rotatedPoly = turf.rotate(poly, 100, [15, 15]);\r\n",example:"var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\r\nvar rotatedPoly = turf.rotate(poly, 100, [15, 15]);\r\n\r\n//addToMap\r\nrotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\r\nvar addToMap = [poly, rotatedPoly];",hasMap:!0,npmName:"rotate",returns:[{type:"GeoJSON",desc:"the rotated GeoJSON feature"}],params:[{Argument:"geojson",Type:"GeoJSON",Description:"object to be rotated"},{Argument:"angle",Type:"number",Description:"of rotation (along the vertical axis), from North in decimal degrees, negative clockwise"},{Argument:"pivot",Type:"( Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"point around which the rotation will be performed"},{Argument:"mutate",Type:"boolean",Description:"allows GeoJSON input to be mutated (significant performance increase if true)"}],throws:[]},{name:"scale",description:"Scale a GeoJSON from a given point by a factor of scaling (ex: factor=2 would make the GeoJSON 200% larger).\nIf a FeatureCollection is provided, the origin point will be calculated based on each individual Feature.",parent:null,snippet:"var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\r\nvar scaledPoly = turf.scale(poly, 3);\r\n",example:"var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\r\nvar scaledPoly = turf.scale(poly, 3);\r\n\r\n//addToMap\r\nscaledPoly.properties = {stroke: '#F00', 'stroke-width': 4};\r\nvar addToMap = [poly, scaledPoly];",hasMap:!0,npmName:"scale",returns:[{type:"GeoJSON",desc:"scaled GeoJSON"}],params:[{Argument:"geojson",Type:"GeoJSON",Description:"GeoJSON to be scaled"},{Argument:"factor",Type:"number",Description:"of scaling, positive or negative values greater than 0"},{Argument:"origin",Type:"( string | Geometry | Feature 〈Point〉 | Array 〈number〉 )",Description:"Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)"},{Argument:"mutate",Type:"boolean",Description:"allows GeoJSON input to be mutated (significant performance increase if true)"}],throws:[]},{name:"translate",description:"Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line\non the provided direction angle.",parent:null,snippet:"var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\r\nvar translatedPoly = turf.translate(poly, 100, 35);\r\n",example:"var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\r\nvar translatedPoly = turf.translate(poly, 100, 35);\r\n\r\n//addToMap\r\ntranslatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\r\nvar addToMap = [poly, translatedPoly];",hasMap:!0,npmName:"translate",returns:[{type:"GeoJSON",desc:"the translated GeoJSON object"}],params:[{Argument:"geojson",Type:"GeoJSON",Description:"object to be translated"},{Argument:"distance",Type:"number",Description:"length of the motion; negative values determine motion in opposite direction"},{Argument:"direction",Type:"number",Description:"of the motion; angle from North in decimal degrees, positive clockwise"},{Argument:"units",Type:"string",Description:"in which  distance  will be express; miles, kilometers, degrees, or radians"},{Argument:"zTranslation",Type:"number",Description:"length of the vertical motion, same unit of distance"},{Argument:"mutate",Type:"boolean",Description:"allows GeoJSON input to be mutated (significant performance increase if true)"}],throws:[]}]}},"2VjF":function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("div",[n("Col",{attrs:{span:"24"}},[n("h1",[e._v("Welcome to Turf.js")])]),e._v(" "),n("Row",[n("Col",{attrs:{span:"7",offset:"3"}},[n("div",{attrs:{id:"inMap"}})]),e._v(" "),n("Col",{staticClass:"selector",attrs:{span:"2",offset:"1"}},[n("Select",{on:{"on-change":e.changeOperation},model:{value:e.operation,callback:function(r){e.operation=r},expression:"operation"}},e._l(e.turfOperations,function(r){return n("Option",{key:r,attrs:{value:r}},[e._v(e._s(r))])}))],1),e._v(" "),n("Col",{attrs:{span:"7",offset:"1"}},[n("div",{attrs:{id:"outMap"}})])],1),e._v(" "),n("br"),e._v(" "),n("h2",[e._v("Advanced geospatial analysis for browsers and Node.js")]),e._v(" "),n("br"),e._v(" "),n("Col",{attrs:{span:"7"}},[n("h3",[e._v("Simple")]),e._v(" "),n("p",[e._v("Modular, simple-to-understand JavaScript functions that speak GeoJSON")])]),e._v(" "),n("Col",{attrs:{span:"7",offset:"1"}},[n("h3",[e._v("Modular")]),e._v(" "),n("p",[e._v("Turf is a collection of small modules, you only need to take what you want to use")])]),e._v(" "),n("Col",{attrs:{span:"7",offset:"1"}},[n("h3",[e._v("Fast")]),e._v(" "),n("p",[e._v("Takes advantage of the newest algorithms and doesn't require you to send data to a server")])])],1)},o=[],a={render:t,staticRenderFns:o};r.a=a},"2iAY":function(e,r,n){"use strict";var t=n("BO1k"),o=n.n(t),a=n("mvHQ"),i=n.n(a),s=n("bOdI"),l=n.n(s),p=n("vrLH"),u=n("L6pp"),c=n("iZNE"),d=n("9Xvl"),m=n("TCv/"),h=n("uzR6"),g=n("7zzk"),f=n("sWI9"),y=n("uk2G"),v=n.n(y),b="ivu-table",x=1,F=1;r.a={name:"Table",mixins:[f.a],components:{tableHead:p.a,tableBody:u.a,Spin:c.a},props:{data:{type:Array,default:function(){return[]}},columns:{type:Array,default:function(){return[]}},size:{validator:function(e){return n.i(d.b)(e,["small","large","default"])}},width:{type:[Number,String]},height:{type:[Number,String]},stripe:{type:Boolean,default:!1},border:{type:Boolean,default:!1},showHeader:{type:Boolean,default:!0},highlightRow:{type:Boolean,default:!1},rowClassName:{type:Function,default:function(){return""}},context:{type:Object},noDataText:{type:String},noFilteredDataText:{type:String},disabledHover:{type:Boolean},loading:{type:Boolean,default:!1}},data:function(){return{ready:!1,tableWidth:0,columnsWidth:{},prefixCls:b,compiledUids:[],objData:this.makeObjData(),rebuildData:[],cloneColumns:this.makeColumns(),showSlotHeader:!0,showSlotFooter:!0,bodyHeight:0,bodyRealHeight:0,scrollBarWidth:n.i(d.d)(),currentContext:this.context,cloneData:n.i(d.e)(this.data)}},computed:{localeNoDataText:function(){return void 0===this.noDataText?this.t("i.table.noDataText"):this.noDataText},localeNoFilteredDataText:function(){return void 0===this.noFilteredDataText?this.t("i.table.noFilteredDataText"):this.noFilteredDataText},wrapClasses:function(){var e;return["ivu-table-wrapper",(e={},l()(e,"ivu-table-hide",!this.ready),l()(e,"ivu-table-with-header",this.showSlotHeader),l()(e,"ivu-table-with-footer",this.showSlotFooter),e)]},classes:function(){var e;return["ivu-table",(e={},l()(e,"ivu-table-"+this.size,!!this.size),l()(e,"ivu-table-border",this.border),l()(e,"ivu-table-stripe",this.stripe),l()(e,"ivu-table-with-fixed-top",!!this.height),e)]},fixedHeaderClasses:function(){return["ivu-table-fixed-header",l()({},"ivu-table-fixed-header-with-empty",!this.rebuildData.length)]},styles:function(){var e={};if(this.height){var r=this.isLeftFixed||this.isRightFixed?parseInt(this.height)+this.scrollBarWidth:parseInt(this.height);e.height=r+"px"}return this.width&&(e.width=this.width+"px"),e},tableStyle:function(){var e={};if(0!==this.tableWidth){var r="";r=0===this.bodyHeight?this.tableWidth:this.bodyHeight>this.bodyRealHeight?this.tableWidth:this.tableWidth-this.scrollBarWidth,e.width=r+"px"}return e},fixedTableStyle:function(){var e={},r=0;return this.leftFixedColumns.forEach(function(e){e.fixed&&"left"===e.fixed&&(r+=e._width)}),e.width=r+"px",e},fixedRightTableStyle:function(){var e={},r=0;return this.rightFixedColumns.forEach(function(e){e.fixed&&"right"===e.fixed&&(r+=e._width)}),r+=this.scrollBarWidth,e.width=r+"px",e},bodyStyle:function(){var e={};if(0!==this.bodyHeight){var r=this.isLeftFixed||this.isRightFixed?this.bodyHeight+this.scrollBarWidth:this.bodyHeight;e.height=r+"px"}return e},fixedBodyStyle:function(){var e={};if(0!==this.bodyHeight){var r=this.bodyHeight+this.scrollBarWidth-1;this.width&&this.width<this.tableWidth&&(r=this.bodyHeight),e.height=this.scrollBarWidth>0?r+"px":r-1+"px"}return e},leftFixedColumns:function(){var e=[],r=[];return this.cloneColumns.forEach(function(n){n.fixed&&"left"===n.fixed?e.push(n):r.push(n)}),e.concat(r)},rightFixedColumns:function(){var e=[],r=[];return this.cloneColumns.forEach(function(n){n.fixed&&"right"===n.fixed?e.push(n):r.push(n)}),e.concat(r)},isLeftFixed:function(){return this.columns.some(function(e){return e.fixed&&"left"===e.fixed})},isRightFixed:function(){return this.columns.some(function(e){return e.fixed&&"right"===e.fixed})}},methods:{rowClsName:function(e){return this.rowClassName(this.data[e],e)},handleResize:function(){var e=this;this.$nextTick(function(){var r=!e.columns.some(function(e){return!e.width});e.tableWidth=r?e.columns.map(function(e){return e.width}).reduce(function(e,r){return e+r},0):parseInt(n.i(d.f)(e.$el,"width"))-1,e.columnsWidth={},e.$nextTick(function(){var t={},o=-1;if(r&&(o=e.cloneColumns.findIndex(function(e){return!e.width})),e.data.length){for(var a=e.$refs.tbody.$el.querySelectorAll("tbody tr")[0].children,i=0;i<a.length;i++){var s=e.cloneColumns[i],l=parseInt(n.i(d.f)(a[i],"width"));i===o&&(l=parseInt(n.i(d.f)(a[i],"width"))-1),s.width&&(l=s.width),e.cloneColumns[i]._width=l,t[s._index]={width:l}}e.columnsWidth=t}}),e.bodyRealHeight=parseInt(n.i(d.f)(e.$refs.tbody.$el,"height"))})},handleMouseIn:function(e){this.disabledHover||this.objData[e]._isHover||(this.objData[e]._isHover=!0)},handleMouseOut:function(e){this.disabledHover||(this.objData[e]._isHover=!1)},handleCurrentRow:function(e,r){var n=-1;for(var t in this.objData)this.objData[t]._isHighlight&&(n=parseInt(t),this.objData[t]._isHighlight=!1);"highlight"===e&&(this.objData[r]._isHighlight=!0);var o=n<0?null:JSON.parse(i()(this.cloneData[n])),a="highlight"===e?JSON.parse(i()(this.cloneData[r])):null;this.$emit("on-current-change",a,o)},highlightCurrentRow:function(e){this.highlightRow&&!this.objData[e]._isHighlight&&this.handleCurrentRow("highlight",e)},clearCurrentRow:function(){this.highlightRow&&this.handleCurrentRow("clear")},clickCurrentRow:function(e){this.highlightCurrentRow(e),this.$emit("on-row-click",JSON.parse(i()(this.cloneData[e])),e)},dblclickCurrentRow:function(e){this.highlightCurrentRow(e),this.$emit("on-row-dblclick",JSON.parse(i()(this.cloneData[e])),e)},getSelection:function(){var e=[];for(var r in this.objData)this.objData[r]._isChecked&&e.push(parseInt(r));return JSON.parse(i()(this.data.filter(function(r,n){return e.indexOf(n)>-1})))},toggleSelect:function(e){var r={};for(var n in this.objData)parseInt(n)===e&&(r=this.objData[n]);var t=!r._isChecked;this.objData[e]._isChecked=t;var o=this.getSelection();this.$emit(t?"on-select":"on-select-cancel",o,JSON.parse(i()(this.data[e]))),this.$emit("on-selection-change",o)},toggleExpand:function(e){var r={};for(var n in this.objData)parseInt(n)===e&&(r=this.objData[n]);var t=!r._isExpanded;this.objData[e]._isExpanded=t,this.$emit("on-expand",JSON.parse(i()(this.cloneData[e])),t)},selectAll:function(e){var r=!0,n=!1,t=void 0;try{for(var a,i=o()(this.rebuildData);!(r=(a=i.next()).done);r=!0){var s=a.value;this.objData[s._index]._isDisabled||(this.objData[s._index]._isChecked=e)}}catch(e){n=!0,t=e}finally{try{!r&&i.return&&i.return()}finally{if(n)throw t}}var l=this.getSelection();e&&this.$emit("on-select-all",l),this.$emit("on-selection-change",l)},fixedHeader:function(){var e=this;this.height?this.$nextTick(function(){var r=parseInt(n.i(d.f)(e.$refs.title,"height"))||0,t=parseInt(n.i(d.f)(e.$refs.header,"height"))||0,o=parseInt(n.i(d.f)(e.$refs.footer,"height"))||0;e.bodyHeight=e.height-r-t-o}):this.bodyHeight=0},hideColumnFilter:function(){this.cloneColumns.forEach(function(e){return e._filterVisible=!1})},handleBodyScroll:function(e){this.showHeader&&(this.$refs.header.scrollLeft=e.target.scrollLeft),this.isLeftFixed&&(this.$refs.fixedBody.scrollTop=e.target.scrollTop),this.isRightFixed&&(this.$refs.fixedRightBody.scrollTop=e.target.scrollTop),this.hideColumnFilter()},handleMouseWheel:function(e){var r=e.deltaX,n=this.$refs.body;n.scrollLeft=r>0?n.scrollLeft+10:n.scrollLeft-10},sortData:function(e,r,n){var t=this,o=this.cloneColumns[n].key;return e.sort(function(e,a){return t.cloneColumns[n].sortMethod?t.cloneColumns[n].sortMethod(e[o],a[o],r):"asc"===r?e[o]>a[o]?1:-1:"desc"===r?e[o]<a[o]?1:-1:void 0}),e},handleSort:function(e,r){this.cloneColumns.forEach(function(e){return e._sortType="normal"});var n=this.cloneColumns[e].key;"custom"!==this.cloneColumns[e].sortable&&(this.rebuildData="normal"===r?this.makeDataWithFilter():this.sortData(this.rebuildData,r,e)),this.cloneColumns[e]._sortType=r,this.$emit("on-sort-change",{column:JSON.parse(i()(this.columns[this.cloneColumns[e]._index])),key:n,order:r})},handleFilterHide:function(e){this.cloneColumns[e]._isFiltered||(this.cloneColumns[e]._filterChecked=[])},filterData:function(e,r){return e.filter(function(e){if("function"==typeof r.filterRemote)return!0;for(var n=!r._filterChecked.length,t=0;t<r._filterChecked.length&&!(n=r.filterMethod(r._filterChecked[t],e));t++);return n})},filterOtherData:function(e,r){var n=this,t=this.cloneColumns[r];return"function"==typeof t.filterRemote&&t.filterRemote.call(this.$parent,t._filterChecked,t.key,t),this.cloneColumns.forEach(function(t,o){o!==r&&(e=n.filterData(e,t))}),e},handleFilter:function(e){var r=this.cloneColumns[e],n=this.makeDataWithSort();n=this.filterOtherData(n,e),this.rebuildData=this.filterData(n,r),this.cloneColumns[e]._isFiltered=!0,this.cloneColumns[e]._filterVisible=!1},handleFilterSelect:function(e,r){this.cloneColumns[e]._filterChecked=[r],this.handleFilter(e)},handleFilterReset:function(e){this.cloneColumns[e]._isFiltered=!1,this.cloneColumns[e]._filterVisible=!1,this.cloneColumns[e]._filterChecked=[];var r=this.makeDataWithSort();r=this.filterOtherData(r,e),this.rebuildData=r},makeData:function(){var e=n.i(d.e)(this.data);return e.forEach(function(e,r){e._index=r,e._rowKey=x++}),e},makeDataWithSort:function(){for(var e=this.makeData(),r="normal",n=-1,t=!1,o=0;o<this.cloneColumns.length;o++)if("normal"!==this.cloneColumns[o]._sortType){r=this.cloneColumns[o]._sortType,n=o,t="custom"===this.cloneColumns[o].sortable;break}return"normal"===r||t||(e=this.sortData(e,r,n)),e},makeDataWithFilter:function(){var e=this,r=this.makeData();return this.cloneColumns.forEach(function(n){return r=e.filterData(r,n)}),r},makeDataWithSortAndFilter:function(){var e=this,r=this.makeDataWithSort();return this.cloneColumns.forEach(function(n){return r=e.filterData(r,n)}),r},makeObjData:function(){var e={};return this.data.forEach(function(r,t){var o=n.i(d.e)(r);o._isHover=!1,o._disabled?o._isDisabled=o._disabled:o._isDisabled=!1,o._checked?o._isChecked=o._checked:o._isChecked=!1,o._expanded?o._isExpanded=o._expanded:o._isExpanded=!1,o._highlight?o._isHighlight=o._highlight:o._isHighlight=!1,e[t]=o}),e},makeColumns:function(){var e=n.i(d.e)(this.columns),r=[],t=[],o=[];return e.forEach(function(e,n){e._index=n,e._columnKey=F++,e._width=e.width?e.width:"",e._sortType="normal",e._filterVisible=!1,e._isFiltered=!1,e._filterChecked=[],e._filterMultiple=!("filterMultiple"in e)||e.filterMultiple,"filteredValue"in e&&(e._filterChecked=e.filteredValue,e._isFiltered=!0),"sortType"in e&&(e._sortType=e.sortType),e.fixed&&"left"===e.fixed?r.push(e):e.fixed&&"right"===e.fixed?t.push(e):o.push(e)}),r.concat(o).concat(t)},exportCsv:function(e){e.filename?-1===e.filename.indexOf(".csv")&&(e.filename+=".csv"):e.filename="table.csv";var r=[],t=[];e.columns&&e.data?(r=e.columns,t=e.data):(r=this.columns,"original"in e||(e.original=!0),t=e.original?this.data:this.rebuildData);var o=!1;"noHeader"in e&&(o=e.noHeader);var a=n.i(h.a)(r,t,",",o);g.a.download(e.filename,a)}},created:function(){this.context||(this.currentContext=this.$parent),this.showSlotHeader=void 0!==this.$slots.header,this.showSlotFooter=void 0!==this.$slots.footer,this.rebuildData=this.makeDataWithSortAndFilter()},mounted:function(){var e=this;this.handleResize(),this.fixedHeader(),this.$nextTick(function(){return e.ready=!0}),n.i(m.a)(window,"resize",this.handleResize),this.observer=v()(),this.observer.listenTo(this.$el,this.handleResize),this.$on("on-visible-change",function(r){r&&(e.handleResize(),e.fixedHeader())})},beforeDestroy:function(){n.i(m.b)(window,"resize",this.handleResize),this.observer.removeListener(this.$el,this.handleResize)},watch:{data:{handler:function(){var e=this,r=this.rebuildData.length;this.objData=this.makeObjData(),this.rebuildData=this.makeDataWithSortAndFilter(),this.handleResize(),r||this.fixedHeader(),setTimeout(function(){e.cloneData=n.i(d.e)(e.data)},0)},deep:!0},columns:{handler:function(){this.cloneColumns=this.makeColumns(),this.rebuildData=this.makeDataWithSortAndFilter(),this.handleResize()},deep:!0},height:function(){this.fixedHeader()}}}},"35kd":function(e,r,n){"use strict";var t=n("9Kmk"),o=n("LeM+"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},"3GDu":function(e,r,n){"use strict";function t(e){n("FaAm")}var o=n("fGNU"),a=n("KQhy"),i=n("VU/8"),s=t,l=i(o.a,a.a,s,null,null);r.a=l.exports},"3HUO":function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("Row",[n("Col",{attrs:{span:"16"}},[n("h3",[e._v(e._s(e.module.name))]),e._v(" "),n("p",{domProps:{innerHTML:e._s(e.module.description)}}),e._v(" "),n("h4",[e._v("Arguments")]),e._v(" "),n("div",[n("Table",{attrs:{columns:e.cols,data:e.module.params,stripe:!0,size:"small","disabled-hover":!0}})],1),e._v(" "),n("br"),e._v(" "),e.module.returns.length>0?n("div",[n("p",[n("strong",[e._v("Returns:")]),e._v(" "+e._s(e.module.returns[0].type)+" - "+e._s(e.module.returns[0].desc))])]):e._e(),e._v(" "),e.module.throws.length>0?n("div",[n("p",[n("strong",[e._v("Throws:")]),e._v(" "+e._s(e.module.throws[0].type)+" - "+e._s(e.module.throws[0].desc))])]):e._e(),e._v(" "),!1!==e.module.snippet?n("div",[n("h4",[e._v("Example")]),e._v(" "),n("pre",[e._v(e._s(e.module.snippet))])]):e._e()]),e._v(" "),n("Col",{attrs:{span:"7",offset:"1"}},[e.module.hasMap?n("div",[n("leaflet-map",{attrs:{code:e.module.example}})],1):e._e(),e._v(" "),n("p",{staticClass:"npmBadge"},[e._v("npm install @turf/"+e._s(e.module.npmName))]),e._v(" "),null!==e.module.parent?n("div",[n("p",{staticClass:"hasParent"},[n("strong",[e._v("Note:")]),e._v(" "+e._s(e.module.name)+" is part of the @turf/"+e._s(e.module.parent)+" module."),n("br"),n("br"),e._v("To use it as a stand-alone module will need to import @turf/"+e._s(e.module.parent)+" and call the "+e._s(e.module.name)+" method.")])]):e._e()])],1)},o=[],a={render:t,staticRenderFns:o};r.a=a},"3aCa":function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement;return(e._self._c||r)("i",{class:e.classes,style:e.styles})},o=[],a={render:t,staticRenderFns:o};r.a=a},"4qis":function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("div",{ref:"cell",class:e.classes},["index"===e.renderType?[e._v(e._s(e.naturalIndex+1))]:e._e(),e._v(" "),"selection"===e.renderType?[n("Checkbox",{attrs:{value:e.checked,disabled:e.disabled},on:{"on-change":e.toggleSelect},nativeOn:{click:function(r){r.stopPropagation(),e.handleClick(r)}}})]:e._e(),e._v(" "),"html"===e.renderType?[n("span",{domProps:{innerHTML:e._s(e.row[e.column.key])}})]:e._e(),e._v(" "),"normal"===e.renderType?[n("span",[e._v(e._s(e.row[e.column.key]))])]:e._e(),e._v(" "),"expand"!==e.renderType||e.row._disableExpand?e._e():[n("div",{class:e.expandCls,on:{click:e.toggleExpand}},[n("Icon",{attrs:{type:"ios-arrow-right"}})],1)],e._v(" "),"render"===e.renderType?n("Cell",{attrs:{row:e.row,column:e.column,index:e.index,render:e.column.render}}):e._e()],2)},o=[],a={render:t,staticRenderFns:o};r.a=a},"56XX":function(e,r,n){"use strict";var t=n("Tb+k"),o=n("a4AE"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},"5e7N":function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("div",{staticClass:"sidebarContents"},[n("div",{staticClass:"fixedContent"},[n("div",{staticClass:"logo",on:{click:e.goHome}},[n("h1",[e._v("TURF")])]),e._v(" "),n("router-link",{staticClass:"menuItem heading",attrs:{to:"/getting-started",tag:"li"}},[e._v("Getting Started")]),e._v(" "),n("input",{attrs:{id:"sidebarFilter",placeholder:"Search modules"},on:{keyup:e.filterList}})],1),e._v(" "),n("ul",{staticClass:"turfModules"},e._l(e.displayedModules,function(r){return n("li",{staticClass:"menuItem",class:{heading:r.isHeading},on:{click:e.clickModule}},[e._v(e._s(r.name))])}))])},o=[],a={render:t,staticRenderFns:o};r.a=a},"6Ivq":function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement;return(e._self._c||r)("li",{directives:[{name:"show",rawName:"v-show",value:!e.hidden,expression:"!hidden"}],class:e.classes,on:{click:function(r){r.stopPropagation(),e.select(r)},mouseout:function(r){r.stopPropagation(),e.blur(r)}}},[e._t("default",[e._v(e._s(e.showLabel))])],2)},o=[],a={render:t,staticRenderFns:o};r.a=a},"85G9":function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t),a=n("9Xvl"),i=n("VHau");r.a={name:"Spin",mixins:[i.a],props:{size:{validator:function(e){return n.i(a.b)(e,["small","large"])}},fix:{type:Boolean,default:!1},fullscreen:{type:Boolean,default:!1}},data:function(){return{showText:!1,visible:!1}},computed:{classes:function(){var e;return["ivu-spin",(e={},o()(e,"ivu-spin-"+this.size,!!this.size),o()(e,"ivu-spin-fix",this.fix),o()(e,"ivu-spin-show-text",this.showText),o()(e,"ivu-spin-fullscreen",this.fullscreen),e)]},mainClasses:function(){return"ivu-spin-main"},dotClasses:function(){return"ivu-spin-dot"},textClasses:function(){return"ivu-spin-text"},fullscreenVisible:function(){return!this.fullscreen||this.visible}},watch:{visible:function(e){e?this.addScrollEffect():this.removeScrollEffect()}},mounted:function(){this.showText=void 0!==this.$slots.default}}},"8Ol7":function(e,r,n){"use strict";r.a={name:"OptionGroup",props:{label:{type:String,default:""}},data:function(){return{prefixCls:"ivu-select-group",hidden:!1}},methods:{queryChange:function(){var e=this;this.$nextTick(function(){for(var r=e.$refs.options.querySelectorAll(".ivu-select-item"),n=!1,t=0;t<r.length;t++)if("none"!==r[t].style.display){n=!0;break}e.hidden=!n})}},mounted:function(){var e=this;this.$on("on-query-change",function(){return e.queryChange(),!0})}}},"8mTa":function(e,r,n){"use strict";var t=n("vtdE"),o=n("0UpZ"),a=n("Uku0"),i=n("/AF5");r.a={name:"TableBody",mixins:[i.a],components:{Cell:o.a,Expand:a.a,TableTr:t.a},props:{prefixCls:String,styleObject:Object,columns:Array,data:Array,objData:Object,columnsWidth:Object,fixed:{type:[Boolean,String],default:!1}},computed:{expandRender:function(){for(var e=function(){return""},r=0;r<this.columns.length;r++){var n=this.columns[r];n.type&&"expand"===n.type&&n.render&&(e=n.render)}return e}},methods:{rowChecked:function(e){return this.objData[e]&&this.objData[e]._isChecked},rowDisabled:function(e){return this.objData[e]&&this.objData[e]._isDisabled},rowExpanded:function(e){return this.objData[e]&&this.objData[e]._isExpanded},handleMouseIn:function(e){this.$parent.handleMouseIn(e)},handleMouseOut:function(e){this.$parent.handleMouseOut(e)},clickCurrentRow:function(e){this.$parent.clickCurrentRow(e)},dblclickCurrentRow:function(e){this.$parent.dblclickCurrentRow(e)}}}},"8rVD":function(e,r){},"9B9X":function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement;return(e._self._c||r)("div",{class:e.classes},[e._t("default")],2)},o=[],a={render:t,staticRenderFns:o};r.a=a},"9Kmk":function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t),a=n("ev9z"),i=n("gMJu"),s=n("iiqp"),l=n("WuDf"),p=n("9Xvl"),u=n("sWI9");r.a={name:"Poptip",mixins:[a.a,u.a],directives:{clickoutside:s.a,TransferDom:l.a},components:{iButton:i.a},props:{trigger:{validator:function(e){return n.i(p.b)(e,["click","focus","hover"])},default:"click"},placement:{validator:function(e){return n.i(p.b)(e,["top","top-start","top-end","bottom","bottom-start","bottom-end","left","left-start","left-end","right","right-start","right-end"])},default:"top"},title:{type:[String,Number]},content:{type:[String,Number],default:""},width:{type:[String,Number]},confirm:{type:Boolean,default:!1},okText:{type:String},cancelText:{type:String},transfer:{type:Boolean,default:!1}},data:function(){return{prefixCls:"ivu-poptip",showTitle:!0,isInput:!1}},computed:{classes:function(){return["ivu-poptip",o()({},"ivu-poptip-confirm",this.confirm)]},popperClasses:function(){return["ivu-poptip-popper",o()({},"ivu-poptip-confirm",this.transfer&&this.confirm)]},styles:function(){var e={};return this.width&&(e.width=this.width+"px"),e},localeOkText:function(){return void 0===this.okText?this.t("i.poptip.okText"):this.okText},localeCancelText:function(){return void 0===this.cancelText?this.t("i.poptip.cancelText"):this.cancelText}},methods:{handleClick:function(){return this.confirm?(this.visible=!this.visible,!0):"click"===this.trigger&&void(this.visible=!this.visible)},handleClose:function(){return this.confirm?(this.visible=!1,!0):"click"===this.trigger&&void(this.visible=!1)},handleFocus:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if("focus"!==this.trigger||this.confirm||this.isInput&&!e)return!1;this.visible=!0},handleBlur:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if("focus"!==this.trigger||this.confirm||this.isInput&&!e)return!1;this.visible=!1},handleMouseenter:function(){var e=this;if("hover"!==this.trigger||this.confirm)return!1;this.enterTimer&&clearTimeout(this.enterTimer),this.enterTimer=setTimeout(function(){e.visible=!0},100)},handleMouseleave:function(){var e=this;if("hover"!==this.trigger||this.confirm)return!1;this.enterTimer&&(clearTimeout(this.enterTimer),this.enterTimer=setTimeout(function(){e.visible=!1},100))},cancel:function(){this.visible=!1,this.$emit("on-cancel")},ok:function(){this.visible=!1,this.$emit("on-ok")},getInputChildren:function(){var e=this.$refs.reference.querySelectorAll("input"),r=this.$refs.reference.querySelectorAll("textarea"),n=null;return e.length?n=e[0]:r.length&&(n=r[0]),n}},mounted:function(){var e=this;this.confirm||(this.showTitle=void 0!==this.$slots.title||this.title),"focus"===this.trigger&&this.$nextTick(function(){var r=e.getInputChildren();r&&(e.isInput=!0,r.addEventListener("focus",e.handleFocus,!1),r.addEventListener("blur",e.handleBlur,!1))})},beforeDestroy:function(){var e=this.getInputChildren();e&&(e.removeEventListener("focus",this.handleFocus,!1),e.removeEventListener("blur",this.handleBlur,!1))}}},"9pVw":function(e,r,n){"use strict";var t=n("+sOc"),o=n("9B9X"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},ANvP:function(e,r){},BeJp:function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t),a=n("Uku0"),i=n("LW0X"),s=n("56XX");r.a={name:"TableCell",components:{Icon:i.a,Checkbox:s.a,Cell:a.a},props:{prefixCls:String,row:Object,column:Object,naturalIndex:Number,index:Number,checked:Boolean,disabled:Boolean,expanded:Boolean,fixed:{type:[Boolean,String],default:!1}},data:function(){return{renderType:"",uid:-1,context:this.$parent.$parent.$parent.currentContext}},computed:{classes:function(){var e;return[this.prefixCls+"-cell",(e={},o()(e,this.prefixCls+"-hidden",!this.fixed&&this.column.fixed&&("left"===this.column.fixed||"right"===this.column.fixed)),o()(e,this.prefixCls+"-cell-ellipsis",this.column.ellipsis||!1),o()(e,this.prefixCls+"-cell-with-expand","expand"===this.renderType),e)]},expandCls:function(){return[this.prefixCls+"-cell-expand",o()({},this.prefixCls+"-cell-expand-expanded",this.expanded)]}},methods:{toggleSelect:function(){this.$parent.$parent.$parent.toggleSelect(this.index)},toggleExpand:function(){this.$parent.$parent.$parent.toggleExpand(this.index)},handleClick:function(){}},created:function(){"index"===this.column.type?this.renderType="index":"selection"===this.column.type?this.renderType="selection":"html"===this.column.type?this.renderType="html":"expand"===this.column.type?this.renderType="expand":this.column.render?this.renderType="render":this.renderType="normal"}}},Bxm4:function(e,r){},EK0R:function(e,r,n){"use strict";var t=n("vTNg");r.a={name:"MainContent",props:["selectedModule"],components:{Row:t.a,Col:t.b}}},EhLO:function(e,r,n){"use strict";function t(e){n("lhDf")}var o=n("EK0R"),a=n("VpVS"),i=n("VU/8"),s=t,l=i(o.a,a.a,s,null,null);r.a=l.exports},F3fx:function(e,r,n){"use strict";var t=n("pFYg"),o=n.n(t),a=n("bOdI"),i=n.n(a),s=n("EMb8"),l=n("+i/C"),p=n("iiqp"),u=n("WuDf"),c=n("9Xvl"),d=n("pEmh"),m=n("sWI9"),h=n("d15d"),g="ivu-select";r.a={name:"iSelect",mixins:[d.a,m.a],components:{Icon:s.a,Drop:l.a},directives:{clickoutside:p.a,TransferDom:u.a},props:{value:{type:[String,Number,Array],default:""},label:{type:[String,Number,Array],default:""},multiple:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},clearable:{type:Boolean,default:!1},placeholder:{type:String},filterable:{type:Boolean,default:!1},filterMethod:{type:Function},remote:{type:Boolean,default:!1},remoteMethod:{type:Function},loading:{type:Boolean,default:!1},loadingText:{type:String},size:{validator:function(e){return n.i(c.b)(e,["small","large","default"])}},labelInValue:{type:Boolean,default:!1},notFoundText:{type:String},placement:{validator:function(e){return n.i(c.b)(e,["top","bottom"])},default:"bottom"},transfer:{type:Boolean,default:!1},autoComplete:{type:Boolean,default:!1},name:{type:String},elementId:{type:String}},data:function(){return{prefixCls:g,visible:!1,options:[],optionInstances:[],selectedSingle:"",selectedMultiple:[],focusIndex:0,query:"",lastQuery:"",selectToChangeQuery:!1,inputLength:20,notFound:!1,slotChangeDuration:!1,model:this.value,currentLabel:this.label}},computed:{classes:function(){var e;return["ivu-select",(e={},i()(e,"ivu-select-visible",this.visible),i()(e,"ivu-select-disabled",this.disabled),i()(e,"ivu-select-multiple",this.multiple),i()(e,"ivu-select-single",!this.multiple),i()(e,"ivu-select-show-clear",this.showCloseIcon),i()(e,"ivu-select-"+this.size,!!this.size),e)]},dropdownCls:function(){var e;return e={},i()(e,"ivu-select-dropdown-transfer",this.transfer),i()(e,"ivu-select-multiple",this.multiple&&this.transfer),i()(e,"ivu-auto-complete",this.autoComplete),e},selectionCls:function(){return i()({},"ivu-select-selection",!this.autoComplete)},showPlaceholder:function(){var e=!1;return"string"==typeof this.model?""===this.model&&(e=!0):Array.isArray(this.model)?this.model.length||(e=!0):null===this.model&&(e=!0),e},showCloseIcon:function(){return!this.multiple&&this.clearable&&!this.showPlaceholder},inputStyle:function(){var e={};return this.multiple&&(this.showPlaceholder?e.width="100%":e.width=this.inputLength+"px"),e},localePlaceholder:function(){return void 0===this.placeholder?this.t("i.select.placeholder"):this.placeholder},localeNotFoundText:function(){return void 0===this.notFoundText?this.t("i.select.noMatch"):this.notFoundText},localeLoadingText:function(){return void 0===this.loadingText?this.t("i.select.loading"):this.loadingText},transitionName:function(){return"bottom"===this.placement?"slide-up":"slide-down"},dropVisible:function(){var e=!0,r=this.$slots.default||[];return this.loading||!this.remote||""!==this.query||r.length||(e=!1),this.autoComplete&&!r.length&&(e=!1),this.visible&&e},notFoundShow:function(){var e=this.$slots.default||[];return this.notFound&&!this.remote||this.remote&&!this.loading&&!e.length}},methods:{toggleMenu:function(){if(this.disabled||this.autoComplete)return!1;this.visible=!this.visible},hideMenu:function(){this.visible=!1,this.focusIndex=0,this.broadcast("iOption","on-select-close")},findChild:function(e){var r=function r(n){n.$options.componentName?e(n):n.$children.length&&n.$children.forEach(function(n){r(n,e)})};this.optionInstances.length?this.optionInstances.forEach(function(e){r(e)}):this.$children.forEach(function(e){r(e)})},updateOptions:function(){var e=this,r=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=[],t=1;this.findChild(function(r){n.push({value:r.value,label:void 0===r.label?r.$el.textContent:r.label}),r.index=t++,e.optionInstances.push(r)}),this.options=n,this.remote||(this.updateSingleSelected(!0,r),this.updateMultipleSelected(!0,r))},updateSingleSelected:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=o()(this.model);if("string"===n||"number"===n){for(var t=!1,a=0;a<this.options.length;a++)if(this.model===this.options[a].value){this.selectedSingle=this.options[a].label,t=!0;break}r&&!t&&(this.model="",this.query="")}this.toggleSingleSelected(this.model,e)},clearSingleSelect:function(){this.showCloseIcon&&(this.findChild(function(e){e.selected=!1}),this.model="",this.filterable&&(this.query=""))},updateMultipleSelected:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.multiple&&Array.isArray(this.model)){for(var n=this.remote?this.selectedMultiple:[],t=0;t<this.model.length;t++)for(var o=this.model[t],a=0;a<this.options.length;a++){var i=this.options[a];o===i.value&&n.push({value:i.value,label:i.label})}var s=[],l={};if(n.forEach(function(e){l[e.value]||(s.push(e),l[e.value]=1)}),this.selectedMultiple=this.remote?s:n,r){for(var p=[],u=0;u<n.length;u++)p.push(n[u].value);this.model.length===p.length&&(this.slotChangeDuration=!0),this.model=p}}this.toggleMultipleSelected(this.model,e)},removeTag:function(e){if(this.disabled)return!1;if(this.remote){var r=this.model[e];this.selectedMultiple=this.selectedMultiple.filter(function(e){return e.value!==r})}this.model.splice(e,1),this.filterable&&this.visible&&this.$refs.input.focus(),this.broadcast("Drop","on-update-popper")},toggleSingleSelected:function(e){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.multiple){var n="";this.findChild(function(r){r.value===e?(r.selected=!0,n=void 0===r.label?r.$el.innerHTML:r.label):r.selected=!1}),this.hideMenu(),r||(this.labelInValue?(this.$emit("on-change",{value:e,label:n}),this.dispatch("FormItem","on-form-change",{value:e,label:n})):(this.$emit("on-change",e),this.dispatch("FormItem","on-form-change",e)))}},toggleMultipleSelected:function(e){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.multiple){for(var n=[],t=0;t<e.length;t++)n.push({value:e[t]});this.findChild(function(r){var t=e.indexOf(r.value);t>=0?(r.selected=!0,n[t].label=void 0===r.label?r.$el.innerHTML:r.label):r.selected=!1}),r||(this.labelInValue?(this.$emit("on-change",n),this.dispatch("FormItem","on-form-change",n)):(this.$emit("on-change",e),this.dispatch("FormItem","on-form-change",e)))}},handleClose:function(){this.hideMenu()},handleKeydown:function(e){if(this.visible){var r=e.keyCode;27===r&&(e.preventDefault(),this.hideMenu()),40===r&&(e.preventDefault(),this.navigateOptions("next")),38===r&&(e.preventDefault(),this.navigateOptions("prev")),13===r&&(e.preventDefault(),this.findChild(function(e){e.isFocus&&e.select()}))}},navigateOptions:function(e){var r=this;if("next"===e){var n=this.focusIndex+1;this.focusIndex=this.focusIndex===this.options.length?1:n}else if("prev"===e){var t=this.focusIndex-1;this.focusIndex=this.focusIndex<=1?this.options.length:t}var o={disabled:!1,hidden:!1},a=!1;this.findChild(function(e){e.index===r.focusIndex?(o.disabled=e.disabled,o.hidden=e.hidden,e.disabled||e.hidden||(e.isFocus=!0)):e.isFocus=!1,e.hidden||e.disabled||(a=!0)}),this.resetScrollTop(),(o.disabled||o.hidden)&&a&&this.navigateOptions(e)},resetScrollTop:function(){var e=this.focusIndex-1,r=this.optionInstances[e].$el.getBoundingClientRect().bottom-this.$refs.dropdown.$el.getBoundingClientRect().bottom,n=this.optionInstances[e].$el.getBoundingClientRect().top-this.$refs.dropdown.$el.getBoundingClientRect().top;r>0&&(this.$refs.dropdown.$el.scrollTop+=r),n<0&&(this.$refs.dropdown.$el.scrollTop+=n)},handleBlur:function(){var e=this;setTimeout(function(){if(!e.autoComplete){var r=e.model;e.multiple?e.query="":""!==r?(e.findChild(function(n){n.value===r&&(e.query=void 0===n.label?n.searchLabel:n.label)}),e.remote&&e.query!==e.lastQuery&&e.$nextTick(function(){e.query=e.lastQuery})):e.query=""}},300)},resetInputState:function(){this.inputLength=12*this.$refs.input.value.length+20},handleInputDelete:function(){this.multiple&&this.model.length&&""===this.query&&this.removeTag(this.model.length-1)},slotChange:function(){this.options=[],this.optionInstances=[]},setQuery:function(e){this.filterable&&(this.query=e)},modelToQuery:function(){var e=this;!this.multiple&&this.filterable&&void 0!==this.model&&this.findChild(function(r){e.model===r.value&&(r.label?e.query=r.label:r.searchLabel?e.query=r.searchLabel:e.query=r.value)})},broadcastQuery:function(e){n.i(c.g)(this,"OptionGroup")?(this.broadcast("OptionGroup","on-query-change",e),this.broadcast("iOption","on-query-change",e)):this.broadcast("iOption","on-query-change",e)},debouncedAppendRemove:function(){return n.i(h.a)(function(){var e=this;this.remote?this.findChild(function(r){r.updateSearchLabel(),r.selected=e.multiple?e.model.indexOf(r.value)>-1:e.model===r.value}):(this.modelToQuery(),this.$nextTick(function(){return e.broadcastQuery("")})),this.slotChange(),this.updateOptions(!0)})},updateLabel:function(){var e=this;this.remote&&(this.multiple||""===this.model?this.multiple&&this.model.length?(this.currentLabel.length!==this.model.length&&(this.currentLabel=this.model),this.selectedMultiple=this.model.map(function(r,n){return{value:r,label:e.currentLabel[n]}})):this.multiple&&!this.model.length&&(this.selectedMultiple=[]):(this.selectToChangeQuery=!0,""===this.currentLabel&&(this.currentLabel=this.model),this.lastQuery=this.currentLabel,this.query=this.currentLabel))}},mounted:function(){var e=this;this.modelToQuery(),this.updateLabel(),this.$nextTick(function(){e.broadcastQuery("")}),this.updateOptions(),document.addEventListener("keydown",this.handleKeydown),this.$on("append",this.debouncedAppendRemove()),this.$on("remove",this.debouncedAppendRemove()),this.$on("on-select-selected",function(r){if(e.model===r)e.autoComplete&&e.$emit("on-change",r),e.hideMenu();else if(e.multiple){var n=e.model.indexOf(r);n>=0?e.removeTag(n):(e.model.push(r),e.broadcast("Drop","on-update-popper")),e.filterable&&(""!==e.query&&(e.selectToChangeQuery=!0),e.query="",e.$refs.input.focus())}else e.model=r,e.filterable&&e.findChild(function(n){n.value===r&&(""!==e.query&&(e.selectToChangeQuery=!0),e.lastQuery=e.query=void 0===n.label?n.searchLabel:n.label)})})},beforeDestroy:function(){document.removeEventListener("keydown",this.handleKeydown)},watch:{value:function(e){this.model=e,""===e&&(this.query="")},label:function(e){this.currentLabel=e,this.updateLabel()},model:function(){var e=this;this.$emit("input",this.model),this.modelToQuery(),this.multiple?this.slotChangeDuration?this.slotChangeDuration=!1:this.updateMultipleSelected():this.updateSingleSelected(),!this.visible&&this.filterable&&this.$nextTick(function(){e.broadcastQuery("")})},visible:function(e){var r=this;if(e){if(this.filterable&&(this.multiple?this.$refs.input.focus():this.autoComplete||this.$refs.input.select(),this.remote)){this.findChild(function(e){e.selected=r.multiple?r.model.indexOf(e.value)>-1:r.model===e.value});var n=this.$slots.default||[];""===this.query||n.length||this.remoteMethod(this.query)}this.broadcast("Drop","on-update-popper")}else this.filterable&&(this.autoComplete||this.$refs.input.blur(),setTimeout(function(){r.broadcastQuery("")},300)),this.broadcast("Drop","on-destroy-popper")},query:function(e){var r=this;if(this.remote&&this.remoteMethod)this.selectToChangeQuery||(this.$emit("on-query-change",e),this.remoteMethod(e)),this.focusIndex=0,this.findChild(function(e){e.isFocus=!1});else{this.selectToChangeQuery||this.$emit("on-query-change",e),this.broadcastQuery(e);var n=!0;this.$nextTick(function(){r.findChild(function(e){e.hidden||(n=!1)}),r.notFound=n})}this.selectToChangeQuery=!1,this.broadcast("Drop","on-update-popper")}}}},FOxL:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement;return(e._self._c||r)("div",{staticClass:"ivu-select-dropdown",class:e.className,style:e.styles},[e._t("default")],2)},o=[],a={render:t,staticRenderFns:o};r.a=a},FaAm:function(e,r){},Fs8J:function(e,r,n){"use strict";function t(e,r){return l.circleMarker(r,{color:"#0C3952",fillOpacity:.8})}function o(e){var r=0;for(var n in e)r+=e[n];return r}var a=n("vTNg"),i=n("LuSo"),s=n("v8BA"),l=n("cgPD");l.mapbox.accessToken="pk.eyJ1IjoidG1jdyIsImEiOiJIZmRUQjRBIn0.lRARalfaGHnPdRcc-7QZYQ";var p=null,u=null,c=null;r.a={name:"Home",components:{Row:a.a,Col:a.b,Select:i.a,Option:i.b},data:function(){return{operation:"tin",turfOperations:["tin","buffer","centroid"]}},methods:{changeOperation:function(e){c.clearLayers();var r=null;"tin"===e&&(r=turf.tin(s.a,"price")),"buffer"===e&&(r=turf.buffer(s.a,200,"meters")),"centroid"===e&&(r=turf.centroid(s.a)),c=l.geoJson(r,d).addTo(u)}},mounted:function(){var e={attributionControl:!1,zoomControl:!1};p=l.mapbox.map("inMap","tmcw.kncfa9dj",e),u=l.mapbox.map("outMap","tmcw.kncfa9dj",e);var r=l.geoJson(s.a,d).addTo(p);c=l.geoJson(turf.tin(s.a,"price"),d).addTo(u),p.fitBounds(r.getBounds()),u.fitBounds(c.getBounds())}};var d={pointToLayer:t,style:function(e){if("Polygon"===e.geometry.type){return{weight:1,fillOpacity:o(e.properties)/62,color:"#0C3952"}}return{radius:6,stroke:!1,color:"#0C3952",fillOpacity:1}}}},Gn1C:function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t),a=n("woOf"),i=n.n(a),s=n("9pVw"),l=n("56XX"),p=n("35kd"),u=n("gMJu"),c=n("uBFQ"),d=n("/AF5"),m=n("sWI9");r.a={name:"TableHead",mixins:[d.a,m.a],components:{CheckboxGroup:s.a,Checkbox:l.a,Poptip:p.a,iButton:u.a,renderHeader:c.a},props:{prefixCls:String,styleObject:Object,columns:Array,objData:Object,data:Array,columnsWidth:Object,fixed:{type:[Boolean,String],default:!1}},computed:{styles:function(){var e=i()({},this.styleObject),r=0===this.$parent.bodyHeight?parseInt(this.styleObject.width):parseInt(this.styleObject.width)+this.$parent.scrollBarWidth;return e.width=r+"px",e},isSelectAll:function(){var e=!0;this.data.length||(e=!1),this.data.find(function(e){return!e._disabled})||(e=!1);for(var r=0;r<this.data.length;r++)if(!this.objData[this.data[r]._index]._isChecked&&!this.objData[this.data[r]._index]._isDisabled){e=!1;break}return e}},methods:{cellClasses:function(e){return[this.prefixCls+"-cell",o()({},this.prefixCls+"-hidden",!this.fixed&&e.fixed&&("left"===e.fixed||"right"===e.fixed))]},itemClasses:function(e,r){return[this.prefixCls+"-filter-select-item",o()({},this.prefixCls+"-filter-select-item-selected",e._filterChecked[0]===r.value)]},itemAllClasses:function(e){return[this.prefixCls+"-filter-select-item",o()({},this.prefixCls+"-filter-select-item-selected",!e._filterChecked.length)]},selectAll:function(){var e=!this.isSelectAll;this.$parent.selectAll(e)},handleSort:function(e,r){this.columns[e]._sortType===r&&(r="normal"),this.$parent.handleSort(e,r)},handleSortByHead:function(e){var r=this.columns[e];if(r.sortable){var n=r._sortType;"normal"===n?this.handleSort(e,"asc"):"asc"===n?this.handleSort(e,"desc"):this.handleSort(e,"normal")}},handleFilter:function(e){this.$parent.handleFilter(e)},handleSelect:function(e,r){this.$parent.handleFilterSelect(e,r)},handleReset:function(e){this.$parent.handleFilterReset(e)},handleFilterHide:function(e){this.$parent.handleFilterHide(e)}}}},KQhy:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement;return(e._self._c||r)("div",{staticStyle:{height:"400px"},attrs:{id:"turfMap"}})},o=[],a={render:t,staticRenderFns:o};r.a=a},L6pp:function(e,r,n){"use strict";var t=n("8mTa"),o=n("RTTc"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},LW0X:function(e,r,n){"use strict";var t=n("kRvs"),o=n("3aCa"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},"LeM+":function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("div",{directives:[{name:"clickoutside",rawName:"v-clickoutside",value:e.handleClose,expression:"handleClose"}],class:e.classes,on:{mouseenter:e.handleMouseenter,mouseleave:e.handleMouseleave}},[n("div",{ref:"reference",class:[e.prefixCls+"-rel"],on:{click:e.handleClick,mousedown:function(r){e.handleFocus(!1)},mouseup:function(r){e.handleBlur(!1)}}},[e._t("default")],2),e._v(" "),n("transition",{attrs:{name:"fade"}},[n("div",{directives:[{name:"show",rawName:"v-show",value:e.visible,expression:"visible"},{name:"transfer-dom",rawName:"v-transfer-dom"}],ref:"popper",class:e.popperClasses,style:e.styles,attrs:{"data-transfer":e.transfer},on:{mouseenter:e.handleMouseenter,mouseleave:e.handleMouseleave}},[n("div",{class:[e.prefixCls+"-content"]},[n("div",{class:[e.prefixCls+"-arrow"]}),e._v(" "),e.confirm?n("div",{class:[e.prefixCls+"-inner"]},[n("div",{class:[e.prefixCls+"-body"]},[n("i",{staticClass:"ivu-icon ivu-icon-help-circled"}),e._v(" "),n("div",{class:[e.prefixCls+"-body-message"]},[e._t("title",[e._v(e._s(e.title))])],2)]),e._v(" "),n("div",{class:[e.prefixCls+"-footer"]},[n("i-button",{attrs:{type:"text",size:"small"},nativeOn:{click:function(r){e.cancel(r)}}},[e._v(e._s(e.localeCancelText))]),e._v(" "),n("i-button",{attrs:{type:"primary",size:"small"},nativeOn:{click:function(r){e.ok(r)}}},[e._v(e._s(e.localeOkText))])],1)]):e._e(),e._v(" "),e.confirm?e._e():n("div",{class:[e.prefixCls+"-inner"]},[e.showTitle?n("div",{ref:"title",class:[e.prefixCls+"-title"]},[e._t("title",[n("div",{class:[e.prefixCls+"-title-inner"]},[e._v(e._s(e.title))])])],2):e._e(),e._v(" "),n("div",{class:[e.prefixCls+"-body"]},[n("div",{class:[e.prefixCls+"-body-content"]},[e._t("content",[n("div",{class:[e.prefixCls+"-body-content-inner"]},[e._v(e._s(e.content))])])],2)])])])])])],1)},o=[],a={render:t,staticRenderFns:o};r.a=a},M93x:function(e,r,n){"use strict";function t(e){n("ANvP")}var o=n("xJD8"),a=n("sJhC"),i=n("VU/8"),s=t,l=i(o.a,a.a,s,null,null);r.a=l.exports},Mexq:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("li",{directives:[{name:"show",rawName:"v-show",value:!e.hidden,expression:"!hidden"}],class:[e.prefixCls+"-wrap"]},[n("div",{class:[e.prefixCls+"-title"]},[e._v(e._s(e.label))]),e._v(" "),n("ul",[n("li",{ref:"options",class:[e.prefixCls]},[e._t("default")],2)])])},o=[],a={render:t,staticRenderFns:o};r.a=a},NHnr:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n("7+uW"),o=n("M93x"),a=n("YaEn");t.a.config.productionTip=!1,new t.a({el:"#app",router:a.a,template:"<App/>",components:{App:o.a}})},PIYW:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement;return(e._self._c||r)("div",{class:e.classes,style:e.styles},[e._t("default")],2)},o=[],a={render:t,staticRenderFns:o};r.a=a},RTTc:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("table",{style:e.styleObject,attrs:{cellspacing:"0",cellpadding:"0",border:"0"}},[n("colgroup",e._l(e.columns,function(r,t){return n("col",{attrs:{width:e.setCellWidth(r,t,!1)}})})),e._v(" "),n("tbody",{class:[e.prefixCls+"-tbody"]},[e._l(e.data,function(r,t){return[n("table-tr",{key:r._rowKey,attrs:{row:r,"prefix-cls":e.prefixCls},nativeOn:{mouseenter:function(n){n.stopPropagation(),e.handleMouseIn(r._index)},mouseleave:function(n){n.stopPropagation(),e.handleMouseOut(r._index)},click:function(n){e.clickCurrentRow(r._index)},dblclick:function(n){n.stopPropagation(),e.dblclickCurrentRow(r._index)}}},e._l(e.columns,function(o){return n("td",{class:e.alignCls(o,r)},[n("Cell",{key:o._columnKey,attrs:{fixed:e.fixed,"prefix-cls":e.prefixCls,row:r,column:o,"natural-index":t,index:r._index,checked:e.rowChecked(r._index),disabled:e.rowDisabled(r._index),expanded:e.rowExpanded(r._index)}})],1)})),e._v(" "),e.rowExpanded(r._index)?n("tr",[n("td",{class:e.prefixCls+"-expanded-cell",attrs:{colspan:e.columns.length}},[n("Expand",{key:r._rowKey,attrs:{row:r,render:e.expandRender,index:r._index}})],1)]):e._e()]})],2)])},o=[],a={render:t,staticRenderFns:o};r.a=a},"Tb+k":function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t),a=n("9Xvl"),i=n("pEmh"),s="ivu-checkbox";r.a={name:"Checkbox",mixins:[i.a],props:{disabled:{type:Boolean,default:!1},value:{type:[String,Number,Boolean],default:!1},trueValue:{type:[String,Number,Boolean],default:!0},falseValue:{type:[String,Number,Boolean],default:!1},label:{type:[String,Number,Boolean]},indeterminate:{type:Boolean,default:!1},size:{validator:function(e){return n.i(a.b)(e,["small","large","default"])}},name:{type:String}},data:function(){return{model:[],currentValue:this.value,group:!1,showSlot:!0,parent:n.i(a.a)(this,"CheckboxGroup")}},computed:{wrapClasses:function(){var e;return[s+"-wrapper",(e={},o()(e,s+"-group-item",this.group),o()(e,s+"-wrapper-checked",this.currentValue),o()(e,s+"-wrapper-disabled",this.disabled),o()(e,s+"-"+this.size,!!this.size),e)]},checkboxClasses:function(){var e;return[""+s,(e={},o()(e,s+"-checked",this.currentValue),o()(e,s+"-disabled",this.disabled),o()(e,s+"-indeterminate",this.indeterminate),e)]},innerClasses:function(){return s+"-inner"},inputClasses:function(){return s+"-input"}},mounted:function(){this.parent=n.i(a.a)(this,"CheckboxGroup"),this.parent&&(this.group=!0),this.group?this.parent.updateModel(!0):(this.updateModel(),this.showSlot=void 0!==this.$slots.default)},methods:{change:function(e){if(this.disabled)return!1;var r=e.target.checked;this.currentValue=r;var n=r?this.trueValue:this.falseValue;this.$emit("input",n),this.group?this.parent.change(this.model):(this.$emit("on-change",n),this.dispatch("FormItem","on-form-change",n))},updateModel:function(){this.currentValue=this.value===this.trueValue}},watch:{value:function(e){if(e!==this.trueValue&&e!==this.falseValue)throw"Value should be trueValue or falseValue.";this.updateModel()}}}},Tbgz:function(e,r,n){"use strict";var t=n("r0eE"),o=n("PIYW"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},UQzz:function(e,r,n){"use strict";var t=n("8Ol7"),o=n("Mexq"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);i.exports},VJc1:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement;return(e._self._c||r)("tr",{class:e.rowClasses(e.row._index)},[e._t("default")],2)},o=[],a={render:t,staticRenderFns:o};r.a=a},VpVS:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("Row",[n("Col",{staticClass:"mainContentArea",attrs:{span:"22",offset:"1"}},[n("Row",[n("router-view",{attrs:{module:e.selectedModule}})],1)],1)],1)},o=[],a={render:t,staticRenderFns:o};r.a=a},Vufg:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement;return(e._self._c||r)("div",{class:e.classes,style:e.styles},[e._t("default")],2)},o=[],a={render:t,staticRenderFns:o};r.a=a},YRzF:function(e,r,n){"use strict";var t=n("iHcn"),o=n("Vufg"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},YaEn:function(e,r,n){"use strict";var t=n("7+uW"),o=n("/ocq"),a=n("lO7g"),i=n("qjSL"),s=n("tN2n");t.a.use(o.a),r.a=new o.a({mode:"history",routes:[{path:"/",name:"Home",component:a.a},{path:"/docs",name:"Docs",component:i.a},{path:"/getting-started",name:"GettingStarted",component:s.a}]})},ZqHZ:function(e,r){},a4AE:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("label",{class:e.wrapClasses},[n("span",{class:e.checkboxClasses},[n("span",{class:e.innerClasses}),e._v(" "),e.group?n("input",{directives:[{name:"model",rawName:"v-model",value:e.model,expression:"model"}],class:e.inputClasses,attrs:{type:"checkbox",disabled:e.disabled,name:e.name},domProps:{value:e.label,checked:Array.isArray(e.model)?e._i(e.model,e.label)>-1:e.model},on:{change:e.change,__c:function(r){var n=e.model,t=r.target,o=!!t.checked;if(Array.isArray(n)){var a=e.label,i=e._i(n,a);t.checked?i<0&&(e.model=n.concat([a])):i>-1&&(e.model=n.slice(0,i).concat(n.slice(i+1)))}else e.model=o}}}):e._e(),e._v(" "),e.group?e._e():n("input",{class:e.inputClasses,attrs:{type:"checkbox",disabled:e.disabled,name:e.name},domProps:{checked:e.currentValue},on:{change:e.change}})]),e._v(" "),e._t("default",[e.showSlot?n("span",[e._v(e._s(e.label))]):e._e()])],2)},o=[],a={render:t,staticRenderFns:o};r.a=a},bhK3:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("div",[n("Col",{attrs:{span:"17"}},[n("h3",[e._v("Getting started with Turf.js")]),e._v(" "),n("p",[e._v("There are a few different ways to get started using Turf, the documentation below will provide a couple of the common scenarios.")]),e._v(" "),n("h4",[e._v("Using directly in the browser")]),e._v(" "),n("p",[e._v("Load the minified file via a script tag, this will expose a global variable named turf.")]),e._v(" "),n("pre",[n("code",{staticClass:"html"},[e._v("<script src='https://npmcdn.com/@turf/turf/turf.min.js'><\/script>   \n<script>\n    var bbox = turf.bbox(features);\n<\/script>")])]),e._v(" "),n("p",[n("strong",[e._v("Note:")]),e._v(" The full build of Turf weighs around 500kb which is a fair bit of javascript to load so you probably only want to pull in the bits you need, see the instructions below on how to create a custom build.")]),e._v(" "),n("h4",[e._v("Using in Node or with a build tool")]),e._v(" "),n("p",[e._v("If you're working in Node or with build tool (such as webpack, browserify or rollup) you can include individual turf modules in your project.")]),e._v(" "),n("pre",[n("code",{staticClass:"js"},[e._v("// Import your module of interest\nconst turfCollect = require('@turf/collect');\n// And then use it\nturfCollect(points, polys, 'population', 'populationValues')")])]),e._v(" "),n("h4",[e._v("Creating custom builds for use in the browser")]),e._v(" "),n("p",[n("strong",[e._v("Step 1")]),e._v(" Create a folder and install whatever modules you are interested in via npm")]),e._v(" "),n("pre",[n("code",{staticClass:"js"},[e._v("npm install @turf/collect @turf/buffer")])]),e._v(" "),n("p",[n("strong",[e._v("Step 2")]),e._v(" Create a file called main.js in the root directory, in this include your required modules within a modules.exports statement")]),e._v(" "),n("pre",[n("code",{staticClass:"js"},[e._v("module.exports = {\ncollect: require('@turf/collect'),\nbuffer: require('@turf/buffer')\n};")])]),e._v(" "),n("p",[n("strong",[e._v("Step 3")]),e._v(" Run the following browserify command")]),e._v(" "),n("pre",[n("code",{staticClass:"js"},[e._v("browserify main.js -s turf > outTurf.js ")])]),e._v(" "),n("p",[n("strong",[e._v("Done")]),e._v(" You can now use your outTurf.js file where you want just like you would normally use Turf, eg load it via a script tag and call turf using the turf global variable.")])]),e._v(" "),n("Col",{staticClass:"highlight",attrs:{span:"6",offset:"1"}},[n("h4",[e._v("Examples")]),e._v(" "),n("p",[e._v("Below are some helpful resources for getting started with Turf.")]),e._v(" "),n("h5",[e._v("Code Repositories")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/turfjs/turf-node-example"}},[e._v("Turf & Node.js for geoprocessing tasks")])]),n("br"),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/mapbox/turf-server-example"}},[e._v("Turf & Express.js to create a spatial server")])]),e._v(" "),n("h5",[e._v("Guides")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.mapbox.com/guides/intro-to-turf"}},[e._v("Intro To Turf")])]),n("br"),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.mapbox.com/guides/analysis-with-turf"}},[e._v("Analysis with Turf.js")])])])],1)},o=[],a={render:t,staticRenderFns:o};r.a=a},eJK4:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("transition",{attrs:{name:"fade"}},[e.fullscreenVisible?n("div",{class:e.classes},[n("div",{class:e.mainClasses},[n("span",{class:e.dotClasses}),e._v(" "),n("div",{class:e.textClasses},[e._t("default")],2)])]):e._e()])},o=[],a={render:t,staticRenderFns:o};r.a=a},eNc0:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("div",{class:e.wrapClasses,style:e.styles},[n("div",{class:e.classes},[e.showSlotHeader?n("div",{ref:"title",class:[e.prefixCls+"-title"]},[e._t("header")],2):e._e(),e._v(" "),e.showHeader?n("div",{ref:"header",class:[e.prefixCls+"-header"],on:{mousewheel:e.handleMouseWheel}},[n("table-head",{attrs:{"prefix-cls":e.prefixCls,styleObject:e.tableStyle,columns:e.cloneColumns,"obj-data":e.objData,"columns-width":e.columnsWidth,data:e.rebuildData}})],1):e._e(),e._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:!(e.localeNoDataText&&(!e.data||0===e.data.length)||e.localeNoFilteredDataText&&(!e.rebuildData||0===e.rebuildData.length)),expression:"!((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))"}],ref:"body",class:[e.prefixCls+"-body"],style:e.bodyStyle,on:{scroll:e.handleBodyScroll}},[n("table-body",{ref:"tbody",attrs:{"prefix-cls":e.prefixCls,styleObject:e.tableStyle,columns:e.cloneColumns,data:e.rebuildData,"columns-width":e.columnsWidth,"obj-data":e.objData}})],1),e._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:!((!e.localeNoDataText||e.data&&0!==e.data.length)&&(!e.localeNoFilteredDataText||e.rebuildData&&0!==e.rebuildData.length)),expression:"((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))"}],class:[e.prefixCls+"-tip"]},[n("table",{attrs:{cellspacing:"0",cellpadding:"0",border:"0"}},[n("tbody",[n("tr",[n("td",{style:{height:e.bodyStyle.height}},[e.data&&0!==e.data.length?n("span",{domProps:{innerHTML:e._s(e.localeNoFilteredDataText)}}):n("span",{domProps:{innerHTML:e._s(e.localeNoDataText)}})])])])])]),e._v(" "),e.isLeftFixed?n("div",{class:[e.prefixCls+"-fixed"],style:e.fixedTableStyle},[e.showHeader?n("div",{class:e.fixedHeaderClasses},[n("table-head",{attrs:{fixed:"left","prefix-cls":e.prefixCls,styleObject:e.fixedTableStyle,columns:e.leftFixedColumns,"obj-data":e.objData,"columns-width":e.columnsWidth,data:e.rebuildData}})],1):e._e(),e._v(" "),n("div",{ref:"fixedBody",class:[e.prefixCls+"-fixed-body"],style:e.fixedBodyStyle},[n("table-body",{attrs:{fixed:"left","prefix-cls":e.prefixCls,styleObject:e.fixedTableStyle,columns:e.leftFixedColumns,data:e.rebuildData,"columns-width":e.columnsWidth,"obj-data":e.objData}})],1)]):e._e(),e._v(" "),e.isRightFixed?n("div",{class:[e.prefixCls+"-fixed-right"],style:e.fixedRightTableStyle},[e.showHeader?n("div",{class:e.fixedHeaderClasses},[n("table-head",{attrs:{fixed:"right","prefix-cls":e.prefixCls,styleObject:e.fixedRightTableStyle,columns:e.rightFixedColumns,"obj-data":e.objData,"columns-width":e.columnsWidth,data:e.rebuildData}})],1):e._e(),e._v(" "),n("div",{ref:"fixedRightBody",class:[e.prefixCls+"-fixed-body"],style:e.fixedBodyStyle},[n("table-body",{attrs:{fixed:"right","prefix-cls":e.prefixCls,styleObject:e.fixedRightTableStyle,columns:e.rightFixedColumns,data:e.rebuildData,"columns-width":e.columnsWidth,"obj-data":e.objData}})],1)]):e._e(),e._v(" "),e.showSlotFooter?n("div",{ref:"footer",class:[e.prefixCls+"-footer"]},[e._t("footer")],2):e._e()]),e._v(" "),e.loading?n("Spin",{attrs:{fix:"",size:"large"}},[e._t("loading")],2):e._e()],1)},o=[],a={render:t,staticRenderFns:o};r.a=a},et8w:function(e,r,n){"use strict";var t=n("pZpy"),o=n("6Ivq"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},f3NK:function(e,r,n){"use strict";var t=n("vTNg");r.a={name:"Sidebar",props:["modules"],components:{Col:t.b},computed:{displayedModules:function(){return this.modules.filter(function(e){return!1===e.hidden})}},methods:{goHome:function(){this.$router.push("/")},clickModule:function(e){e.target.classList.value.includes("heading")||(this.$router.push("docs"),window.scrollTo(0,0),this.$emit("changeModule",e.target.innerText))},filterList:function(e){this.$emit("filterChanged",e.target.value.toUpperCase())}}}},fGNU:function(module,__webpack_exports__,__webpack_require__){"use strict";var L=__webpack_require__("cgPD");L.mapbox.accessToken="pk.eyJ1IjoidG1jdyIsImEiOiJIZmRUQjRBIn0.lRARalfaGHnPdRcc-7QZYQ";var turfMap=null,fg=null;__webpack_exports__.a={name:"Map",props:["code"],watch:{code:function(){this.moveMapToExample()}},methods:{moveMapToExample:function moveMapToExample(){fg.clearLayers();var zoomText=this.getLayersAndZoom(this.code);return eval(this.code+zoomText)},getLayersAndZoom:function(e){return"\n      addToMap.forEach(function (geojson) {\n        var geojsonLayer = L.mapbox.featureLayer(geojson);\n        geojsonLayer.eachLayer(function (layer) {\n          if (layer.feature.properties){\n            if (Object.keys(layer.feature.properties).length > 0){\n              layer.bindPopup(JSON.stringify(layer.feature.properties));\n            }\n          }\n        });\n        fg.addLayer(geojsonLayer)\n      })\n      turfMap.fitBounds(fg.getBounds(), {padding: [30,30]})"}},mounted:function(){turfMap=L.mapbox.map("turfMap","mapbox.streets"),turfMap.scrollWheelZoom.disable(),fg=L.featureGroup([]).addTo(turfMap),this.moveMapToExample()}}},gMJu:function(e,r,n){"use strict";var t=n("ovAK"),o=n("k4Te"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},iHcn:function(e,r,n){"use strict";var t=n("fZjL"),o=n.n(t),a=n("pFYg"),i=n.n(a),s=n("bOdI"),l=n.n(s),p=n("9Xvl");r.a={name:"iCol",props:{span:[Number,String],order:[Number,String],offset:[Number,String],push:[Number,String],pull:[Number,String],className:String,xs:[Number,Object],sm:[Number,Object],md:[Number,Object],lg:[Number,Object]},data:function(){return{gutter:0}},computed:{classes:function(){var e,r=this,n=["ivu-col",(e={},l()(e,"ivu-col-span-"+this.span,this.span),l()(e,"ivu-col-order-"+this.order,this.order),l()(e,"ivu-col-offset-"+this.offset,this.offset),l()(e,"ivu-col-push-"+this.push,this.push),l()(e,"ivu-col-pull-"+this.pull,this.pull),l()(e,""+this.className,!!this.className),e)];return["xs","sm","md","lg"].forEach(function(e){if("number"==typeof r[e])n.push("ivu-col-span-"+e+"-"+r[e]);else if("object"===i()(r[e])){var t=r[e];o()(t).forEach(function(r){n.push("span"!==r?"ivu-col-"+e+"-"+r+"-"+t[r]:"ivu-col-span-"+e+"-"+t[r])})}}),n},styles:function(){var e={};return 0!==this.gutter&&(e={paddingLeft:this.gutter/2+"px",paddingRight:this.gutter/2+"px"}),e}},methods:{updateGutter:function(){var e=n.i(p.a)(this,"Row");e&&e.updateGutter(e.gutter)}},mounted:function(){this.updateGutter()},beforeDestroy:function(){this.updateGutter()}}},iZNE:function(e,r,n){"use strict";var t=n("85G9"),o=n("eJK4"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},j19H:function(e,r,n){"use strict";var t=n("7+uW"),o=n("9Xvl"),a=t.a.prototype.$isServer,i=a?function(){}:n("qUa9");r.a={name:"Drop",props:{placement:{type:String,default:"bottom-start"},className:{type:String}},data:function(){return{popper:null,width:""}},computed:{styles:function(){var e={};return this.width&&(e.width=this.width+"px"),e}},methods:{update:function(){var e=this;a||(this.popper?this.$nextTick(function(){e.popper.update()}):this.$nextTick(function(){e.popper=new i(e.$parent.$refs.reference,e.$el,{gpuAcceleration:!1,placement:e.placement,boundariesPadding:0,forceAbsolute:!0,boundariesElement:"body"}),e.popper.onCreate(function(r){e.resetTransformOrigin(r)})}),"iSelect"===this.$parent.$options.name&&(this.width=parseInt(n.i(o.f)(this.$parent.$el,"width"))))},destroy:function(){var e=this;this.popper&&(this.resetTransformOrigin(this.popper),setTimeout(function(){e.popper.destroy(),e.popper=null},300))},resetTransformOrigin:function(e){var r={top:"bottom",bottom:"top"},n=e._popper.getAttribute("x-placement").split("-")[0],t=r[n];e._popper.style.transformOrigin="center "+t}},created:function(){this.$on("on-update-popper",this.update),this.$on("on-destroy-popper",this.destroy)},beforeDestroy:function(){this.popper&&this.popper.destroy()}}},k4Te:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("button",{class:e.classes,attrs:{type:e.htmlType,disabled:e.disabled},on:{click:e.handleClick}},[e.loading?n("Icon",{staticClass:"ivu-load-loop",attrs:{type:"load-c"}}):e._e(),e._v(" "),e.icon&&!e.loading?n("Icon",{attrs:{type:e.icon}}):e._e(),e._v(" "),e.showSlot?n("span",{ref:"slot"},[e._t("default")],2):e._e()],1)},o=[],a={render:t,staticRenderFns:o};r.a=a},kRvs:function(e,r,n){"use strict";r.a={name:"Icon",props:{type:String,size:[Number,String],color:String},computed:{classes:function(){return"ivu-icon ivu-icon-"+this.type},styles:function(){var e={};return this.size&&(e["font-size"]=this.size+"px"),this.color&&(e.color=this.color),e}}}},lO7g:function(e,r,n){"use strict";function t(e){n("ZqHZ")}var o=n("Fs8J"),a=n("2VjF"),i=n("VU/8"),s=t,l=i(o.a,a.a,s,"data-v-74e577d2",null);r.a=l.exports},lZ5c:function(e,r,n){"use strict";function t(e){n("Bxm4")}var o=n("f3NK"),a=n("5e7N"),i=n("VU/8"),s=t,l=i(o.a,a.a,s,null,null);r.a=l.exports},lhDf:function(e,r){},ll2Y:function(e,r,n){"use strict";var t=n("vTNg");r.a={name:"GettingStarted",components:{Row:t.a,Col:t.b}}},omKD:function(e,r,n){"use strict";var t=n("F3fx"),o=n("2BZS"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},ovAK:function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t),a=n("EMb8"),i=n("9Xvl");r.a={name:"Button",components:{Icon:a.a},props:{type:{validator:function(e){return n.i(i.b)(e,["primary","ghost","dashed","text","info","success","warning","error","default"])}},shape:{validator:function(e){return n.i(i.b)(e,["circle","circle-outline"])}},size:{validator:function(e){return n.i(i.b)(e,["small","large","default"])}},loading:Boolean,disabled:Boolean,htmlType:{default:"button",validator:function(e){return n.i(i.b)(e,["button","submit","reset"])}},icon:String,long:{type:Boolean,default:!1}},data:function(){return{showSlot:!0}},computed:{classes:function(){var e;return["ivu-btn",(e={},o()(e,"ivu-btn-"+this.type,!!this.type),o()(e,"ivu-btn-long",this.long),o()(e,"ivu-btn-"+this.shape,!!this.shape),o()(e,"ivu-btn-"+this.size,!!this.size),o()(e,"ivu-btn-loading",null!=this.loading&&this.loading),o()(e,"ivu-btn-icon-only",!this.showSlot&&(!!this.icon||this.loading)),e)]}},methods:{handleClick:function(e){this.$emit("click",e)}},mounted:function(){this.showSlot=void 0!==this.$slots.default}}},pZpy:function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t),a=n("pEmh"),i=n("9Xvl"),s="ivu-select-item";r.a={name:"iOption",componentName:"select-item",mixins:[a.a],props:{value:{type:[String,Number],required:!0},label:{type:[String,Number]},disabled:{type:Boolean,default:!1}},data:function(){return{selected:!1,index:0,isFocus:!1,hidden:!1,searchLabel:"",autoComplete:!1}},computed:{classes:function(){var e;return[""+s,(e={},o()(e,s+"-disabled",this.disabled),o()(e,s+"-selected",this.selected&&!this.autoComplete),o()(e,s+"-focus",this.isFocus),e)]},showLabel:function(){return this.label?this.label:this.value}},methods:{select:function(){if(this.disabled)return!1;this.dispatch("iSelect","on-select-selected",this.value)},blur:function(){this.isFocus=!1},queryChange:function(e){var r=e.replace(/(\^|\(|\)|\[|\]|\$|\*|\+|\.|\?|\\|\{|\}|\|)/g,"\\$1");this.hidden=!new RegExp(r,"i").test(this.searchLabel)},updateSearchLabel:function(){this.searchLabel=this.$el.innerHTML}},mounted:function(){var e=this;this.updateSearchLabel(),this.dispatch("iSelect","append"),this.$on("on-select-close",function(){e.isFocus=!1}),this.$on("on-query-change",function(r){e.queryChange(r)});var r=n.i(i.a)(this,"iSelect");r&&(this.autoComplete=r.autoComplete)},beforeDestroy:function(){this.dispatch("iSelect","remove")}}},qjSL:function(e,r,n){"use strict";function t(e){n("xVmU")}var o=n("x/wQ"),a=n("3HUO"),i=n("VU/8"),s=t,l=i(o.a,a.a,s,null,null);r.a=l.exports},r0eE:function(e,r,n){"use strict";var t=n("bOdI"),o=n.n(t),a=n("9Xvl");r.a={name:"Row",props:{type:{validator:function(e){return n.i(a.b)(e,["flex"])}},align:{validator:function(e){return n.i(a.b)(e,["top","middle","bottom"])}},justify:{validator:function(e){return n.i(a.b)(e,["start","end","center","space-around","space-between"])}},gutter:{type:Number,default:0},className:String},computed:{classes:function(){var e;return[(e={},o()(e,"ivu-row",!this.type),o()(e,"ivu-row-"+this.type,!!this.type),o()(e,"ivu-row-"+this.type+"-"+this.align,!!this.align),o()(e,"ivu-row-"+this.type+"-"+this.justify,!!this.justify),o()(e,""+this.className,!!this.className),e)]},styles:function(){var e={};return 0!==this.gutter&&(e={marginLeft:this.gutter/-2+"px",marginRight:this.gutter/-2+"px"}),e}},methods:{updateGutter:function(e){var r=n.i(a.c)(this,"iCol");r.length&&r.forEach(function(r){0!==e&&(r.gutter=e)})}},watch:{gutter:function(e){this.updateGutter(e)}}}},sJhC:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("Row",{attrs:{id:"app"}},[n("Col",{attrs:{span:"4"}},[n("sidebar",{attrs:{modules:e.modulesList},on:{changeModule:e.setModule,filterChanged:e.filterModules}})],1),e._v(" "),n("Col",{staticClass:"mainContent",attrs:{span:"20"}},[n("content-area",{attrs:{selectedModule:e.selectedModule}})],1)],1)},o=[],a={render:t,staticRenderFns:o};r.a=a},tN2n:function(e,r,n){"use strict";function t(e){n("8rVD")}var o=n("ll2Y"),a=n("bhK3"),i=n("VU/8"),s=t,l=i(o.a,a.a,s,null,null);r.a=l.exports},v8BA:function(e,r,n){"use strict";n.d(r,"a",function(){return t});var t={type:"FeatureCollection",features:[{type:"Feature",properties:{price:10},geometry:{type:"Point",coordinates:[-74.00081634521484,40.73919337320588]}},{type:"Feature",properties:{price:12},geometry:{type:"Point",coordinates:[-73.99227619171143,40.74234739360884]}},{type:"Feature",properties:{price:16},geometry:{type:"Point",coordinates:[-73.9972972869873,40.732201970137126]}},{type:"Feature",properties:{price:5},geometry:{type:"Point",coordinates:[-73.99476528167725,40.73799025385534]}},{type:"Feature",properties:{price:15},geometry:{type:"Point",coordinates:[-73.98914337158203,40.74153451605774]}},{type:"Feature",properties:{price:5},geometry:{type:"Point",coordinates:[-73.99330615997314,40.734803508271256]}},{type:"Feature",properties:{price:2},geometry:{type:"Point",coordinates:[-73.98837089538574,40.73906330729812]}}]}},vrLH:function(e,r,n){"use strict";var t=n("Gn1C"),o=n("yZ13"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},vtdE:function(e,r,n){"use strict";var t=n("1pZ/"),o=n("VJc1"),a=n("VU/8"),i=a(t.a,o.a,null,null,null);r.a=i.exports},"x/wQ":function(e,r,n){"use strict";var t=n("3GDu"),o=n("vTNg"),a=n("yoLw");r.a={name:"Module",props:["module"],data:function(){return{cols:[{title:"Argument",key:"Argument",width:105},{title:"Type",key:"Type",width:200},{title:"Description",key:"Description"}]}},components:{leafletMap:t.a,Row:o.a,Col:o.b,Table:a.a}}},xJD8:function(e,r,n){"use strict";var t=n("lZ5c"),o=n("EhLO"),a=n("2LA7"),i=n.n(a),s=n("vTNg");r.a={name:"app",components:{Sidebar:t.a,ContentArea:o.a,Row:s.a,Col:s.b},data:function(){return{selectedModuleName:"along",modulesList:[],modules:i.a.modules}},computed:{selectedModule:function(){return i.a.modules.filter(function(e){return e.name===this.selectedModuleName},this)[0]}},methods:{setModule:function(e){location.hash=e,this.selectedModuleName=e},filterModules:function(e){this.modulesList.forEach(function(r){-1!==r.name.toUpperCase().indexOf(e)||r.isHeading?r.hidden=!1:r.hidden=!0})}},created:function(){var e=location.hash.replace("#","");this.modulesList=i.a.sidebar,i.a.sidebar.forEach(function(r){e===r.name&&(this.selectedModuleName=e)},this)}}},xVmU:function(e,r){},yZ13:function(e,r,n){"use strict";var t=function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("table",{style:e.styles,attrs:{cellspacing:"0",cellpadding:"0",border:"0"}},[n("colgroup",e._l(e.columns,function(r,t){return n("col",{attrs:{width:e.setCellWidth(r,t,!0)}})})),e._v(" "),n("thead",[n("tr",e._l(e.columns,function(r,t){return n("th",{class:e.alignCls(r)},[n("div",{class:e.cellClasses(r)},["expand"===r.type?[r.renderHeader?n("render-header",{attrs:{render:r.renderHeader,column:r,index:t}}):n("span",[e._v(e._s(r.title||""))])]:"selection"===r.type?[n("Checkbox",{attrs:{value:e.isSelectAll},on:{"on-change":e.selectAll}})]:[r.renderHeader?n("render-header",{attrs:{render:r.renderHeader,column:r,index:t}}):n("span",{on:{click:function(r){e.handleSortByHead(t)}}},[e._v(e._s(r.title||"#"))]),e._v(" "),r.sortable?n("span",{class:[e.prefixCls+"-sort"]},[n("i",{staticClass:"ivu-icon ivu-icon-arrow-up-b",class:{on:"asc"===r._sortType},on:{click:function(r){e.handleSort(t,"asc")}}}),e._v(" "),n("i",{staticClass:"ivu-icon ivu-icon-arrow-down-b",class:{on:"desc"===r._sortType},on:{click:function(r){e.handleSort(t,"desc")}}})]):e._e(),e._v(" "),e.isPopperShow(r)?n("Poptip",{attrs:{placement:"bottom"},on:{"on-popper-hide":function(r){e.handleFilterHide(t)}},model:{value:r._filterVisible,callback:function(e){r._filterVisible=e},expression:"column._filterVisible"}},[n("span",{class:[e.prefixCls+"-filter"]},[n("i",{staticClass:"ivu-icon ivu-icon-funnel",class:{on:r._isFiltered}})]),e._v(" "),r._filterMultiple?n("div",{class:[e.prefixCls+"-filter-list"],attrs:{slot:"content"},slot:"content"},[n("div",{class:[e.prefixCls+"-filter-list-item"]},[n("checkbox-group",{model:{value:r._filterChecked,callback:function(e){r._filterChecked=e},expression:"column._filterChecked"}},e._l(r.filters,function(t){return n("checkbox",{key:r._columnKey,attrs:{label:t.value}},[e._v(e._s(t.label))])}))],1),e._v(" "),n("div",{class:[e.prefixCls+"-filter-footer"]},[n("i-button",{attrs:{type:"text",size:"small",disabled:!r._filterChecked.length},nativeOn:{click:function(r){e.handleFilter(t)}}},[e._v(e._s(e.t("i.table.confirmFilter")))]),e._v(" "),n("i-button",{attrs:{type:"text",size:"small"},nativeOn:{click:function(r){e.handleReset(t)}}},[e._v(e._s(e.t("i.table.resetFilter")))])],1)]):n("div",{class:[e.prefixCls+"-filter-list"],attrs:{slot:"content"},slot:"content"},[n("ul",{class:[e.prefixCls+"-filter-list-single"]},[n("li",{class:e.itemAllClasses(r),on:{click:function(r){e.handleReset(t)}}},[e._v(e._s(e.t("i.table.clearFilter")))]),e._v(" "),e._l(r.filters,function(o){return n("li",{class:e.itemClasses(r,o),on:{click:function(r){e.handleSelect(t,o.value)}}},[e._v(e._s(o.label))])})],2)])]):e._e()]],2)])}))])])},o=[],a={render:t,staticRenderFns:o};r.a=a}},["NHnr"]);
//# sourceMappingURL=app.23701c64f6287bf16bbe.js.map